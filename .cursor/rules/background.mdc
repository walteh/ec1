---
description: Background context for EC1 Fast MicroVM project - always applied
globs: 
alwaysApply: true
---
# EC1 Fast MicroVM Project Context

**⚠️ IMPORTANT: Agents should update this rule when project standards or tools change**

## Mission: Build the world's fastest Firecracker-compatible microVM implementation

### Core Advantages
- **Init injection for SSH-free command execution** (revolutionary!)
- **Sub-100ms boot times** (industry-leading target)
- **Apple VZ backend** (high-performance foundation)
- **Stream performance testing** (catches bottlenecks automatically)

### Development Environment
- Use `./gow` wrapper for all Go commands (lightweight go tool wrapper)
- **NEVER use `./go` script** - we've transitioned to `./gow`
- Maintain **>85% function coverage** (enforced)
- Performance-first development approach
- Built-in benchmarking and optimization tools

### Key Tools and Commands
```bash
./gow test -function-coverage    # Test with coverage analysis
./gow test -codesign            # Test with code signing (macOS)
./gow mod tidy                  # Workspace-aware dependency management
./gow tool [tool] [args...]     # Run go tools
./gow dap                       # Debug adapter protocol
```

### Project Structure
- **pkg/firecracker/** - MAIN Firecracker API implementation (NOT sandbox!)
- **pkg/vmm/** - Virtual machine management abstraction
- **pkg/vmm/vf/** - Apple VZ backend implementation
- **pkg/bootloader/** - Init injection system (our secret weapon)
- **pkg/testing/tstream/** - Stream performance testing framework
- **gen/firecracker-swagger-go/** - Generated Firecracker API definitions

### Key Performance Targets
- **Boot time**: <100ms from API call to VM ready
- **Command execution**: <10ms overhead vs bare metal
- **Memory footprint**: <50MB for basic workloads
- **Test coverage**: >85% function coverage required

### Secret Weapon
Our init injection system eliminates SSH overhead - every other microVM solution uses SSH for command execution. We execute directly through embedded gRPC init. This is our competitive advantage for Apple-level performance.

### Recent Changes
- Transitioned from `./go` script to lightweight `./gow` wrapper
- Firecracker API implementation moved to `pkg/firecracker/`
- VMM abstraction layer created for multiple hypervisor support
- Stream performance testing framework integrated

Refer to `.cursor/README.md` for complete development guide.