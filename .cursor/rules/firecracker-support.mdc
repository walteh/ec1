---
description: 
globs: *firecracker*
alwaysApply: false
---
---
description: Quick reference for Firecracker API implementation in pkg/firecracker/
globs: pkg/firecracker/** 
alwaysApply: false
---
**⚠️ IMPORTANT: Agents MUST keep these rules updated as implementation details change.**

# Firecracker Integration Guidelines (`pkg/firecracker/`)

## 📖 Complete Strategy & Analysis

For a comprehensive understanding of why we support the Firecracker API, alternative comparisons, the full implementation roadmap, and strategic goals, **refer to the main strategy document:**

➡️ **[docs/firecracker-support.md](mdc:root/root/root/docs/firecracker-support.md)**

This rule provides a quick reference for active development.

## 🎯 Core Objective for `pkg/firecracker/`

Implement a **100% Firecracker API-compatible REST server** that leverages our unique advantages (Apple VZ backend + init injection) to achieve **sub-100ms boot times** and superior performance on macOS.

## 🏗️ Key Architectural Points for `pkg/firecracker/`

-   **Location:** All Firecracker API implementation code resides in `pkg/firecracker/`.
-   **`FirecrackerMicroVM[V]`:** This is the central struct in `pkg/firecracker/api.go` that implements the Firecracker operations.
-   **VMM Abstraction & Modularity:**
    -   **DO** use the VMM abstraction layer (`pkg/vmm/`) for all hypervisor interactions. The VMM layer is designed for modular backends (e.g., `vf`, `kata`, `libkrun` found in `pkg/vmm/`).
        ```go
        import "github.com/walteh/ec1/pkg/vmm" 
        // Example:
        // vm, err := hypervisor.NewVirtualMachine(ctx, id, options, bootloader)
        ```
    -   **DON'T** access specific VMM backends like `pkg/vmm/vf/` directly from `pkg/firecracker/`.
    -   New hypervisor support should be added by creating a new sub-package in `pkg/vmm/` and implementing the common `vmm.Hypervisor` and `vmm.VirtualMachine` interfaces.
-   **Init Injection:**
    -   **DO** leverage the `pkg/bootloader/` system to enable SSH-free command execution. This is a core performance feature.
        ```go
        bootloader := &bootloader.LinuxBootloader{
            VmlinuzPath:   vmi.KernelPath(),
            InitrdPath:    vmi.InitramfsPath(), // Ensures our gRPC init is used
            KernelCmdLine: vmi.KernelArgs(),
            InitInjection: true, // Crucial for performance
        }
        ```

## ⚡ Key Commands & Workflow for `pkg/firecracker/`

```bash
# Navigate to the primary workspace
cd pkg/firecracker/

# Run all tests with function coverage (>85% REQUIRED)
./gow test -function-coverage ./...

# Run performance benchmarks
./gow test -bench=. ./...

# Run integration tests (if available and tagged)
./gow test -tags=integration ./...
```

## 🚨 Essential Development Rules for `pkg/firecracker/`

1.  **API Compatibility:**
    -   Use models from `gen/firecracker-swagger-go/` exclusively.
    -   Ensure JSON responses are identical to upstream Firecracker.
    -   Test thoroughly with real Firecracker clients (e.g., Firecracker SDK, Kata Containers).
2.  **Performance Standards (Non-Negotiable):**
    -   **Boot Time:** <100ms.
    -   **Memory Usage:** <50MB baseline.
    -   **Command Execution:** <10ms overhead (via gRPC init, NOT SSH).
    -   **API Latency:** <5ms for configuration endpoints.
    -   Utilize `pkg/testing/tstream/` for I/O performance validation.
3.  **No SSH Dependencies:** Leverage init injection for all guest interactions.
4.  **Test Coverage:** Maintain >85% function coverage. CI will enforce this.
5.  **Documentation:** Update `docs/firecracker-support.md` and `pkg/firecracker/NOTES.md` as features are implemented or designs change.

## 📊 Current Implementation Status

For the most up-to-date, granular status of API endpoint implementation, see:
➡️ **[pkg/firecracker/NOTES.md](mdc:root/root/root/pkg/firecracker/NOTES.md)**

**Our Goal:** Make our Firecracker API implementation on macOS the fastest and most efficient in the world! 🚀
