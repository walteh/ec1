#!/bin/busybox sh
set -eux
export PATH=/usr/sbin:/usr/bin:/sbin:/bin

# vm-init: OCI Container Supervisor for EC1 MicroVMs
# This script acts as PID 1 and manages container lifecycle

# ---------- 1. Early system setup ----------
# Create essential mount points
for d in /proc /sys /dev /newroot /run /run/ovl ; do 
    mkdir -p "$d"
done

# Mount essential pseudo-filesystems
mount -t devtmpfs devtmpfs /dev      # /dev/null, /dev/console, etc.
mount -t proc     proc     /proc
mount -t sysfs    sysfs    /sys
mount -t tmpfs    tmpfs    /run      # for overlay workdirs

# Optional: pts and shm for better compatibility
mkdir -p /dev/pts /dev/shm
mount -t devpts devpts /dev/pts
mount -t tmpfs  tmpfs  /dev/shm

# ---------- 2. Mount the container rootfs ----------
# Mount the rootfs exported by the host (virtio-fs tag "rootfs")
mount -t virtiofs rootfs /newroot

# Move live mounts into the new root so containers inherit them
mount -o move /dev  /newroot/dev
mount -o move /proc /newroot/proc
mount -o move /sys  /newroot/sys
mount -o move /run  /newroot/run

mkdir -p /newroot/ec1
cp /vm-init /newroot/ec1-init

# ---------- 3. Container discovery and execution ----------
# Look for container metadata in the rootfs
IMAGE_DIR="/newroot"
CONFIG_FILE=""

# # Try to find OCI config in various locations
# for cfg in "/newroot/ec1/config.json" "/newroot/config.json" "/newroot/oci/config.json"; do
#     if [ -f "$cfg" ]; then
#         CONFIG_FILE="$cfg"
#         echo "Found OCI config at: $cfg"
#         break
#     fi
# done

exec switch_root /newroot /vm-init "/ec1/ec1-container-metadata.json" "$@"


# # If we have container metadata, run as a container
# if [ -n "$CONFIG_FILE" ] && [ -f "$CONFIG_FILE" ]; then
#     echo "Running as OCI container with config: $CONFIG_FILE"
    
#     # Switch to the container rootfs
#     exec switch_root /newroot /sbin/vm-init "$CONFIG_FILE" "$@"
# else
#     echo "No OCI config found, running as traditional VM"
    
#     # Check for traditional init systems
#     for init_path in "/newroot/sbin/init" "/newroot/init" "/newroot/bin/init"; do
#         if [ -x "$init_path" ]; then
#             echo "Found init at: $init_path"
#             exec switch_root /newroot "$init_path" "$@"
#         fi
#     done
    
#     # Fallback to shell for debugging
#     echo "No init found, dropping to shell"
#     exec switch_root /newroot /bin/sh
# fi