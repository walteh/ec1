#!/bin/busybox sh
set -e

# vm-init: OCI Container Supervisor
# This script runs as PID 1 inside the container rootfs and manages container lifecycle
# Usage: vm-init <config.json> [override-command...]

CONFIG_FILE="$1"
shift || { echo "usage: vm-init <config.json> [command...]"; poweroff -f; }

echo "vm-init: Starting OCI container supervisor"
echo "vm-init: Config file: $CONFIG_FILE"
echo "vm-init: Override args: $*"

# ---------- 1. Prepare overlay filesystem for container ----------
CID="container-$(date +%s)"
LOWER="/rootfs"          # the read-only merged layers (current root)
UP="/run/ovl/$CID/upper"
WK="/run/ovl/$CID/work"
ROOT="/run/ovl/$CID/merged"

mkdir -p "$UP" "$WK" "$ROOT"

# Create overlay mount for writable container filesystem
echo "vm-init: Creating overlay filesystem"
mount -t overlay overlay -o lowerdir="$LOWER",upperdir="$UP",workdir="$WK" "$ROOT" || {
    echo "vm-init: Overlay mount failed, falling back to read-only bind mount"
    mount --bind / "$ROOT"
}

# ---------- 2. Derive container entrypoint ----------
if [ $# -gt 0 ]; then
    # CLI override wins
    echo "vm-init: Using command line override: $*"
    ENTRY_CMD="$*"
else
    # Read from OCI config.json
    echo "vm-init: Reading entrypoint from $CONFIG_FILE"
    
    if [ ! -f "$CONFIG_FILE" ]; then
        echo "vm-init: Config file not found: $CONFIG_FILE"
        poweroff -f
    fi
    
    # Extract Entrypoint and Cmd arrays from config.json
    # This is a simplified parser - in production you'd want more robust JSON parsing
    ENTRYPOINT=$(grep -o '"Entrypoint":\s*\[[^]]*\]' "$CONFIG_FILE" | sed 's/.*\[\(.*\)\].*/\1/' | tr -d '",' || echo "")
    CMD=$(grep -o '"Cmd":\s*\[[^]]*\]' "$CONFIG_FILE" | sed 's/.*\[\(.*\)\].*/\1/' | tr -d '",' || echo "")
    
    # Combine entrypoint and cmd
    if [ -n "$ENTRYPOINT" ] && [ -n "$CMD" ]; then
        ENTRY_CMD="$ENTRYPOINT $CMD"
    elif [ -n "$ENTRYPOINT" ]; then
        ENTRY_CMD="$ENTRYPOINT"
    elif [ -n "$CMD" ]; then
        ENTRY_CMD="$CMD"
    else
        echo "vm-init: No ENTRYPOINT or CMD found in config, using /bin/sh"
        ENTRY_CMD="/bin/sh"
    fi
fi

echo "vm-init: Launching container: $ENTRY_CMD"

# ---------- 3. Set up container environment ----------
# Read environment variables from config if available
if [ -f "$CONFIG_FILE" ]; then
    # Extract environment variables (simplified)
    ENV_VARS=$(grep -o '"Env":\s*\[[^]]*\]' "$CONFIG_FILE" | sed 's/.*\[\(.*\)\].*/\1/' | tr -d '"' | tr ',' '\n' || echo "")
    if [ -n "$ENV_VARS" ]; then
        echo "vm-init: Setting environment variables"
        echo "$ENV_VARS" | while IFS= read -r env_var; do
            if [ -n "$env_var" ]; then
                export "$env_var"
                echo "vm-init: Set $env_var"
            fi
        done
    fi
fi

# Set default environment
export PATH="/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
export HOME="/root"
export TERM="${TERM:-xterm}"

# ---------- 4. Run container with namespace isolation ----------
echo "vm-init: Starting container with PID namespace isolation"

# Create container process with namespace isolation
unshare --fork --pid --mount --ipc --uts --net --mount-proc \
    chroot "$ROOT" sh -c "
        # Set up minimal environment inside container
        cd /
        exec $ENTRY_CMD
    " &

CHILD_PID=$!
echo "vm-init: Container started with PID $CHILD_PID"

# ---------- 5. Container lifecycle management ----------
# Function to handle signals and cleanup
cleanup() {
    echo "vm-init: Received signal, cleaning up..."
    if [ -n "$CHILD_PID" ]; then
        kill -TERM "$CHILD_PID" 2>/dev/null || true
        sleep 2
        kill -KILL "$CHILD_PID" 2>/dev/null || true
    fi
    
    # Cleanup overlay mount
    umount "$ROOT" 2>/dev/null || true
    rm -rf "/run/ovl/$CID" 2>/dev/null || true
    
    echo "vm-init: Cleanup complete"
}

# Set up signal handlers
trap cleanup TERM INT QUIT

# Wait for container to exit
wait "$CHILD_PID"
EXIT_STATUS=$?

echo "vm-init: Container exited with status $EXIT_STATUS"

# Cleanup
cleanup

# Decide what to do next
if [ "$EXIT_STATUS" -eq 0 ]; then
    echo "vm-init: Container completed successfully, shutting down VM"
else
    echo "vm-init: Container failed with exit code $EXIT_STATUS"
fi

# Power off the VM (or you could restart, loop for more containers, etc.)
echo "vm-init: Powering off VM"
poweroff -f 