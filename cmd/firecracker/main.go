package main

import (
	"context"
	"fmt"
	"log"
	"log/slog"
	"os"

	"github.com/go-openapi/loads"

	flag "github.com/spf13/pflag"

	"github.com/walteh/ec1/gen/firecracker-swagger-go/restapi"
	"github.com/walteh/ec1/gen/firecracker-swagger-go/restapi/operations"
	"github.com/walteh/ec1/pkg/testutils"
)

// This file was generated by the swagger tool.
// Make sure not to overwrite this file after you generated it because all your edits would be lost!

func main() {

	ctx := context.Background()

	ctx = testutils.SetupSlogSimple(ctx)

	swaggerSpec, err := loads.Embedded(restapi.SwaggerJSON, restapi.FlatSwaggerJSON)
	if err != nil {
		log.Fatalln(err)
	}

	var server *restapi.Server // make sure init is called

	flag.Usage = func() {
		fmt.Fprint(os.Stderr, "Usage:\n")
		fmt.Fprint(os.Stderr, "  firecracker-api-server [OPTIONS]\n\n")

		title := "Firecracker API"
		fmt.Fprint(os.Stderr, title+"\n\n")
		desc := "RESTful public-facing API. The API is accessible through HTTP calls on specific URLs carrying JSON modeled data. The transport medium is a Unix Domain Socket."
		if desc != "" {
			fmt.Fprintf(os.Stderr, "%s\n\n", desc)
		}
		fmt.Fprintln(os.Stderr, flag.CommandLine.FlagUsages())
	}
	// parse the CLI flags
	flag.Parse()

	// hypervisor := hypervisor.NewFirecrackerHypervisor()

	// impl := fc.NewFirecrackerMicroVM(ctx, hypervisor.NewFirecrackerHypervisor())

	logf := testutils.NewLogfBridge(ctx, slog.LevelDebug, slog.String("service", "firecracker"))

	api := operations.NewSwaggerAPI(swaggerSpec, nil)

	api.Logger = logf.Logf

	// get server with flag values filled out
	server = restapi.NewServer(api)
	defer server.Shutdown()

	server.ConfigureAPI()

	if err := server.ServeContext(ctx); err != nil {
		log.Fatalln(err)
	}

}
