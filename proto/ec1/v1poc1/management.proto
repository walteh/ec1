edition = "2023";

package ec1.v1poc1;

import "ec1/v1poc1/common.proto";
import "ec1/v1poc1/constraints.proto";
import "ec1/validate/validate.proto";

// ManagementService provides functions for agents to register and report status
service ManagementService {
	// RegisterAgent registers an agent with the management server
	rpc RegisterAgent(RegisterAgentRequest) returns (RegisterAgentResponse) {
		option idempotency_level = NO_SIDE_EFFECTS;
	}


	// ReportAgentStatus reports the agent's current status
	rpc ReportAgentStatus(ReportAgentStatusRequest) returns (ReportAgentStatusResponse) {
		option idempotency_level = NO_SIDE_EFFECTS;
	}
}

// RegisterAgentRequest is the request message for registering an agent
message RegisterAgentRequest {
	// Unique identifier for the agent
	// cel validation with agent-xid
	string agent_id = 1 [
		(validate.field).string.(id).agent = true
	];

	// Host address where the agent is running
	string host_address = 2 [
		(validate.field).string.uri = true
	];

	// Type of hypervisor the agent is managing
	HypervisorType hypervisor_type = 3;

	// Available resources managed by the agent
	Resources total_resources = 4;
}

// RegisterAgentResponse is the response message after registering an agent
message RegisterAgentResponse {
	// Success status of registration
	bool success = 1;

	// Error message, if any
	string error = 2;
}

// ReportAgentStatusRequest is the request message for reporting agent status
message ReportAgentStatusRequest {
	// Unique identifier for the agent
	string agent_id = 1 [
		(validate.field).string.(id).agent = true
	];

	// List of VMs running on the agent
	repeated VMInfo vms = 2;
}

// ReportAgentStatusResponse is the response message after reporting agent status
message ReportAgentStatusResponse {
	// Success status
	bool success = 1;

	// Error message, if any
	string error = 2;
}

// VMInfo provides information about a running VM
message VMInfo {
	// ID of the VM
	string vm_id = 1 [
		(validate.field).string.(id).vm = true
	];

	// Name of the VM
	string name = 2;

	// Status of the VM
	VMStatus status = 3;

	// IP address of the VM
	string ip_address = 4 [
		(validate.field).string.ipv4_prefix = true
	];

	Resources resources_max = 5;

	Resources resources_live = 6;
}
