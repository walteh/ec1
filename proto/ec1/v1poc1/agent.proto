edition = "2023";

package ec1.v1poc1;

import "ec1/v1poc1/common.proto";
import "ec1/v1poc1/constraints.proto";
import "ec1/validate/validate.proto";

// AgentService provides VM management functionality on a host
service AgentService {
	// StartVM starts a new virtual machine on the agent's host
	rpc StartVM(StartVMRequest) returns (StartVMResponse) {
		option idempotency_level = NO_SIDE_EFFECTS;
	}


	// StopVM stops a running virtual machine on the agent's host
	rpc StopVM(StopVMRequest) returns (StopVMResponse) {
		option idempotency_level = NO_SIDE_EFFECTS;
	}


	// GetVMStatus gets the status of a virtual machine on the agent's host
	rpc GetVMStatus(GetVMStatusRequest) returns (GetVMStatusResponse) {
		option idempotency_level = NO_SIDE_EFFECTS;
	}
}

// StartVMRequest is the request message for starting a VM
message StartVMRequest {
	// Name of the VM
	string name = 1;

	// Resource allocation
	Resources resources_max  = 2;
	Resources resources_boot = 3;

	// Disk image path
	string disk_image_path = 4 [
		(validate.field).string.uri = true
	];

	// Network configuration
	VMNetworkConfig network_config = 5;
}

// StartVMResponse is the response message after starting a VM
message StartVMResponse {
	// ID of the started VM
	string vm_id = 1 [
		(validate.field).string.(id).vm = true
	];

	// IP address of the VM (if available)
	string ip_address = 2 [
		(validate.field).string.ipv4 = true
	];

	// Status of the VM
	VMStatus status = 3;

	// Error message, if any
	string error = 4;
}

// StopVMRequest is the request message for stopping a VM
message StopVMRequest {
	// ID of the VM to stop
	string vm_id = 1;

	// Force stop the VM without graceful shutdown
	bool force = 2;
}

// StopVMResponse is the response message after stopping a VM
message StopVMResponse {
	// Success status
	bool success = 1;

	// Error message, if any
	string error = 2;
}

// GetVMStatusRequest is the request message for getting VM status
message GetVMStatusRequest {
	// ID of the VM to get status for
	string vm_id = 1;
}

// GetVMStatusResponse is the response message with VM status
message GetVMStatusResponse {
	// Status of the VM
	VMStatus status = 1;

	// IP address of the VM (if available)
	string ip_address = 2;

	// Error message, if any
	string error = 3;
}

// VMNetworkConfig defines networking options for a VM
message VMNetworkConfig {
	// Network type
	NetworkType network_type = 1;

	// Port forwarding rules
	repeated PortForward port_forwards = 2;
}
