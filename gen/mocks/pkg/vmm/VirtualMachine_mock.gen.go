// Code generated by mockery. DO NOT EDIT.

package mockvmm

import (
	context "context"
	net "net"

	mock "github.com/stretchr/testify/mock"

	strongunits "github.com/containers/common/pkg/strongunits"

	virtio "github.com/walteh/ec1/pkg/virtio"

	vmm "github.com/walteh/ec1/pkg/vmm"
)

// MockVirtualMachine is an autogenerated mock type for the VirtualMachine type
type MockVirtualMachine struct {
	mock.Mock
}

type MockVirtualMachine_Expecter struct {
	mock *mock.Mock
}

func (_m *MockVirtualMachine) EXPECT() *MockVirtualMachine_Expecter {
	return &MockVirtualMachine_Expecter{mock: &_m.Mock}
}

// CanHardStop provides a mock function with given fields: ctx
func (_m *MockVirtualMachine) CanHardStop(ctx context.Context) bool {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for CanHardStop")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context) bool); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockVirtualMachine_CanHardStop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CanHardStop'
type MockVirtualMachine_CanHardStop_Call struct {
	*mock.Call
}

// CanHardStop is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockVirtualMachine_Expecter) CanHardStop(ctx interface{}) *MockVirtualMachine_CanHardStop_Call {
	return &MockVirtualMachine_CanHardStop_Call{Call: _e.mock.On("CanHardStop", ctx)}
}

func (_c *MockVirtualMachine_CanHardStop_Call) Run(run func(ctx context.Context)) *MockVirtualMachine_CanHardStop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockVirtualMachine_CanHardStop_Call) Return(_a0 bool) *MockVirtualMachine_CanHardStop_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockVirtualMachine_CanHardStop_Call) RunAndReturn(run func(context.Context) bool) *MockVirtualMachine_CanHardStop_Call {
	_c.Call.Return(run)
	return _c
}

// CanPause provides a mock function with given fields: ctx
func (_m *MockVirtualMachine) CanPause(ctx context.Context) bool {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for CanPause")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context) bool); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockVirtualMachine_CanPause_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CanPause'
type MockVirtualMachine_CanPause_Call struct {
	*mock.Call
}

// CanPause is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockVirtualMachine_Expecter) CanPause(ctx interface{}) *MockVirtualMachine_CanPause_Call {
	return &MockVirtualMachine_CanPause_Call{Call: _e.mock.On("CanPause", ctx)}
}

func (_c *MockVirtualMachine_CanPause_Call) Run(run func(ctx context.Context)) *MockVirtualMachine_CanPause_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockVirtualMachine_CanPause_Call) Return(_a0 bool) *MockVirtualMachine_CanPause_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockVirtualMachine_CanPause_Call) RunAndReturn(run func(context.Context) bool) *MockVirtualMachine_CanPause_Call {
	_c.Call.Return(run)
	return _c
}

// CanRequestStop provides a mock function with given fields: ctx
func (_m *MockVirtualMachine) CanRequestStop(ctx context.Context) bool {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for CanRequestStop")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context) bool); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockVirtualMachine_CanRequestStop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CanRequestStop'
type MockVirtualMachine_CanRequestStop_Call struct {
	*mock.Call
}

// CanRequestStop is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockVirtualMachine_Expecter) CanRequestStop(ctx interface{}) *MockVirtualMachine_CanRequestStop_Call {
	return &MockVirtualMachine_CanRequestStop_Call{Call: _e.mock.On("CanRequestStop", ctx)}
}

func (_c *MockVirtualMachine_CanRequestStop_Call) Run(run func(ctx context.Context)) *MockVirtualMachine_CanRequestStop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockVirtualMachine_CanRequestStop_Call) Return(_a0 bool) *MockVirtualMachine_CanRequestStop_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockVirtualMachine_CanRequestStop_Call) RunAndReturn(run func(context.Context) bool) *MockVirtualMachine_CanRequestStop_Call {
	_c.Call.Return(run)
	return _c
}

// CanResume provides a mock function with given fields: ctx
func (_m *MockVirtualMachine) CanResume(ctx context.Context) bool {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for CanResume")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context) bool); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockVirtualMachine_CanResume_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CanResume'
type MockVirtualMachine_CanResume_Call struct {
	*mock.Call
}

// CanResume is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockVirtualMachine_Expecter) CanResume(ctx interface{}) *MockVirtualMachine_CanResume_Call {
	return &MockVirtualMachine_CanResume_Call{Call: _e.mock.On("CanResume", ctx)}
}

func (_c *MockVirtualMachine_CanResume_Call) Run(run func(ctx context.Context)) *MockVirtualMachine_CanResume_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockVirtualMachine_CanResume_Call) Return(_a0 bool) *MockVirtualMachine_CanResume_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockVirtualMachine_CanResume_Call) RunAndReturn(run func(context.Context) bool) *MockVirtualMachine_CanResume_Call {
	_c.Call.Return(run)
	return _c
}

// CanStart provides a mock function with given fields: ctx
func (_m *MockVirtualMachine) CanStart(ctx context.Context) bool {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for CanStart")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context) bool); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockVirtualMachine_CanStart_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CanStart'
type MockVirtualMachine_CanStart_Call struct {
	*mock.Call
}

// CanStart is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockVirtualMachine_Expecter) CanStart(ctx interface{}) *MockVirtualMachine_CanStart_Call {
	return &MockVirtualMachine_CanStart_Call{Call: _e.mock.On("CanStart", ctx)}
}

func (_c *MockVirtualMachine_CanStart_Call) Run(run func(ctx context.Context)) *MockVirtualMachine_CanStart_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockVirtualMachine_CanStart_Call) Return(_a0 bool) *MockVirtualMachine_CanStart_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockVirtualMachine_CanStart_Call) RunAndReturn(run func(context.Context) bool) *MockVirtualMachine_CanStart_Call {
	_c.Call.Return(run)
	return _c
}

// CurrentState provides a mock function with no fields
func (_m *MockVirtualMachine) CurrentState() vmm.VirtualMachineStateType {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for CurrentState")
	}

	var r0 vmm.VirtualMachineStateType
	if rf, ok := ret.Get(0).(func() vmm.VirtualMachineStateType); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(vmm.VirtualMachineStateType)
	}

	return r0
}

// MockVirtualMachine_CurrentState_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CurrentState'
type MockVirtualMachine_CurrentState_Call struct {
	*mock.Call
}

// CurrentState is a helper method to define mock.On call
func (_e *MockVirtualMachine_Expecter) CurrentState() *MockVirtualMachine_CurrentState_Call {
	return &MockVirtualMachine_CurrentState_Call{Call: _e.mock.On("CurrentState")}
}

func (_c *MockVirtualMachine_CurrentState_Call) Run(run func()) *MockVirtualMachine_CurrentState_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockVirtualMachine_CurrentState_Call) Return(_a0 vmm.VirtualMachineStateType) *MockVirtualMachine_CurrentState_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockVirtualMachine_CurrentState_Call) RunAndReturn(run func() vmm.VirtualMachineStateType) *MockVirtualMachine_CurrentState_Call {
	_c.Call.Return(run)
	return _c
}

// Devices provides a mock function with no fields
func (_m *MockVirtualMachine) Devices() []virtio.VirtioDevice {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Devices")
	}

	var r0 []virtio.VirtioDevice
	if rf, ok := ret.Get(0).(func() []virtio.VirtioDevice); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]virtio.VirtioDevice)
		}
	}

	return r0
}

// MockVirtualMachine_Devices_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Devices'
type MockVirtualMachine_Devices_Call struct {
	*mock.Call
}

// Devices is a helper method to define mock.On call
func (_e *MockVirtualMachine_Expecter) Devices() *MockVirtualMachine_Devices_Call {
	return &MockVirtualMachine_Devices_Call{Call: _e.mock.On("Devices")}
}

func (_c *MockVirtualMachine_Devices_Call) Run(run func()) *MockVirtualMachine_Devices_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockVirtualMachine_Devices_Call) Return(_a0 []virtio.VirtioDevice) *MockVirtualMachine_Devices_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockVirtualMachine_Devices_Call) RunAndReturn(run func() []virtio.VirtioDevice) *MockVirtualMachine_Devices_Call {
	_c.Call.Return(run)
	return _c
}

// GetMemoryBalloonTargetSize provides a mock function with given fields: ctx
func (_m *MockVirtualMachine) GetMemoryBalloonTargetSize(ctx context.Context) (strongunits.B, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetMemoryBalloonTargetSize")
	}

	var r0 strongunits.B
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (strongunits.B, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) strongunits.B); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(strongunits.B)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockVirtualMachine_GetMemoryBalloonTargetSize_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMemoryBalloonTargetSize'
type MockVirtualMachine_GetMemoryBalloonTargetSize_Call struct {
	*mock.Call
}

// GetMemoryBalloonTargetSize is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockVirtualMachine_Expecter) GetMemoryBalloonTargetSize(ctx interface{}) *MockVirtualMachine_GetMemoryBalloonTargetSize_Call {
	return &MockVirtualMachine_GetMemoryBalloonTargetSize_Call{Call: _e.mock.On("GetMemoryBalloonTargetSize", ctx)}
}

func (_c *MockVirtualMachine_GetMemoryBalloonTargetSize_Call) Run(run func(ctx context.Context)) *MockVirtualMachine_GetMemoryBalloonTargetSize_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockVirtualMachine_GetMemoryBalloonTargetSize_Call) Return(_a0 strongunits.B, _a1 error) *MockVirtualMachine_GetMemoryBalloonTargetSize_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockVirtualMachine_GetMemoryBalloonTargetSize_Call) RunAndReturn(run func(context.Context) (strongunits.B, error)) *MockVirtualMachine_GetMemoryBalloonTargetSize_Call {
	_c.Call.Return(run)
	return _c
}

// HardStop provides a mock function with given fields: ctx
func (_m *MockVirtualMachine) HardStop(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for HardStop")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockVirtualMachine_HardStop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HardStop'
type MockVirtualMachine_HardStop_Call struct {
	*mock.Call
}

// HardStop is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockVirtualMachine_Expecter) HardStop(ctx interface{}) *MockVirtualMachine_HardStop_Call {
	return &MockVirtualMachine_HardStop_Call{Call: _e.mock.On("HardStop", ctx)}
}

func (_c *MockVirtualMachine_HardStop_Call) Run(run func(ctx context.Context)) *MockVirtualMachine_HardStop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockVirtualMachine_HardStop_Call) Return(_a0 error) *MockVirtualMachine_HardStop_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockVirtualMachine_HardStop_Call) RunAndReturn(run func(context.Context) error) *MockVirtualMachine_HardStop_Call {
	_c.Call.Return(run)
	return _c
}

// ID provides a mock function with no fields
func (_m *MockVirtualMachine) ID() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ID")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockVirtualMachine_ID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ID'
type MockVirtualMachine_ID_Call struct {
	*mock.Call
}

// ID is a helper method to define mock.On call
func (_e *MockVirtualMachine_Expecter) ID() *MockVirtualMachine_ID_Call {
	return &MockVirtualMachine_ID_Call{Call: _e.mock.On("ID")}
}

func (_c *MockVirtualMachine_ID_Call) Run(run func()) *MockVirtualMachine_ID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockVirtualMachine_ID_Call) Return(_a0 string) *MockVirtualMachine_ID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockVirtualMachine_ID_Call) RunAndReturn(run func() string) *MockVirtualMachine_ID_Call {
	_c.Call.Return(run)
	return _c
}

// Opts provides a mock function with no fields
func (_m *MockVirtualMachine) Opts() *vmm.NewVMOptions {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Opts")
	}

	var r0 *vmm.NewVMOptions
	if rf, ok := ret.Get(0).(func() *vmm.NewVMOptions); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*vmm.NewVMOptions)
		}
	}

	return r0
}

// MockVirtualMachine_Opts_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Opts'
type MockVirtualMachine_Opts_Call struct {
	*mock.Call
}

// Opts is a helper method to define mock.On call
func (_e *MockVirtualMachine_Expecter) Opts() *MockVirtualMachine_Opts_Call {
	return &MockVirtualMachine_Opts_Call{Call: _e.mock.On("Opts")}
}

func (_c *MockVirtualMachine_Opts_Call) Run(run func()) *MockVirtualMachine_Opts_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockVirtualMachine_Opts_Call) Return(_a0 *vmm.NewVMOptions) *MockVirtualMachine_Opts_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockVirtualMachine_Opts_Call) RunAndReturn(run func() *vmm.NewVMOptions) *MockVirtualMachine_Opts_Call {
	_c.Call.Return(run)
	return _c
}

// Pause provides a mock function with given fields: ctx
func (_m *MockVirtualMachine) Pause(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Pause")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockVirtualMachine_Pause_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Pause'
type MockVirtualMachine_Pause_Call struct {
	*mock.Call
}

// Pause is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockVirtualMachine_Expecter) Pause(ctx interface{}) *MockVirtualMachine_Pause_Call {
	return &MockVirtualMachine_Pause_Call{Call: _e.mock.On("Pause", ctx)}
}

func (_c *MockVirtualMachine_Pause_Call) Run(run func(ctx context.Context)) *MockVirtualMachine_Pause_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockVirtualMachine_Pause_Call) Return(_a0 error) *MockVirtualMachine_Pause_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockVirtualMachine_Pause_Call) RunAndReturn(run func(context.Context) error) *MockVirtualMachine_Pause_Call {
	_c.Call.Return(run)
	return _c
}

// RequestStop provides a mock function with given fields: ctx
func (_m *MockVirtualMachine) RequestStop(ctx context.Context) (bool, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for RequestStop")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (bool, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) bool); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockVirtualMachine_RequestStop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RequestStop'
type MockVirtualMachine_RequestStop_Call struct {
	*mock.Call
}

// RequestStop is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockVirtualMachine_Expecter) RequestStop(ctx interface{}) *MockVirtualMachine_RequestStop_Call {
	return &MockVirtualMachine_RequestStop_Call{Call: _e.mock.On("RequestStop", ctx)}
}

func (_c *MockVirtualMachine_RequestStop_Call) Run(run func(ctx context.Context)) *MockVirtualMachine_RequestStop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockVirtualMachine_RequestStop_Call) Return(_a0 bool, _a1 error) *MockVirtualMachine_RequestStop_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockVirtualMachine_RequestStop_Call) RunAndReturn(run func(context.Context) (bool, error)) *MockVirtualMachine_RequestStop_Call {
	_c.Call.Return(run)
	return _c
}

// RestoreFromFullSnapshot provides a mock function with given fields: ctx, path
func (_m *MockVirtualMachine) RestoreFromFullSnapshot(ctx context.Context, path string) error {
	ret := _m.Called(ctx, path)

	if len(ret) == 0 {
		panic("no return value specified for RestoreFromFullSnapshot")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, path)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockVirtualMachine_RestoreFromFullSnapshot_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RestoreFromFullSnapshot'
type MockVirtualMachine_RestoreFromFullSnapshot_Call struct {
	*mock.Call
}

// RestoreFromFullSnapshot is a helper method to define mock.On call
//   - ctx context.Context
//   - path string
func (_e *MockVirtualMachine_Expecter) RestoreFromFullSnapshot(ctx interface{}, path interface{}) *MockVirtualMachine_RestoreFromFullSnapshot_Call {
	return &MockVirtualMachine_RestoreFromFullSnapshot_Call{Call: _e.mock.On("RestoreFromFullSnapshot", ctx, path)}
}

func (_c *MockVirtualMachine_RestoreFromFullSnapshot_Call) Run(run func(ctx context.Context, path string)) *MockVirtualMachine_RestoreFromFullSnapshot_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockVirtualMachine_RestoreFromFullSnapshot_Call) Return(_a0 error) *MockVirtualMachine_RestoreFromFullSnapshot_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockVirtualMachine_RestoreFromFullSnapshot_Call) RunAndReturn(run func(context.Context, string) error) *MockVirtualMachine_RestoreFromFullSnapshot_Call {
	_c.Call.Return(run)
	return _c
}

// Resume provides a mock function with given fields: ctx
func (_m *MockVirtualMachine) Resume(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Resume")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockVirtualMachine_Resume_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Resume'
type MockVirtualMachine_Resume_Call struct {
	*mock.Call
}

// Resume is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockVirtualMachine_Expecter) Resume(ctx interface{}) *MockVirtualMachine_Resume_Call {
	return &MockVirtualMachine_Resume_Call{Call: _e.mock.On("Resume", ctx)}
}

func (_c *MockVirtualMachine_Resume_Call) Run(run func(ctx context.Context)) *MockVirtualMachine_Resume_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockVirtualMachine_Resume_Call) Return(_a0 error) *MockVirtualMachine_Resume_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockVirtualMachine_Resume_Call) RunAndReturn(run func(context.Context) error) *MockVirtualMachine_Resume_Call {
	_c.Call.Return(run)
	return _c
}

// SaveFullSnapshot provides a mock function with given fields: ctx, path
func (_m *MockVirtualMachine) SaveFullSnapshot(ctx context.Context, path string) error {
	ret := _m.Called(ctx, path)

	if len(ret) == 0 {
		panic("no return value specified for SaveFullSnapshot")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, path)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockVirtualMachine_SaveFullSnapshot_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveFullSnapshot'
type MockVirtualMachine_SaveFullSnapshot_Call struct {
	*mock.Call
}

// SaveFullSnapshot is a helper method to define mock.On call
//   - ctx context.Context
//   - path string
func (_e *MockVirtualMachine_Expecter) SaveFullSnapshot(ctx interface{}, path interface{}) *MockVirtualMachine_SaveFullSnapshot_Call {
	return &MockVirtualMachine_SaveFullSnapshot_Call{Call: _e.mock.On("SaveFullSnapshot", ctx, path)}
}

func (_c *MockVirtualMachine_SaveFullSnapshot_Call) Run(run func(ctx context.Context, path string)) *MockVirtualMachine_SaveFullSnapshot_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockVirtualMachine_SaveFullSnapshot_Call) Return(_a0 error) *MockVirtualMachine_SaveFullSnapshot_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockVirtualMachine_SaveFullSnapshot_Call) RunAndReturn(run func(context.Context, string) error) *MockVirtualMachine_SaveFullSnapshot_Call {
	_c.Call.Return(run)
	return _c
}

// ServeBackgroundTasks provides a mock function with given fields: ctx
func (_m *MockVirtualMachine) ServeBackgroundTasks(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ServeBackgroundTasks")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockVirtualMachine_ServeBackgroundTasks_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ServeBackgroundTasks'
type MockVirtualMachine_ServeBackgroundTasks_Call struct {
	*mock.Call
}

// ServeBackgroundTasks is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockVirtualMachine_Expecter) ServeBackgroundTasks(ctx interface{}) *MockVirtualMachine_ServeBackgroundTasks_Call {
	return &MockVirtualMachine_ServeBackgroundTasks_Call{Call: _e.mock.On("ServeBackgroundTasks", ctx)}
}

func (_c *MockVirtualMachine_ServeBackgroundTasks_Call) Run(run func(ctx context.Context)) *MockVirtualMachine_ServeBackgroundTasks_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockVirtualMachine_ServeBackgroundTasks_Call) Return(_a0 error) *MockVirtualMachine_ServeBackgroundTasks_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockVirtualMachine_ServeBackgroundTasks_Call) RunAndReturn(run func(context.Context) error) *MockVirtualMachine_ServeBackgroundTasks_Call {
	_c.Call.Return(run)
	return _c
}

// SetMemoryBalloonTargetSize provides a mock function with given fields: ctx, targetBytes
func (_m *MockVirtualMachine) SetMemoryBalloonTargetSize(ctx context.Context, targetBytes strongunits.B) error {
	ret := _m.Called(ctx, targetBytes)

	if len(ret) == 0 {
		panic("no return value specified for SetMemoryBalloonTargetSize")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, strongunits.B) error); ok {
		r0 = rf(ctx, targetBytes)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockVirtualMachine_SetMemoryBalloonTargetSize_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetMemoryBalloonTargetSize'
type MockVirtualMachine_SetMemoryBalloonTargetSize_Call struct {
	*mock.Call
}

// SetMemoryBalloonTargetSize is a helper method to define mock.On call
//   - ctx context.Context
//   - targetBytes strongunits.B
func (_e *MockVirtualMachine_Expecter) SetMemoryBalloonTargetSize(ctx interface{}, targetBytes interface{}) *MockVirtualMachine_SetMemoryBalloonTargetSize_Call {
	return &MockVirtualMachine_SetMemoryBalloonTargetSize_Call{Call: _e.mock.On("SetMemoryBalloonTargetSize", ctx, targetBytes)}
}

func (_c *MockVirtualMachine_SetMemoryBalloonTargetSize_Call) Run(run func(ctx context.Context, targetBytes strongunits.B)) *MockVirtualMachine_SetMemoryBalloonTargetSize_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(strongunits.B))
	})
	return _c
}

func (_c *MockVirtualMachine_SetMemoryBalloonTargetSize_Call) Return(_a0 error) *MockVirtualMachine_SetMemoryBalloonTargetSize_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockVirtualMachine_SetMemoryBalloonTargetSize_Call) RunAndReturn(run func(context.Context, strongunits.B) error) *MockVirtualMachine_SetMemoryBalloonTargetSize_Call {
	_c.Call.Return(run)
	return _c
}

// Start provides a mock function with given fields: ctx
func (_m *MockVirtualMachine) Start(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Start")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockVirtualMachine_Start_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Start'
type MockVirtualMachine_Start_Call struct {
	*mock.Call
}

// Start is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockVirtualMachine_Expecter) Start(ctx interface{}) *MockVirtualMachine_Start_Call {
	return &MockVirtualMachine_Start_Call{Call: _e.mock.On("Start", ctx)}
}

func (_c *MockVirtualMachine_Start_Call) Run(run func(ctx context.Context)) *MockVirtualMachine_Start_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockVirtualMachine_Start_Call) Return(_a0 error) *MockVirtualMachine_Start_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockVirtualMachine_Start_Call) RunAndReturn(run func(context.Context) error) *MockVirtualMachine_Start_Call {
	_c.Call.Return(run)
	return _c
}

// StartGraphicApplication provides a mock function with given fields: width, height
func (_m *MockVirtualMachine) StartGraphicApplication(width float64, height float64) error {
	ret := _m.Called(width, height)

	if len(ret) == 0 {
		panic("no return value specified for StartGraphicApplication")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(float64, float64) error); ok {
		r0 = rf(width, height)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockVirtualMachine_StartGraphicApplication_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StartGraphicApplication'
type MockVirtualMachine_StartGraphicApplication_Call struct {
	*mock.Call
}

// StartGraphicApplication is a helper method to define mock.On call
//   - width float64
//   - height float64
func (_e *MockVirtualMachine_Expecter) StartGraphicApplication(width interface{}, height interface{}) *MockVirtualMachine_StartGraphicApplication_Call {
	return &MockVirtualMachine_StartGraphicApplication_Call{Call: _e.mock.On("StartGraphicApplication", width, height)}
}

func (_c *MockVirtualMachine_StartGraphicApplication_Call) Run(run func(width float64, height float64)) *MockVirtualMachine_StartGraphicApplication_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(float64), args[1].(float64))
	})
	return _c
}

func (_c *MockVirtualMachine_StartGraphicApplication_Call) Return(_a0 error) *MockVirtualMachine_StartGraphicApplication_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockVirtualMachine_StartGraphicApplication_Call) RunAndReturn(run func(float64, float64) error) *MockVirtualMachine_StartGraphicApplication_Call {
	_c.Call.Return(run)
	return _c
}

// StateChangeNotify provides a mock function with given fields: ctx
func (_m *MockVirtualMachine) StateChangeNotify(ctx context.Context) <-chan vmm.VirtualMachineStateChange {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for StateChangeNotify")
	}

	var r0 <-chan vmm.VirtualMachineStateChange
	if rf, ok := ret.Get(0).(func(context.Context) <-chan vmm.VirtualMachineStateChange); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan vmm.VirtualMachineStateChange)
		}
	}

	return r0
}

// MockVirtualMachine_StateChangeNotify_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StateChangeNotify'
type MockVirtualMachine_StateChangeNotify_Call struct {
	*mock.Call
}

// StateChangeNotify is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockVirtualMachine_Expecter) StateChangeNotify(ctx interface{}) *MockVirtualMachine_StateChangeNotify_Call {
	return &MockVirtualMachine_StateChangeNotify_Call{Call: _e.mock.On("StateChangeNotify", ctx)}
}

func (_c *MockVirtualMachine_StateChangeNotify_Call) Run(run func(ctx context.Context)) *MockVirtualMachine_StateChangeNotify_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockVirtualMachine_StateChangeNotify_Call) Return(_a0 <-chan vmm.VirtualMachineStateChange) *MockVirtualMachine_StateChangeNotify_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockVirtualMachine_StateChangeNotify_Call) RunAndReturn(run func(context.Context) <-chan vmm.VirtualMachineStateChange) *MockVirtualMachine_StateChangeNotify_Call {
	_c.Call.Return(run)
	return _c
}

// VSockConnect provides a mock function with given fields: ctx, port
func (_m *MockVirtualMachine) VSockConnect(ctx context.Context, port uint32) (net.Conn, error) {
	ret := _m.Called(ctx, port)

	if len(ret) == 0 {
		panic("no return value specified for VSockConnect")
	}

	var r0 net.Conn
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint32) (net.Conn, error)); ok {
		return rf(ctx, port)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint32) net.Conn); ok {
		r0 = rf(ctx, port)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(net.Conn)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint32) error); ok {
		r1 = rf(ctx, port)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockVirtualMachine_VSockConnect_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'VSockConnect'
type MockVirtualMachine_VSockConnect_Call struct {
	*mock.Call
}

// VSockConnect is a helper method to define mock.On call
//   - ctx context.Context
//   - port uint32
func (_e *MockVirtualMachine_Expecter) VSockConnect(ctx interface{}, port interface{}) *MockVirtualMachine_VSockConnect_Call {
	return &MockVirtualMachine_VSockConnect_Call{Call: _e.mock.On("VSockConnect", ctx, port)}
}

func (_c *MockVirtualMachine_VSockConnect_Call) Run(run func(ctx context.Context, port uint32)) *MockVirtualMachine_VSockConnect_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint32))
	})
	return _c
}

func (_c *MockVirtualMachine_VSockConnect_Call) Return(_a0 net.Conn, _a1 error) *MockVirtualMachine_VSockConnect_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockVirtualMachine_VSockConnect_Call) RunAndReturn(run func(context.Context, uint32) (net.Conn, error)) *MockVirtualMachine_VSockConnect_Call {
	_c.Call.Return(run)
	return _c
}

// VSockListen provides a mock function with given fields: ctx, port
func (_m *MockVirtualMachine) VSockListen(ctx context.Context, port uint32) (net.Listener, error) {
	ret := _m.Called(ctx, port)

	if len(ret) == 0 {
		panic("no return value specified for VSockListen")
	}

	var r0 net.Listener
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint32) (net.Listener, error)); ok {
		return rf(ctx, port)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint32) net.Listener); ok {
		r0 = rf(ctx, port)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(net.Listener)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint32) error); ok {
		r1 = rf(ctx, port)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockVirtualMachine_VSockListen_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'VSockListen'
type MockVirtualMachine_VSockListen_Call struct {
	*mock.Call
}

// VSockListen is a helper method to define mock.On call
//   - ctx context.Context
//   - port uint32
func (_e *MockVirtualMachine_Expecter) VSockListen(ctx interface{}, port interface{}) *MockVirtualMachine_VSockListen_Call {
	return &MockVirtualMachine_VSockListen_Call{Call: _e.mock.On("VSockListen", ctx, port)}
}

func (_c *MockVirtualMachine_VSockListen_Call) Run(run func(ctx context.Context, port uint32)) *MockVirtualMachine_VSockListen_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint32))
	})
	return _c
}

func (_c *MockVirtualMachine_VSockListen_Call) Return(_a0 net.Listener, _a1 error) *MockVirtualMachine_VSockListen_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockVirtualMachine_VSockListen_Call) RunAndReturn(run func(context.Context, uint32) (net.Listener, error)) *MockVirtualMachine_VSockListen_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockVirtualMachine creates a new instance of MockVirtualMachine. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockVirtualMachine(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockVirtualMachine {
	mock := &MockVirtualMachine{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
