// Code generated by go-swagger; DO NOT EDIT.

package restapi

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
)

var (
	// SwaggerJSON embedded version of the swagger document used at generation time
	SwaggerJSON json.RawMessage
	// FlatSwaggerJSON embedded flattened version of the swagger document used at generation time
	FlatSwaggerJSON json.RawMessage
)

func init() {
	SwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "description": "RESTful public-facing API. The API is accessible through HTTP calls on specific URLs carrying JSON modeled data. The transport medium is a Unix Domain Socket.",
    "title": "Firecracker API",
    "contact": {
      "email": "firecracker-maintainers@amazon.com"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "version": "1.13.0-dev"
  },
  "host": "localhost",
  "basePath": "/",
  "paths": {
    "/": {
      "get": {
        "summary": "Returns general information about an instance.",
        "operationId": "describeInstance",
        "responses": {
          "200": {
            "description": "The instance information",
            "schema": {
              "$ref": "#/definitions/InstanceInfo"
            }
          },
          "default": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/actions": {
      "put": {
        "summary": "Creates a synchronous action.",
        "operationId": "createSyncAction",
        "parameters": [
          {
            "name": "info",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/InstanceActionInfo"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The update was successful"
          },
          "400": {
            "description": "The action cannot be executed due to bad input",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/balloon": {
      "get": {
        "summary": "Returns the current balloon device configuration.",
        "operationId": "describeBalloonConfig",
        "responses": {
          "200": {
            "description": "The balloon device configuration",
            "schema": {
              "$ref": "#/definitions/Balloon"
            }
          },
          "400": {
            "description": "Balloon device not configured.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "description": "Creates a new balloon device if one does not already exist, otherwise updates it, before machine startup. This will fail after machine startup. Will fail if update is not possible.",
        "summary": "Creates or updates a balloon device.",
        "operationId": "putBalloon",
        "parameters": [
          {
            "description": "Balloon properties",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Balloon"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Balloon device created/updated"
          },
          "400": {
            "description": "Balloon device cannot be created/updated due to bad input",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "patch": {
        "description": "Updates an existing balloon device, before or after machine startup. Will fail if update is not possible.",
        "summary": "Updates a balloon device.",
        "operationId": "patchBalloon",
        "parameters": [
          {
            "description": "Balloon properties",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BalloonUpdate"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Balloon device updated"
          },
          "400": {
            "description": "Balloon device cannot be updated due to bad input",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/balloon/statistics": {
      "get": {
        "summary": "Returns the latest balloon device statistics, only if enabled pre-boot.",
        "operationId": "describeBalloonStats",
        "responses": {
          "200": {
            "description": "The balloon device statistics",
            "schema": {
              "$ref": "#/definitions/BalloonStats"
            }
          },
          "400": {
            "description": "The balloon device statistics were not enabled when the device was configured.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "patch": {
        "description": "Updates an existing balloon device statistics interval, before or after machine startup. Will fail if update is not possible.",
        "summary": "Updates a balloon device statistics polling interval.",
        "operationId": "patchBalloonStatsInterval",
        "parameters": [
          {
            "description": "Balloon properties",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BalloonStatsUpdate"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Balloon statistics interval updated"
          },
          "400": {
            "description": "Balloon statistics interval cannot be updated due to bad input",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/boot-source": {
      "put": {
        "description": "Creates new boot source if one does not already exist, otherwise updates it. Will fail if update is not possible.",
        "summary": "Creates or updates the boot source. Pre-boot only.",
        "operationId": "putGuestBootSource",
        "parameters": [
          {
            "description": "Guest boot source properties",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BootSource"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Boot source created/updated"
          },
          "400": {
            "description": "Boot source cannot be created due to bad input",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/cpu-config": {
      "put": {
        "description": "Provides configuration to the Firecracker process to specify vCPU resource configuration prior to launching the guest machine.",
        "summary": "Configures CPU features flags for the vCPUs of the guest VM. Pre-boot only.",
        "operationId": "putCpuConfiguration",
        "parameters": [
          {
            "description": "CPU configuration request",
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/CpuConfig"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "CPU configuration set successfully"
          },
          "400": {
            "description": "CPU configuration cannot be updated due to invalid input format",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/drives/{drive_id}": {
      "put": {
        "description": "Creates new drive with ID specified by drive_id path parameter. If a drive with the specified ID already exists, updates its state based on new input. Will fail if update is not possible.",
        "summary": "Creates or updates a drive. Pre-boot only.",
        "operationId": "putGuestDriveByID",
        "parameters": [
          {
            "type": "string",
            "description": "The id of the guest drive",
            "name": "drive_id",
            "in": "path",
            "required": true
          },
          {
            "description": "Guest drive properties",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Drive"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Drive created/updated"
          },
          "400": {
            "description": "Drive cannot be created/updated due to bad input",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "patch": {
        "description": "Updates the properties of the drive with the ID specified by drive_id path parameter. Will fail if update is not possible.",
        "summary": "Updates the properties of a drive. Post-boot only.",
        "operationId": "patchGuestDriveByID",
        "parameters": [
          {
            "type": "string",
            "description": "The id of the guest drive",
            "name": "drive_id",
            "in": "path",
            "required": true
          },
          {
            "description": "Guest drive properties",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PartialDrive"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Drive updated"
          },
          "400": {
            "description": "Drive cannot be updated due to bad input",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/entropy": {
      "put": {
        "description": "Enables an entropy device that provides high-quality random data to the guest.",
        "summary": "Creates an entropy device. Pre-boot only.",
        "operationId": "putEntropyDevice",
        "parameters": [
          {
            "description": "Guest entropy device properties",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/EntropyDevice"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Entropy device created"
          },
          "default": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/logger": {
      "put": {
        "summary": "Initializes the logger by specifying a named pipe or a file for the logs output.",
        "operationId": "putLogger",
        "parameters": [
          {
            "description": "Logging system description",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Logger"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Logger created."
          },
          "400": {
            "description": "Logger cannot be initialized due to bad input.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/machine-config": {
      "get": {
        "description": "Gets the machine configuration of the VM. When called before the PUT operation, it will return the default values for the vCPU count (=1), memory size (=128 MiB). By default SMT is disabled and there is no CPU Template.",
        "summary": "Gets the machine configuration of the VM.",
        "operationId": "getMachineConfiguration",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MachineConfiguration"
            }
          },
          "default": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "description": "Updates the Virtual Machine Configuration with the specified input. Firecracker starts with default values for vCPU count (=1) and memory size (=128 MiB). The vCPU count is restricted to the [1, 32] range. With SMT enabled, the vCPU count is required to be either 1 or an even number in the range. otherwise there are no restrictions regarding the vCPU count. If 2M hugetlbfs pages are specified, then ` + "`" + `mem_size_mib` + "`" + ` must be a multiple of 2. If any of the parameters has an incorrect value, the whole update fails. All parameters that are optional and are not specified are set to their default values (smt = false, track_dirty_pages = false, cpu_template = None, huge_pages = None).",
        "summary": "Updates the Machine Configuration of the VM. Pre-boot only.",
        "operationId": "putMachineConfiguration",
        "parameters": [
          {
            "description": "Machine Configuration Parameters",
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/MachineConfiguration"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Machine Configuration created/updated"
          },
          "400": {
            "description": "Machine Configuration cannot be updated due to bad input",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "patch": {
        "description": "Partially updates the Virtual Machine Configuration with the specified input. If any of the parameters has an incorrect value, the whole update fails.",
        "summary": "Partially updates the Machine Configuration of the VM. Pre-boot only.",
        "operationId": "patchMachineConfiguration",
        "parameters": [
          {
            "description": "A subset of Machine Configuration Parameters",
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/MachineConfiguration"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Machine Configuration created/updated"
          },
          "400": {
            "description": "Machine Configuration cannot be updated due to bad input",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/metrics": {
      "put": {
        "summary": "Initializes the metrics system by specifying a named pipe or a file for the metrics output.",
        "operationId": "putMetrics",
        "parameters": [
          {
            "description": "Metrics system description",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Metrics"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Metrics system created."
          },
          "400": {
            "description": "Metrics system cannot be initialized due to bad input request or metrics system already initialized.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/mmds": {
      "get": {
        "summary": "Get the MMDS data store.",
        "operationId": "getMmds",
        "responses": {
          "200": {
            "description": "The MMDS data store JSON.",
            "schema": {
              "type": "object"
            }
          },
          "404": {
            "description": "The MMDS data store content can not be found.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "summary": "Creates a MMDS (Microvm Metadata Service) data store.",
        "operationId": "putMmds",
        "parameters": [
          {
            "description": "The MMDS data store as JSON.",
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/MmdsContentsObject"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "MMDS data store created/updated."
          },
          "400": {
            "description": "MMDS data store cannot be created due to bad input.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "patch": {
        "summary": "Updates the MMDS data store.",
        "operationId": "patchMmds",
        "parameters": [
          {
            "description": "The MMDS data store patch JSON.",
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/MmdsContentsObject"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "MMDS data store updated."
          },
          "400": {
            "description": "MMDS data store cannot be updated due to bad input.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/mmds/config": {
      "put": {
        "description": "Configures MMDS version, IPv4 address used by the MMDS network stack and interfaces that allow MMDS requests.",
        "summary": "Set MMDS configuration. Pre-boot only.",
        "operationId": "putMmdsConfig",
        "parameters": [
          {
            "description": "The MMDS configuration as JSON.",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MmdsConfig"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "MMDS configuration was created/updated."
          },
          "400": {
            "description": "MMDS configuration cannot be updated due to bad input.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/network-interfaces/{iface_id}": {
      "put": {
        "description": "Creates new network interface with ID specified by iface_id path parameter.",
        "summary": "Creates a network interface. Pre-boot only.",
        "operationId": "putGuestNetworkInterfaceByID",
        "parameters": [
          {
            "type": "string",
            "description": "The id of the guest network interface",
            "name": "iface_id",
            "in": "path",
            "required": true
          },
          {
            "description": "Guest network interface properties",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/NetworkInterface"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Network interface created/updated"
          },
          "400": {
            "description": "Network interface cannot be created due to bad input",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "patch": {
        "description": "Updates the rate limiters applied to a network interface.",
        "summary": "Updates the rate limiters applied to a network interface. Post-boot only.",
        "operationId": "patchGuestNetworkInterfaceByID",
        "parameters": [
          {
            "type": "string",
            "description": "The id of the guest network interface",
            "name": "iface_id",
            "in": "path",
            "required": true
          },
          {
            "description": "A subset of the guest network interface properties",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PartialNetworkInterface"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Network interface updated"
          },
          "400": {
            "description": "Network interface cannot be updated due to bad input",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/snapshot/create": {
      "put": {
        "description": "Creates a snapshot of the microVM state. The microVM should be in the ` + "`" + `Paused` + "`" + ` state.",
        "summary": "Creates a full or diff snapshot. Post-boot only.",
        "operationId": "createSnapshot",
        "parameters": [
          {
            "description": "The configuration used for creating a snaphot.",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SnapshotCreateParams"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Snapshot created"
          },
          "400": {
            "description": "Snapshot cannot be created due to bad input",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/snapshot/load": {
      "put": {
        "description": "Loads the microVM state from a snapshot. Only accepted on a fresh Firecracker process (before configuring any resource other than the Logger and Metrics).",
        "summary": "Loads a snapshot. Pre-boot only.",
        "operationId": "loadSnapshot",
        "parameters": [
          {
            "description": "The configuration used for loading a snaphot.",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SnapshotLoadParams"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Snapshot loaded"
          },
          "400": {
            "description": "Snapshot cannot be loaded due to bad input",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/version": {
      "get": {
        "summary": "Gets the Firecracker version.",
        "operationId": "getFirecrackerVersion",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/FirecrackerVersion"
            }
          },
          "default": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/vm": {
      "patch": {
        "description": "Sets the desired state (Paused or Resumed) for the microVM.",
        "summary": "Updates the microVM state.",
        "operationId": "patchVm",
        "parameters": [
          {
            "description": "The microVM state",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Vm"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Vm state updated"
          },
          "400": {
            "description": "Vm state cannot be updated due to bad input",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/vm/config": {
      "get": {
        "description": "Gets configuration for all VM resources. If the VM is restored from a snapshot, the boot-source, machine-config.smt and machine-config.cpu_template will be empty.",
        "summary": "Gets the full VM configuration.",
        "operationId": "getExportVmConfig",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/FullVmConfiguration"
            }
          },
          "default": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/vsock": {
      "put": {
        "description": "The first call creates the device with the configuration specified in body. Subsequent calls will update the device configuration. May fail if update is not possible.",
        "summary": "Creates/updates a vsock device. Pre-boot only.",
        "operationId": "putGuestVsock",
        "parameters": [
          {
            "description": "Guest vsock properties",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Vsock"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Vsock created/updated"
          },
          "400": {
            "description": "Vsock cannot be created due to bad input",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "Balloon": {
      "description": "Balloon device descriptor.",
      "type": "object",
      "required": [
        "amount_mib",
        "deflate_on_oom"
      ],
      "properties": {
        "amount_mib": {
          "description": "Target balloon size in MiB.",
          "type": "integer"
        },
        "deflate_on_oom": {
          "description": "Whether the balloon should deflate when the guest has memory pressure.",
          "type": "boolean"
        },
        "stats_polling_interval_s": {
          "description": "Interval in seconds between refreshing statistics. A non-zero value will enable the statistics. Defaults to 0.",
          "type": "integer"
        }
      }
    },
    "BalloonStats": {
      "description": "Describes the balloon device statistics.",
      "type": "object",
      "required": [
        "target_pages",
        "actual_pages",
        "target_mib",
        "actual_mib"
      ],
      "properties": {
        "actual_mib": {
          "description": "Actual amount of memory (in MiB) the device is holding.",
          "type": "integer"
        },
        "actual_pages": {
          "description": "Actual number of pages the device is holding.",
          "type": "integer"
        },
        "available_memory": {
          "description": "An estimate of how much memory is available (in bytes) for starting new applications, without pushing the system to swap.",
          "type": "integer",
          "format": "int64"
        },
        "disk_caches": {
          "description": "The amount of memory, in bytes, that can be quickly reclaimed without additional I/O. Typically these pages are used for caching files from disk.",
          "type": "integer",
          "format": "int64"
        },
        "free_memory": {
          "description": "The amount of memory not being used for any purpose (in bytes).",
          "type": "integer",
          "format": "int64"
        },
        "hugetlb_allocations": {
          "description": "The number of successful hugetlb page allocations in the guest.",
          "type": "integer",
          "format": "int64"
        },
        "hugetlb_failures": {
          "description": "The number of failed hugetlb page allocations in the guest.",
          "type": "integer",
          "format": "int64"
        },
        "major_faults": {
          "description": "The number of major page faults that have occurred.",
          "type": "integer",
          "format": "int64"
        },
        "minor_faults": {
          "description": "The number of minor page faults that have occurred.",
          "type": "integer",
          "format": "int64"
        },
        "swap_in": {
          "description": "The amount of memory that has been swapped in (in bytes).",
          "type": "integer",
          "format": "int64"
        },
        "swap_out": {
          "description": "The amount of memory that has been swapped out to disk (in bytes).",
          "type": "integer",
          "format": "int64"
        },
        "target_mib": {
          "description": "Target amount of memory (in MiB) the device aims to hold.",
          "type": "integer"
        },
        "target_pages": {
          "description": "Target number of pages the device aims to hold.",
          "type": "integer"
        },
        "total_memory": {
          "description": "The total amount of memory available (in bytes).",
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "BalloonStatsUpdate": {
      "description": "Update the statistics polling interval, with the first statistics update scheduled immediately. Statistics cannot be turned on/off after boot.",
      "type": "object",
      "required": [
        "stats_polling_interval_s"
      ],
      "properties": {
        "stats_polling_interval_s": {
          "description": "Interval in seconds between refreshing statistics.",
          "type": "integer"
        }
      }
    },
    "BalloonUpdate": {
      "description": "Balloon device descriptor.",
      "type": "object",
      "required": [
        "amount_mib"
      ],
      "properties": {
        "amount_mib": {
          "description": "Target balloon size in MiB.",
          "type": "integer"
        }
      }
    },
    "BootSource": {
      "description": "Boot source descriptor.",
      "type": "object",
      "required": [
        "kernel_image_path"
      ],
      "properties": {
        "boot_args": {
          "description": "Kernel boot arguments",
          "type": "string"
        },
        "initrd_path": {
          "description": "Host level path to the initrd image used to boot the guest",
          "type": "string"
        },
        "kernel_image_path": {
          "description": "Host level path to the kernel image used to boot the guest",
          "type": "string"
        }
      }
    },
    "CpuConfig": {
      "description": "The CPU configuration template defines a set of bit maps as modifiers of flags accessed by register to be disabled/enabled for the microvm.",
      "type": "object",
      "properties": {
        "cpuid_modifiers": {
          "description": "A collection of CPUIDs to be modified. (x86_64)",
          "type": "object"
        },
        "kvm_capabilities": {
          "description": "A collection of kvm capabilities to be modified. (aarch64)",
          "type": "object"
        },
        "msr_modifiers": {
          "description": "A collection of model specific registers to be modified. (x86_64)",
          "type": "object"
        },
        "reg_modifiers": {
          "description": "A collection of registers to be modified. (aarch64)",
          "type": "object"
        },
        "vcpu_features": {
          "description": "A collection of vcpu features to be modified. (aarch64)",
          "type": "object"
        }
      }
    },
    "CpuTemplate": {
      "description": "The CPU Template defines a set of flags to be disabled from the microvm so that the features exposed to the guest are the same as in the selected instance type. This parameter has been deprecated and it will be removed in future Firecracker release.",
      "type": "string",
      "default": "None",
      "enum": [
        "C3",
        "T2",
        "T2S",
        "T2CL",
        "T2A",
        "V1N1",
        "None"
      ]
    },
    "Drive": {
      "type": "object",
      "required": [
        "drive_id",
        "is_root_device"
      ],
      "properties": {
        "cache_type": {
          "description": "Represents the caching strategy for the block device.",
          "type": "string",
          "default": "Unsafe",
          "enum": [
            "Unsafe",
            "Writeback"
          ]
        },
        "drive_id": {
          "type": "string"
        },
        "io_engine": {
          "description": "Type of the IO engine used by the device. \"Async\" is supported on host kernels newer than 5.10.51. This field is optional for virtio-block config and should be omitted for vhost-user-block configuration.",
          "type": "string",
          "default": "Sync",
          "enum": [
            "Sync",
            "Async"
          ]
        },
        "is_read_only": {
          "description": "Is block read only. This field is required for virtio-block config and should be omitted for vhost-user-block configuration.",
          "type": "boolean"
        },
        "is_root_device": {
          "type": "boolean"
        },
        "partuuid": {
          "description": "Represents the unique id of the boot partition of this device. It is optional and it will be taken into account only if the is_root_device field is true.",
          "type": "string"
        },
        "path_on_host": {
          "description": "Host level path for the guest drive. This field is required for virtio-block config and should be omitted for vhost-user-block configuration.",
          "type": "string"
        },
        "rate_limiter": {
          "$ref": "#/definitions/RateLimiter"
        },
        "socket": {
          "description": "Path to the socket of vhost-user-block backend. This field is required for vhost-user-block config should be omitted for virtio-block configuration.",
          "type": "string"
        }
      }
    },
    "EntropyDevice": {
      "description": "Defines an entropy device.",
      "type": "object",
      "properties": {
        "rate_limiter": {
          "$ref": "#/definitions/RateLimiter"
        }
      }
    },
    "Error": {
      "type": "object",
      "properties": {
        "fault_message": {
          "description": "A description of the error condition",
          "type": "string",
          "readOnly": true
        }
      }
    },
    "FirecrackerVersion": {
      "description": "Describes the Firecracker version.",
      "type": "object",
      "required": [
        "firecracker_version"
      ],
      "properties": {
        "firecracker_version": {
          "description": "Firecracker build version.",
          "type": "string"
        }
      }
    },
    "FullVmConfiguration": {
      "type": "object",
      "properties": {
        "balloon": {
          "$ref": "#/definitions/Balloon"
        },
        "boot-source": {
          "$ref": "#/definitions/BootSource"
        },
        "cpu-config": {
          "$ref": "#/definitions/CpuConfig"
        },
        "drives": {
          "description": "Configurations for all block devices.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Drive"
          }
        },
        "entropy": {
          "$ref": "#/definitions/EntropyDevice"
        },
        "logger": {
          "$ref": "#/definitions/Logger"
        },
        "machine-config": {
          "$ref": "#/definitions/MachineConfiguration"
        },
        "metrics": {
          "$ref": "#/definitions/Metrics"
        },
        "mmds-config": {
          "$ref": "#/definitions/MmdsConfig"
        },
        "network-interfaces": {
          "description": "Configurations for all net devices.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/NetworkInterface"
          }
        },
        "vsock": {
          "$ref": "#/definitions/Vsock"
        }
      }
    },
    "InstanceActionInfo": {
      "description": "Variant wrapper containing the real action.",
      "type": "object",
      "required": [
        "action_type"
      ],
      "properties": {
        "action_type": {
          "description": "Enumeration indicating what type of action is contained in the payload",
          "type": "string",
          "enum": [
            "FlushMetrics",
            "InstanceStart",
            "SendCtrlAltDel"
          ]
        }
      }
    },
    "InstanceInfo": {
      "description": "Describes MicroVM instance information.",
      "type": "object",
      "required": [
        "app_name",
        "id",
        "state",
        "vmm_version"
      ],
      "properties": {
        "app_name": {
          "description": "Application name.",
          "type": "string"
        },
        "id": {
          "description": "MicroVM / instance ID.",
          "type": "string"
        },
        "state": {
          "description": "The current detailed state (Not started, Running, Paused) of the Firecracker instance. This value is read-only for the control-plane.",
          "type": "string",
          "enum": [
            "Not started",
            "Running",
            "Paused"
          ]
        },
        "vmm_version": {
          "description": "MicroVM hypervisor build version.",
          "type": "string"
        }
      }
    },
    "Logger": {
      "description": "Describes the configuration option for the logging capability.",
      "type": "object",
      "properties": {
        "level": {
          "description": "Set the level. The possible values are case-insensitive.",
          "type": "string",
          "default": "Info",
          "enum": [
            "Error",
            "Warning",
            "Info",
            "Debug",
            "Trace",
            "Off"
          ]
        },
        "log_path": {
          "description": "Path to the named pipe or file for the human readable log output.",
          "type": "string"
        },
        "module": {
          "description": "The module path to filter log messages by.",
          "type": "string",
          "example": "api_server::request"
        },
        "show_level": {
          "description": "Whether or not to output the level in the logs.",
          "type": "boolean",
          "default": false
        },
        "show_log_origin": {
          "description": "Whether or not to include the file path and line number of the log's origin.",
          "type": "boolean",
          "default": false
        }
      }
    },
    "MachineConfiguration": {
      "description": "Describes the number of vCPUs, memory size, SMT capabilities, huge page configuration and the CPU template.",
      "type": "object",
      "required": [
        "mem_size_mib",
        "vcpu_count"
      ],
      "properties": {
        "cpu_template": {
          "$ref": "#/definitions/CpuTemplate"
        },
        "huge_pages": {
          "description": "Which huge pages configuration (if any) should be used to back guest memory.",
          "type": "string",
          "enum": [
            "None",
            "2M"
          ]
        },
        "mem_size_mib": {
          "description": "Memory size of VM",
          "type": "integer"
        },
        "smt": {
          "description": "Flag for enabling/disabling simultaneous multithreading. Can be enabled only on x86.",
          "type": "boolean",
          "default": false
        },
        "track_dirty_pages": {
          "description": "Enable dirty page tracking. If this is enabled, then incremental guest memory snapshots can be created. These belong to diff snapshots, which contain, besides the microVM state, only the memory dirtied since a previous snapshot. Full snapshots each contain a full copy of the guest memory.",
          "type": "boolean",
          "default": false
        },
        "vcpu_count": {
          "description": "Number of vCPUs (either 1 or an even number)",
          "type": "integer",
          "maximum": 32,
          "minimum": 1
        }
      }
    },
    "MemoryBackend": {
      "type": "object",
      "required": [
        "backend_type",
        "backend_path"
      ],
      "properties": {
        "backend_path": {
          "description": "Based on 'backend_type' it is either 1) Path to the file that contains the guest memory to be loaded 2) Path to the UDS where a process is listening for a UFFD initialization control payload and open file descriptor that it can use to serve this process's guest memory page faults",
          "type": "string"
        },
        "backend_type": {
          "type": "string",
          "enum": [
            "File",
            "Uffd"
          ]
        }
      }
    },
    "Metrics": {
      "description": "Describes the configuration option for the metrics capability.",
      "type": "object",
      "required": [
        "metrics_path"
      ],
      "properties": {
        "metrics_path": {
          "description": "Path to the named pipe or file where the JSON-formatted metrics are flushed.",
          "type": "string"
        }
      }
    },
    "MmdsConfig": {
      "description": "Defines the MMDS configuration.",
      "type": "object",
      "required": [
        "network_interfaces"
      ],
      "properties": {
        "ipv4_address": {
          "description": "A valid IPv4 link-local address.",
          "type": "string",
          "format": "169.254.([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-4]).([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])",
          "default": "169.254.169.254"
        },
        "network_interfaces": {
          "description": "List of the network interface IDs capable of forwarding packets to the MMDS. Network interface IDs mentioned must be valid at the time of this request. The net device model will reply to HTTP GET requests sent to the MMDS address via the interfaces mentioned. In this case, both ARP requests and TCP segments heading to ` + "`" + `ipv4_address` + "`" + ` are intercepted by the device model, and do not reach the associated TAP device.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "version": {
          "description": "Enumeration indicating the MMDS version to be configured.",
          "type": "string",
          "default": "V1",
          "enum": [
            "V1",
            "V2"
          ]
        }
      }
    },
    "MmdsContentsObject": {
      "description": "Describes the contents of MMDS in JSON format.",
      "type": "object"
    },
    "NetworkInterface": {
      "description": "Defines a network interface.",
      "type": "object",
      "required": [
        "host_dev_name",
        "iface_id"
      ],
      "properties": {
        "guest_mac": {
          "type": "string"
        },
        "host_dev_name": {
          "description": "Host level path for the guest network interface",
          "type": "string"
        },
        "iface_id": {
          "type": "string"
        },
        "rx_rate_limiter": {
          "$ref": "#/definitions/RateLimiter"
        },
        "tx_rate_limiter": {
          "$ref": "#/definitions/RateLimiter"
        }
      }
    },
    "NetworkOverride": {
      "description": "Allows for changing the backing TAP device of a network interface during snapshot restore.",
      "type": "object",
      "required": [
        "iface_id",
        "host_dev_name"
      ],
      "properties": {
        "host_dev_name": {
          "description": "The new host device of the interface",
          "type": "string"
        },
        "iface_id": {
          "description": "The name of the interface to modify",
          "type": "string"
        }
      }
    },
    "PartialDrive": {
      "type": "object",
      "required": [
        "drive_id"
      ],
      "properties": {
        "drive_id": {
          "type": "string"
        },
        "path_on_host": {
          "description": "Host level path for the guest drive. This field is optional for virtio-block config and should be omitted for vhost-user-block configuration.",
          "type": "string"
        },
        "rate_limiter": {
          "$ref": "#/definitions/RateLimiter"
        }
      }
    },
    "PartialNetworkInterface": {
      "description": "Defines a partial network interface structure, used to update the rate limiters for that interface, after microvm start.",
      "type": "object",
      "required": [
        "iface_id"
      ],
      "properties": {
        "iface_id": {
          "type": "string"
        },
        "rx_rate_limiter": {
          "$ref": "#/definitions/RateLimiter"
        },
        "tx_rate_limiter": {
          "$ref": "#/definitions/RateLimiter"
        }
      }
    },
    "RateLimiter": {
      "description": "Defines an IO rate limiter with independent bytes/s and ops/s limits. Limits are defined by configuring each of the _bandwidth_ and _ops_ token buckets. This field is optional for virtio-block config and should be omitted for vhost-user-block configuration.",
      "type": "object",
      "properties": {
        "bandwidth": {
          "description": "Token bucket with bytes as tokens",
          "$ref": "#/definitions/TokenBucket"
        },
        "ops": {
          "description": "Token bucket with operations as tokens",
          "$ref": "#/definitions/TokenBucket"
        }
      }
    },
    "SnapshotCreateParams": {
      "type": "object",
      "required": [
        "mem_file_path",
        "snapshot_path"
      ],
      "properties": {
        "mem_file_path": {
          "description": "Path to the file that will contain the guest memory.",
          "type": "string"
        },
        "snapshot_path": {
          "description": "Path to the file that will contain the microVM state.",
          "type": "string"
        },
        "snapshot_type": {
          "description": "Type of snapshot to create. It is optional and by default, a full snapshot is created.",
          "type": "string",
          "enum": [
            "Full",
            "Diff"
          ]
        }
      }
    },
    "SnapshotLoadParams": {
      "description": "Defines the configuration used for handling snapshot resume. Exactly one of the two ` + "`" + `mem_*` + "`" + ` fields must be present in the body of the request.",
      "type": "object",
      "required": [
        "snapshot_path"
      ],
      "properties": {
        "enable_diff_snapshots": {
          "description": "Enable support for incremental (diff) snapshots by tracking dirty guest pages.",
          "type": "boolean"
        },
        "mem_backend": {
          "description": "Configuration for the backend that handles memory load. If this field is specified, ` + "`" + `mem_file_path` + "`" + ` is forbidden. Either ` + "`" + `mem_backend` + "`" + ` or ` + "`" + `mem_file_path` + "`" + ` must be present at a time.",
          "$ref": "#/definitions/MemoryBackend"
        },
        "mem_file_path": {
          "description": "Path to the file that contains the guest memory to be loaded. It is only allowed if ` + "`" + `mem_backend` + "`" + ` is not present. This parameter has been deprecated and it will be removed in future Firecracker release.",
          "type": "string"
        },
        "network_overrides": {
          "description": "Network host device names to override",
          "type": "array",
          "items": {
            "$ref": "#/definitions/NetworkOverride"
          }
        },
        "resume_vm": {
          "description": "When set to true, the vm is also resumed if the snapshot load is successful.",
          "type": "boolean"
        },
        "snapshot_path": {
          "description": "Path to the file that contains the microVM state to be loaded.",
          "type": "string"
        }
      }
    },
    "TokenBucket": {
      "description": "Defines a token bucket with a maximum capacity (size), an initial burst size (one_time_burst) and an interval for refilling purposes (refill_time). The refill-rate is derived from size and refill_time, and it is the constant rate at which the tokens replenish. The refill process only starts happening after the initial burst budget is consumed. Consumption from the token bucket is unbounded in speed which allows for bursts bound in size by the amount of tokens available. Once the token bucket is empty, consumption speed is bound by the refill_rate.",
      "type": "object",
      "required": [
        "refill_time",
        "size"
      ],
      "properties": {
        "one_time_burst": {
          "description": "The initial size of a token bucket.",
          "type": "integer",
          "format": "int64"
        },
        "refill_time": {
          "description": "The amount of milliseconds it takes for the bucket to refill.",
          "type": "integer",
          "format": "int64"
        },
        "size": {
          "description": "The total number of tokens this bucket can hold.",
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "Vm": {
      "description": "Defines the microVM running state. It is especially useful in the snapshotting context.",
      "type": "object",
      "required": [
        "state"
      ],
      "properties": {
        "state": {
          "type": "string",
          "enum": [
            "Paused",
            "Resumed"
          ]
        }
      }
    },
    "Vsock": {
      "description": "Defines a vsock device, backed by a set of Unix Domain Sockets, on the host side. For host-initiated connections, Firecracker will be listening on the Unix socket identified by the path ` + "`" + `uds_path` + "`" + `. Firecracker will create this socket, bind and listen on it. Host-initiated connections will be performed by connection to this socket and issuing a connection forwarding request to the desired guest-side vsock port (i.e. ` + "`" + `CONNECT 52\\n` + "`" + `, to connect to port 52). For guest-initiated connections, Firecracker will expect host software to be bound and listening on Unix sockets at ` + "`" + `uds_path_\u003cPORT\u003e` + "`" + `. E.g. \"/path/to/host_vsock.sock_52\" for port number 52.",
      "type": "object",
      "required": [
        "guest_cid",
        "uds_path"
      ],
      "properties": {
        "guest_cid": {
          "description": "Guest Vsock CID",
          "type": "integer",
          "minimum": 3
        },
        "uds_path": {
          "description": "Path to UNIX domain socket, used to proxy vsock connections.",
          "type": "string"
        },
        "vsock_id": {
          "description": "This parameter has been deprecated and it will be removed in future Firecracker release.",
          "type": "string"
        }
      }
    }
  }
}`))
	FlatSwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "description": "RESTful public-facing API. The API is accessible through HTTP calls on specific URLs carrying JSON modeled data. The transport medium is a Unix Domain Socket.",
    "title": "Firecracker API",
    "contact": {
      "email": "firecracker-maintainers@amazon.com"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "version": "1.13.0-dev"
  },
  "host": "localhost",
  "basePath": "/",
  "paths": {
    "/": {
      "get": {
        "summary": "Returns general information about an instance.",
        "operationId": "describeInstance",
        "responses": {
          "200": {
            "description": "The instance information",
            "schema": {
              "$ref": "#/definitions/InstanceInfo"
            }
          },
          "default": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/actions": {
      "put": {
        "summary": "Creates a synchronous action.",
        "operationId": "createSyncAction",
        "parameters": [
          {
            "name": "info",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/InstanceActionInfo"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The update was successful"
          },
          "400": {
            "description": "The action cannot be executed due to bad input",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/balloon": {
      "get": {
        "summary": "Returns the current balloon device configuration.",
        "operationId": "describeBalloonConfig",
        "responses": {
          "200": {
            "description": "The balloon device configuration",
            "schema": {
              "$ref": "#/definitions/Balloon"
            }
          },
          "400": {
            "description": "Balloon device not configured.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "description": "Creates a new balloon device if one does not already exist, otherwise updates it, before machine startup. This will fail after machine startup. Will fail if update is not possible.",
        "summary": "Creates or updates a balloon device.",
        "operationId": "putBalloon",
        "parameters": [
          {
            "description": "Balloon properties",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Balloon"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Balloon device created/updated"
          },
          "400": {
            "description": "Balloon device cannot be created/updated due to bad input",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "patch": {
        "description": "Updates an existing balloon device, before or after machine startup. Will fail if update is not possible.",
        "summary": "Updates a balloon device.",
        "operationId": "patchBalloon",
        "parameters": [
          {
            "description": "Balloon properties",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BalloonUpdate"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Balloon device updated"
          },
          "400": {
            "description": "Balloon device cannot be updated due to bad input",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/balloon/statistics": {
      "get": {
        "summary": "Returns the latest balloon device statistics, only if enabled pre-boot.",
        "operationId": "describeBalloonStats",
        "responses": {
          "200": {
            "description": "The balloon device statistics",
            "schema": {
              "$ref": "#/definitions/BalloonStats"
            }
          },
          "400": {
            "description": "The balloon device statistics were not enabled when the device was configured.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "patch": {
        "description": "Updates an existing balloon device statistics interval, before or after machine startup. Will fail if update is not possible.",
        "summary": "Updates a balloon device statistics polling interval.",
        "operationId": "patchBalloonStatsInterval",
        "parameters": [
          {
            "description": "Balloon properties",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BalloonStatsUpdate"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Balloon statistics interval updated"
          },
          "400": {
            "description": "Balloon statistics interval cannot be updated due to bad input",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/boot-source": {
      "put": {
        "description": "Creates new boot source if one does not already exist, otherwise updates it. Will fail if update is not possible.",
        "summary": "Creates or updates the boot source. Pre-boot only.",
        "operationId": "putGuestBootSource",
        "parameters": [
          {
            "description": "Guest boot source properties",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BootSource"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Boot source created/updated"
          },
          "400": {
            "description": "Boot source cannot be created due to bad input",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/cpu-config": {
      "put": {
        "description": "Provides configuration to the Firecracker process to specify vCPU resource configuration prior to launching the guest machine.",
        "summary": "Configures CPU features flags for the vCPUs of the guest VM. Pre-boot only.",
        "operationId": "putCpuConfiguration",
        "parameters": [
          {
            "description": "CPU configuration request",
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/CpuConfig"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "CPU configuration set successfully"
          },
          "400": {
            "description": "CPU configuration cannot be updated due to invalid input format",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/drives/{drive_id}": {
      "put": {
        "description": "Creates new drive with ID specified by drive_id path parameter. If a drive with the specified ID already exists, updates its state based on new input. Will fail if update is not possible.",
        "summary": "Creates or updates a drive. Pre-boot only.",
        "operationId": "putGuestDriveByID",
        "parameters": [
          {
            "type": "string",
            "description": "The id of the guest drive",
            "name": "drive_id",
            "in": "path",
            "required": true
          },
          {
            "description": "Guest drive properties",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Drive"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Drive created/updated"
          },
          "400": {
            "description": "Drive cannot be created/updated due to bad input",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "patch": {
        "description": "Updates the properties of the drive with the ID specified by drive_id path parameter. Will fail if update is not possible.",
        "summary": "Updates the properties of a drive. Post-boot only.",
        "operationId": "patchGuestDriveByID",
        "parameters": [
          {
            "type": "string",
            "description": "The id of the guest drive",
            "name": "drive_id",
            "in": "path",
            "required": true
          },
          {
            "description": "Guest drive properties",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PartialDrive"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Drive updated"
          },
          "400": {
            "description": "Drive cannot be updated due to bad input",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/entropy": {
      "put": {
        "description": "Enables an entropy device that provides high-quality random data to the guest.",
        "summary": "Creates an entropy device. Pre-boot only.",
        "operationId": "putEntropyDevice",
        "parameters": [
          {
            "description": "Guest entropy device properties",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/EntropyDevice"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Entropy device created"
          },
          "default": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/logger": {
      "put": {
        "summary": "Initializes the logger by specifying a named pipe or a file for the logs output.",
        "operationId": "putLogger",
        "parameters": [
          {
            "description": "Logging system description",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Logger"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Logger created."
          },
          "400": {
            "description": "Logger cannot be initialized due to bad input.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/machine-config": {
      "get": {
        "description": "Gets the machine configuration of the VM. When called before the PUT operation, it will return the default values for the vCPU count (=1), memory size (=128 MiB). By default SMT is disabled and there is no CPU Template.",
        "summary": "Gets the machine configuration of the VM.",
        "operationId": "getMachineConfiguration",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MachineConfiguration"
            }
          },
          "default": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "description": "Updates the Virtual Machine Configuration with the specified input. Firecracker starts with default values for vCPU count (=1) and memory size (=128 MiB). The vCPU count is restricted to the [1, 32] range. With SMT enabled, the vCPU count is required to be either 1 or an even number in the range. otherwise there are no restrictions regarding the vCPU count. If 2M hugetlbfs pages are specified, then ` + "`" + `mem_size_mib` + "`" + ` must be a multiple of 2. If any of the parameters has an incorrect value, the whole update fails. All parameters that are optional and are not specified are set to their default values (smt = false, track_dirty_pages = false, cpu_template = None, huge_pages = None).",
        "summary": "Updates the Machine Configuration of the VM. Pre-boot only.",
        "operationId": "putMachineConfiguration",
        "parameters": [
          {
            "description": "Machine Configuration Parameters",
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/MachineConfiguration"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Machine Configuration created/updated"
          },
          "400": {
            "description": "Machine Configuration cannot be updated due to bad input",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "patch": {
        "description": "Partially updates the Virtual Machine Configuration with the specified input. If any of the parameters has an incorrect value, the whole update fails.",
        "summary": "Partially updates the Machine Configuration of the VM. Pre-boot only.",
        "operationId": "patchMachineConfiguration",
        "parameters": [
          {
            "description": "A subset of Machine Configuration Parameters",
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/MachineConfiguration"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Machine Configuration created/updated"
          },
          "400": {
            "description": "Machine Configuration cannot be updated due to bad input",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/metrics": {
      "put": {
        "summary": "Initializes the metrics system by specifying a named pipe or a file for the metrics output.",
        "operationId": "putMetrics",
        "parameters": [
          {
            "description": "Metrics system description",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Metrics"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Metrics system created."
          },
          "400": {
            "description": "Metrics system cannot be initialized due to bad input request or metrics system already initialized.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/mmds": {
      "get": {
        "summary": "Get the MMDS data store.",
        "operationId": "getMmds",
        "responses": {
          "200": {
            "description": "The MMDS data store JSON.",
            "schema": {
              "type": "object"
            }
          },
          "404": {
            "description": "The MMDS data store content can not be found.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "summary": "Creates a MMDS (Microvm Metadata Service) data store.",
        "operationId": "putMmds",
        "parameters": [
          {
            "description": "The MMDS data store as JSON.",
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/MmdsContentsObject"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "MMDS data store created/updated."
          },
          "400": {
            "description": "MMDS data store cannot be created due to bad input.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "patch": {
        "summary": "Updates the MMDS data store.",
        "operationId": "patchMmds",
        "parameters": [
          {
            "description": "The MMDS data store patch JSON.",
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/MmdsContentsObject"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "MMDS data store updated."
          },
          "400": {
            "description": "MMDS data store cannot be updated due to bad input.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/mmds/config": {
      "put": {
        "description": "Configures MMDS version, IPv4 address used by the MMDS network stack and interfaces that allow MMDS requests.",
        "summary": "Set MMDS configuration. Pre-boot only.",
        "operationId": "putMmdsConfig",
        "parameters": [
          {
            "description": "The MMDS configuration as JSON.",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MmdsConfig"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "MMDS configuration was created/updated."
          },
          "400": {
            "description": "MMDS configuration cannot be updated due to bad input.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/network-interfaces/{iface_id}": {
      "put": {
        "description": "Creates new network interface with ID specified by iface_id path parameter.",
        "summary": "Creates a network interface. Pre-boot only.",
        "operationId": "putGuestNetworkInterfaceByID",
        "parameters": [
          {
            "type": "string",
            "description": "The id of the guest network interface",
            "name": "iface_id",
            "in": "path",
            "required": true
          },
          {
            "description": "Guest network interface properties",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/NetworkInterface"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Network interface created/updated"
          },
          "400": {
            "description": "Network interface cannot be created due to bad input",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "patch": {
        "description": "Updates the rate limiters applied to a network interface.",
        "summary": "Updates the rate limiters applied to a network interface. Post-boot only.",
        "operationId": "patchGuestNetworkInterfaceByID",
        "parameters": [
          {
            "type": "string",
            "description": "The id of the guest network interface",
            "name": "iface_id",
            "in": "path",
            "required": true
          },
          {
            "description": "A subset of the guest network interface properties",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PartialNetworkInterface"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Network interface updated"
          },
          "400": {
            "description": "Network interface cannot be updated due to bad input",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/snapshot/create": {
      "put": {
        "description": "Creates a snapshot of the microVM state. The microVM should be in the ` + "`" + `Paused` + "`" + ` state.",
        "summary": "Creates a full or diff snapshot. Post-boot only.",
        "operationId": "createSnapshot",
        "parameters": [
          {
            "description": "The configuration used for creating a snaphot.",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SnapshotCreateParams"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Snapshot created"
          },
          "400": {
            "description": "Snapshot cannot be created due to bad input",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/snapshot/load": {
      "put": {
        "description": "Loads the microVM state from a snapshot. Only accepted on a fresh Firecracker process (before configuring any resource other than the Logger and Metrics).",
        "summary": "Loads a snapshot. Pre-boot only.",
        "operationId": "loadSnapshot",
        "parameters": [
          {
            "description": "The configuration used for loading a snaphot.",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SnapshotLoadParams"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Snapshot loaded"
          },
          "400": {
            "description": "Snapshot cannot be loaded due to bad input",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/version": {
      "get": {
        "summary": "Gets the Firecracker version.",
        "operationId": "getFirecrackerVersion",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/FirecrackerVersion"
            }
          },
          "default": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/vm": {
      "patch": {
        "description": "Sets the desired state (Paused or Resumed) for the microVM.",
        "summary": "Updates the microVM state.",
        "operationId": "patchVm",
        "parameters": [
          {
            "description": "The microVM state",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Vm"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Vm state updated"
          },
          "400": {
            "description": "Vm state cannot be updated due to bad input",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/vm/config": {
      "get": {
        "description": "Gets configuration for all VM resources. If the VM is restored from a snapshot, the boot-source, machine-config.smt and machine-config.cpu_template will be empty.",
        "summary": "Gets the full VM configuration.",
        "operationId": "getExportVmConfig",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/FullVmConfiguration"
            }
          },
          "default": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/vsock": {
      "put": {
        "description": "The first call creates the device with the configuration specified in body. Subsequent calls will update the device configuration. May fail if update is not possible.",
        "summary": "Creates/updates a vsock device. Pre-boot only.",
        "operationId": "putGuestVsock",
        "parameters": [
          {
            "description": "Guest vsock properties",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Vsock"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Vsock created/updated"
          },
          "400": {
            "description": "Vsock cannot be created due to bad input",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "Balloon": {
      "description": "Balloon device descriptor.",
      "type": "object",
      "required": [
        "amount_mib",
        "deflate_on_oom"
      ],
      "properties": {
        "amount_mib": {
          "description": "Target balloon size in MiB.",
          "type": "integer"
        },
        "deflate_on_oom": {
          "description": "Whether the balloon should deflate when the guest has memory pressure.",
          "type": "boolean"
        },
        "stats_polling_interval_s": {
          "description": "Interval in seconds between refreshing statistics. A non-zero value will enable the statistics. Defaults to 0.",
          "type": "integer"
        }
      }
    },
    "BalloonStats": {
      "description": "Describes the balloon device statistics.",
      "type": "object",
      "required": [
        "target_pages",
        "actual_pages",
        "target_mib",
        "actual_mib"
      ],
      "properties": {
        "actual_mib": {
          "description": "Actual amount of memory (in MiB) the device is holding.",
          "type": "integer"
        },
        "actual_pages": {
          "description": "Actual number of pages the device is holding.",
          "type": "integer"
        },
        "available_memory": {
          "description": "An estimate of how much memory is available (in bytes) for starting new applications, without pushing the system to swap.",
          "type": "integer",
          "format": "int64"
        },
        "disk_caches": {
          "description": "The amount of memory, in bytes, that can be quickly reclaimed without additional I/O. Typically these pages are used for caching files from disk.",
          "type": "integer",
          "format": "int64"
        },
        "free_memory": {
          "description": "The amount of memory not being used for any purpose (in bytes).",
          "type": "integer",
          "format": "int64"
        },
        "hugetlb_allocations": {
          "description": "The number of successful hugetlb page allocations in the guest.",
          "type": "integer",
          "format": "int64"
        },
        "hugetlb_failures": {
          "description": "The number of failed hugetlb page allocations in the guest.",
          "type": "integer",
          "format": "int64"
        },
        "major_faults": {
          "description": "The number of major page faults that have occurred.",
          "type": "integer",
          "format": "int64"
        },
        "minor_faults": {
          "description": "The number of minor page faults that have occurred.",
          "type": "integer",
          "format": "int64"
        },
        "swap_in": {
          "description": "The amount of memory that has been swapped in (in bytes).",
          "type": "integer",
          "format": "int64"
        },
        "swap_out": {
          "description": "The amount of memory that has been swapped out to disk (in bytes).",
          "type": "integer",
          "format": "int64"
        },
        "target_mib": {
          "description": "Target amount of memory (in MiB) the device aims to hold.",
          "type": "integer"
        },
        "target_pages": {
          "description": "Target number of pages the device aims to hold.",
          "type": "integer"
        },
        "total_memory": {
          "description": "The total amount of memory available (in bytes).",
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "BalloonStatsUpdate": {
      "description": "Update the statistics polling interval, with the first statistics update scheduled immediately. Statistics cannot be turned on/off after boot.",
      "type": "object",
      "required": [
        "stats_polling_interval_s"
      ],
      "properties": {
        "stats_polling_interval_s": {
          "description": "Interval in seconds between refreshing statistics.",
          "type": "integer"
        }
      }
    },
    "BalloonUpdate": {
      "description": "Balloon device descriptor.",
      "type": "object",
      "required": [
        "amount_mib"
      ],
      "properties": {
        "amount_mib": {
          "description": "Target balloon size in MiB.",
          "type": "integer"
        }
      }
    },
    "BootSource": {
      "description": "Boot source descriptor.",
      "type": "object",
      "required": [
        "kernel_image_path"
      ],
      "properties": {
        "boot_args": {
          "description": "Kernel boot arguments",
          "type": "string"
        },
        "initrd_path": {
          "description": "Host level path to the initrd image used to boot the guest",
          "type": "string"
        },
        "kernel_image_path": {
          "description": "Host level path to the kernel image used to boot the guest",
          "type": "string"
        }
      }
    },
    "CpuConfig": {
      "description": "The CPU configuration template defines a set of bit maps as modifiers of flags accessed by register to be disabled/enabled for the microvm.",
      "type": "object",
      "properties": {
        "cpuid_modifiers": {
          "description": "A collection of CPUIDs to be modified. (x86_64)",
          "type": "object"
        },
        "kvm_capabilities": {
          "description": "A collection of kvm capabilities to be modified. (aarch64)",
          "type": "object"
        },
        "msr_modifiers": {
          "description": "A collection of model specific registers to be modified. (x86_64)",
          "type": "object"
        },
        "reg_modifiers": {
          "description": "A collection of registers to be modified. (aarch64)",
          "type": "object"
        },
        "vcpu_features": {
          "description": "A collection of vcpu features to be modified. (aarch64)",
          "type": "object"
        }
      }
    },
    "CpuTemplate": {
      "description": "The CPU Template defines a set of flags to be disabled from the microvm so that the features exposed to the guest are the same as in the selected instance type. This parameter has been deprecated and it will be removed in future Firecracker release.",
      "type": "string",
      "default": "None",
      "enum": [
        "C3",
        "T2",
        "T2S",
        "T2CL",
        "T2A",
        "V1N1",
        "None"
      ]
    },
    "Drive": {
      "type": "object",
      "required": [
        "drive_id",
        "is_root_device"
      ],
      "properties": {
        "cache_type": {
          "description": "Represents the caching strategy for the block device.",
          "type": "string",
          "default": "Unsafe",
          "enum": [
            "Unsafe",
            "Writeback"
          ]
        },
        "drive_id": {
          "type": "string"
        },
        "io_engine": {
          "description": "Type of the IO engine used by the device. \"Async\" is supported on host kernels newer than 5.10.51. This field is optional for virtio-block config and should be omitted for vhost-user-block configuration.",
          "type": "string",
          "default": "Sync",
          "enum": [
            "Sync",
            "Async"
          ]
        },
        "is_read_only": {
          "description": "Is block read only. This field is required for virtio-block config and should be omitted for vhost-user-block configuration.",
          "type": "boolean"
        },
        "is_root_device": {
          "type": "boolean"
        },
        "partuuid": {
          "description": "Represents the unique id of the boot partition of this device. It is optional and it will be taken into account only if the is_root_device field is true.",
          "type": "string"
        },
        "path_on_host": {
          "description": "Host level path for the guest drive. This field is required for virtio-block config and should be omitted for vhost-user-block configuration.",
          "type": "string"
        },
        "rate_limiter": {
          "$ref": "#/definitions/RateLimiter"
        },
        "socket": {
          "description": "Path to the socket of vhost-user-block backend. This field is required for vhost-user-block config should be omitted for virtio-block configuration.",
          "type": "string"
        }
      }
    },
    "EntropyDevice": {
      "description": "Defines an entropy device.",
      "type": "object",
      "properties": {
        "rate_limiter": {
          "$ref": "#/definitions/RateLimiter"
        }
      }
    },
    "Error": {
      "type": "object",
      "properties": {
        "fault_message": {
          "description": "A description of the error condition",
          "type": "string",
          "readOnly": true
        }
      }
    },
    "FirecrackerVersion": {
      "description": "Describes the Firecracker version.",
      "type": "object",
      "required": [
        "firecracker_version"
      ],
      "properties": {
        "firecracker_version": {
          "description": "Firecracker build version.",
          "type": "string"
        }
      }
    },
    "FullVmConfiguration": {
      "type": "object",
      "properties": {
        "balloon": {
          "$ref": "#/definitions/Balloon"
        },
        "boot-source": {
          "$ref": "#/definitions/BootSource"
        },
        "cpu-config": {
          "$ref": "#/definitions/CpuConfig"
        },
        "drives": {
          "description": "Configurations for all block devices.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Drive"
          }
        },
        "entropy": {
          "$ref": "#/definitions/EntropyDevice"
        },
        "logger": {
          "$ref": "#/definitions/Logger"
        },
        "machine-config": {
          "$ref": "#/definitions/MachineConfiguration"
        },
        "metrics": {
          "$ref": "#/definitions/Metrics"
        },
        "mmds-config": {
          "$ref": "#/definitions/MmdsConfig"
        },
        "network-interfaces": {
          "description": "Configurations for all net devices.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/NetworkInterface"
          }
        },
        "vsock": {
          "$ref": "#/definitions/Vsock"
        }
      }
    },
    "InstanceActionInfo": {
      "description": "Variant wrapper containing the real action.",
      "type": "object",
      "required": [
        "action_type"
      ],
      "properties": {
        "action_type": {
          "description": "Enumeration indicating what type of action is contained in the payload",
          "type": "string",
          "enum": [
            "FlushMetrics",
            "InstanceStart",
            "SendCtrlAltDel"
          ]
        }
      }
    },
    "InstanceInfo": {
      "description": "Describes MicroVM instance information.",
      "type": "object",
      "required": [
        "app_name",
        "id",
        "state",
        "vmm_version"
      ],
      "properties": {
        "app_name": {
          "description": "Application name.",
          "type": "string"
        },
        "id": {
          "description": "MicroVM / instance ID.",
          "type": "string"
        },
        "state": {
          "description": "The current detailed state (Not started, Running, Paused) of the Firecracker instance. This value is read-only for the control-plane.",
          "type": "string",
          "enum": [
            "Not started",
            "Running",
            "Paused"
          ]
        },
        "vmm_version": {
          "description": "MicroVM hypervisor build version.",
          "type": "string"
        }
      }
    },
    "Logger": {
      "description": "Describes the configuration option for the logging capability.",
      "type": "object",
      "properties": {
        "level": {
          "description": "Set the level. The possible values are case-insensitive.",
          "type": "string",
          "default": "Info",
          "enum": [
            "Error",
            "Warning",
            "Info",
            "Debug",
            "Trace",
            "Off"
          ]
        },
        "log_path": {
          "description": "Path to the named pipe or file for the human readable log output.",
          "type": "string"
        },
        "module": {
          "description": "The module path to filter log messages by.",
          "type": "string",
          "example": "api_server::request"
        },
        "show_level": {
          "description": "Whether or not to output the level in the logs.",
          "type": "boolean",
          "default": false
        },
        "show_log_origin": {
          "description": "Whether or not to include the file path and line number of the log's origin.",
          "type": "boolean",
          "default": false
        }
      }
    },
    "MachineConfiguration": {
      "description": "Describes the number of vCPUs, memory size, SMT capabilities, huge page configuration and the CPU template.",
      "type": "object",
      "required": [
        "mem_size_mib",
        "vcpu_count"
      ],
      "properties": {
        "cpu_template": {
          "$ref": "#/definitions/CpuTemplate"
        },
        "huge_pages": {
          "description": "Which huge pages configuration (if any) should be used to back guest memory.",
          "type": "string",
          "enum": [
            "None",
            "2M"
          ]
        },
        "mem_size_mib": {
          "description": "Memory size of VM",
          "type": "integer"
        },
        "smt": {
          "description": "Flag for enabling/disabling simultaneous multithreading. Can be enabled only on x86.",
          "type": "boolean",
          "default": false
        },
        "track_dirty_pages": {
          "description": "Enable dirty page tracking. If this is enabled, then incremental guest memory snapshots can be created. These belong to diff snapshots, which contain, besides the microVM state, only the memory dirtied since a previous snapshot. Full snapshots each contain a full copy of the guest memory.",
          "type": "boolean",
          "default": false
        },
        "vcpu_count": {
          "description": "Number of vCPUs (either 1 or an even number)",
          "type": "integer",
          "maximum": 32,
          "minimum": 1
        }
      }
    },
    "MemoryBackend": {
      "type": "object",
      "required": [
        "backend_type",
        "backend_path"
      ],
      "properties": {
        "backend_path": {
          "description": "Based on 'backend_type' it is either 1) Path to the file that contains the guest memory to be loaded 2) Path to the UDS where a process is listening for a UFFD initialization control payload and open file descriptor that it can use to serve this process's guest memory page faults",
          "type": "string"
        },
        "backend_type": {
          "type": "string",
          "enum": [
            "File",
            "Uffd"
          ]
        }
      }
    },
    "Metrics": {
      "description": "Describes the configuration option for the metrics capability.",
      "type": "object",
      "required": [
        "metrics_path"
      ],
      "properties": {
        "metrics_path": {
          "description": "Path to the named pipe or file where the JSON-formatted metrics are flushed.",
          "type": "string"
        }
      }
    },
    "MmdsConfig": {
      "description": "Defines the MMDS configuration.",
      "type": "object",
      "required": [
        "network_interfaces"
      ],
      "properties": {
        "ipv4_address": {
          "description": "A valid IPv4 link-local address.",
          "type": "string",
          "format": "169.254.([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-4]).([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])",
          "default": "169.254.169.254"
        },
        "network_interfaces": {
          "description": "List of the network interface IDs capable of forwarding packets to the MMDS. Network interface IDs mentioned must be valid at the time of this request. The net device model will reply to HTTP GET requests sent to the MMDS address via the interfaces mentioned. In this case, both ARP requests and TCP segments heading to ` + "`" + `ipv4_address` + "`" + ` are intercepted by the device model, and do not reach the associated TAP device.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "version": {
          "description": "Enumeration indicating the MMDS version to be configured.",
          "type": "string",
          "default": "V1",
          "enum": [
            "V1",
            "V2"
          ]
        }
      }
    },
    "MmdsContentsObject": {
      "description": "Describes the contents of MMDS in JSON format.",
      "type": "object"
    },
    "NetworkInterface": {
      "description": "Defines a network interface.",
      "type": "object",
      "required": [
        "host_dev_name",
        "iface_id"
      ],
      "properties": {
        "guest_mac": {
          "type": "string"
        },
        "host_dev_name": {
          "description": "Host level path for the guest network interface",
          "type": "string"
        },
        "iface_id": {
          "type": "string"
        },
        "rx_rate_limiter": {
          "$ref": "#/definitions/RateLimiter"
        },
        "tx_rate_limiter": {
          "$ref": "#/definitions/RateLimiter"
        }
      }
    },
    "NetworkOverride": {
      "description": "Allows for changing the backing TAP device of a network interface during snapshot restore.",
      "type": "object",
      "required": [
        "iface_id",
        "host_dev_name"
      ],
      "properties": {
        "host_dev_name": {
          "description": "The new host device of the interface",
          "type": "string"
        },
        "iface_id": {
          "description": "The name of the interface to modify",
          "type": "string"
        }
      }
    },
    "PartialDrive": {
      "type": "object",
      "required": [
        "drive_id"
      ],
      "properties": {
        "drive_id": {
          "type": "string"
        },
        "path_on_host": {
          "description": "Host level path for the guest drive. This field is optional for virtio-block config and should be omitted for vhost-user-block configuration.",
          "type": "string"
        },
        "rate_limiter": {
          "$ref": "#/definitions/RateLimiter"
        }
      }
    },
    "PartialNetworkInterface": {
      "description": "Defines a partial network interface structure, used to update the rate limiters for that interface, after microvm start.",
      "type": "object",
      "required": [
        "iface_id"
      ],
      "properties": {
        "iface_id": {
          "type": "string"
        },
        "rx_rate_limiter": {
          "$ref": "#/definitions/RateLimiter"
        },
        "tx_rate_limiter": {
          "$ref": "#/definitions/RateLimiter"
        }
      }
    },
    "RateLimiter": {
      "description": "Defines an IO rate limiter with independent bytes/s and ops/s limits. Limits are defined by configuring each of the _bandwidth_ and _ops_ token buckets. This field is optional for virtio-block config and should be omitted for vhost-user-block configuration.",
      "type": "object",
      "properties": {
        "bandwidth": {
          "description": "Token bucket with bytes as tokens",
          "$ref": "#/definitions/TokenBucket"
        },
        "ops": {
          "description": "Token bucket with operations as tokens",
          "$ref": "#/definitions/TokenBucket"
        }
      }
    },
    "SnapshotCreateParams": {
      "type": "object",
      "required": [
        "mem_file_path",
        "snapshot_path"
      ],
      "properties": {
        "mem_file_path": {
          "description": "Path to the file that will contain the guest memory.",
          "type": "string"
        },
        "snapshot_path": {
          "description": "Path to the file that will contain the microVM state.",
          "type": "string"
        },
        "snapshot_type": {
          "description": "Type of snapshot to create. It is optional and by default, a full snapshot is created.",
          "type": "string",
          "enum": [
            "Full",
            "Diff"
          ]
        }
      }
    },
    "SnapshotLoadParams": {
      "description": "Defines the configuration used for handling snapshot resume. Exactly one of the two ` + "`" + `mem_*` + "`" + ` fields must be present in the body of the request.",
      "type": "object",
      "required": [
        "snapshot_path"
      ],
      "properties": {
        "enable_diff_snapshots": {
          "description": "Enable support for incremental (diff) snapshots by tracking dirty guest pages.",
          "type": "boolean"
        },
        "mem_backend": {
          "description": "Configuration for the backend that handles memory load. If this field is specified, ` + "`" + `mem_file_path` + "`" + ` is forbidden. Either ` + "`" + `mem_backend` + "`" + ` or ` + "`" + `mem_file_path` + "`" + ` must be present at a time.",
          "$ref": "#/definitions/MemoryBackend"
        },
        "mem_file_path": {
          "description": "Path to the file that contains the guest memory to be loaded. It is only allowed if ` + "`" + `mem_backend` + "`" + ` is not present. This parameter has been deprecated and it will be removed in future Firecracker release.",
          "type": "string"
        },
        "network_overrides": {
          "description": "Network host device names to override",
          "type": "array",
          "items": {
            "$ref": "#/definitions/NetworkOverride"
          }
        },
        "resume_vm": {
          "description": "When set to true, the vm is also resumed if the snapshot load is successful.",
          "type": "boolean"
        },
        "snapshot_path": {
          "description": "Path to the file that contains the microVM state to be loaded.",
          "type": "string"
        }
      }
    },
    "TokenBucket": {
      "description": "Defines a token bucket with a maximum capacity (size), an initial burst size (one_time_burst) and an interval for refilling purposes (refill_time). The refill-rate is derived from size and refill_time, and it is the constant rate at which the tokens replenish. The refill process only starts happening after the initial burst budget is consumed. Consumption from the token bucket is unbounded in speed which allows for bursts bound in size by the amount of tokens available. Once the token bucket is empty, consumption speed is bound by the refill_rate.",
      "type": "object",
      "required": [
        "refill_time",
        "size"
      ],
      "properties": {
        "one_time_burst": {
          "description": "The initial size of a token bucket.",
          "type": "integer",
          "format": "int64",
          "minimum": 0
        },
        "refill_time": {
          "description": "The amount of milliseconds it takes for the bucket to refill.",
          "type": "integer",
          "format": "int64",
          "minimum": 0
        },
        "size": {
          "description": "The total number of tokens this bucket can hold.",
          "type": "integer",
          "format": "int64",
          "minimum": 0
        }
      }
    },
    "Vm": {
      "description": "Defines the microVM running state. It is especially useful in the snapshotting context.",
      "type": "object",
      "required": [
        "state"
      ],
      "properties": {
        "state": {
          "type": "string",
          "enum": [
            "Paused",
            "Resumed"
          ]
        }
      }
    },
    "Vsock": {
      "description": "Defines a vsock device, backed by a set of Unix Domain Sockets, on the host side. For host-initiated connections, Firecracker will be listening on the Unix socket identified by the path ` + "`" + `uds_path` + "`" + `. Firecracker will create this socket, bind and listen on it. Host-initiated connections will be performed by connection to this socket and issuing a connection forwarding request to the desired guest-side vsock port (i.e. ` + "`" + `CONNECT 52\\n` + "`" + `, to connect to port 52). For guest-initiated connections, Firecracker will expect host software to be bound and listening on Unix sockets at ` + "`" + `uds_path_\u003cPORT\u003e` + "`" + `. E.g. \"/path/to/host_vsock.sock_52\" for port number 52.",
      "type": "object",
      "required": [
        "guest_cid",
        "uds_path"
      ],
      "properties": {
        "guest_cid": {
          "description": "Guest Vsock CID",
          "type": "integer",
          "minimum": 3
        },
        "uds_path": {
          "description": "Path to UNIX domain socket, used to proxy vsock connections.",
          "type": "string"
        },
        "vsock_id": {
          "description": "This parameter has been deprecated and it will be removed in future Firecracker release.",
          "type": "string"
        }
      }
    }
  }
}`))
}
