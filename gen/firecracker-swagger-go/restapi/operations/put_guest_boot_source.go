// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// PutGuestBootSourceHandlerFunc turns a function with the right signature into a put guest boot source handler
type PutGuestBootSourceHandlerFunc func(PutGuestBootSourceParams) PutGuestBootSourceResponder

// Handle executing the request and returning a response
func (fn PutGuestBootSourceHandlerFunc) Handle(params PutGuestBootSourceParams) PutGuestBootSourceResponder {
	return fn(params)
}

// PutGuestBootSourceHandler interface for that can handle valid put guest boot source params
type PutGuestBootSourceHandler interface {
	Handle(PutGuestBootSourceParams) PutGuestBootSourceResponder
}

// NewPutGuestBootSource creates a new http.Handler for the put guest boot source operation
func NewPutGuestBootSource(ctx *middleware.Context, handler PutGuestBootSourceHandler) *PutGuestBootSource {
	return &PutGuestBootSource{Context: ctx, Handler: handler}
}

/*
	PutGuestBootSource swagger:route PUT /boot-source putGuestBootSource

Creates or updates the boot source. Pre-boot only.

Creates new boot source if one does not already exist, otherwise updates it. Will fail if update is not possible.
*/
type PutGuestBootSource struct {
	Context *middleware.Context
	Handler PutGuestBootSourceHandler
}

func (o *PutGuestBootSource) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewPutGuestBootSourceParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
