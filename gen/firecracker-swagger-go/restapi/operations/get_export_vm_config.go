// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GetExportVMConfigHandlerFunc turns a function with the right signature into a get export Vm config handler
type GetExportVMConfigHandlerFunc func(GetExportVMConfigParams) GetExportVMConfigResponder

// Handle executing the request and returning a response
func (fn GetExportVMConfigHandlerFunc) Handle(params GetExportVMConfigParams) GetExportVMConfigResponder {
	return fn(params)
}

// GetExportVMConfigHandler interface for that can handle valid get export Vm config params
type GetExportVMConfigHandler interface {
	Handle(GetExportVMConfigParams) GetExportVMConfigResponder
}

// NewGetExportVMConfig creates a new http.Handler for the get export Vm config operation
func NewGetExportVMConfig(ctx *middleware.Context, handler GetExportVMConfigHandler) *GetExportVMConfig {
	return &GetExportVMConfig{Context: ctx, Handler: handler}
}

/*
	GetExportVMConfig swagger:route GET /vm/config getExportVmConfig

Gets the full VM configuration.

Gets configuration for all VM resources. If the VM is restored from a snapshot, the boot-source, machine-config.smt and machine-config.cpu_template will be empty.
*/
type GetExportVMConfig struct {
	Context *middleware.Context
	Handler GetExportVMConfigHandler
}

func (o *GetExportVMConfig) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetExportVMConfigParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
