// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"net/http"
	"strings"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/loads"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/runtime/security"
	"github.com/go-openapi/spec"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewFirecrackerAPIAPI creates a new FirecrackerAPI instance
func NewFirecrackerAPIAPI(spec *loads.Document) *FirecrackerAPIAPI {
	return &FirecrackerAPIAPI{
		handlers:            make(map[string]map[string]http.Handler),
		formats:             strfmt.Default,
		defaultConsumes:     "application/json",
		defaultProduces:     "application/json",
		customConsumers:     make(map[string]runtime.Consumer),
		customProducers:     make(map[string]runtime.Producer),
		PreServerShutdown:   func() {},
		ServerShutdown:      func() {},
		spec:                spec,
		useSwaggerUI:        false,
		ServeError:          errors.ServeError,
		BasicAuthenticator:  security.BasicAuth,
		APIKeyAuthenticator: security.APIKeyAuth,
		BearerAuthenticator: security.BearerAuth,

		JSONConsumer: runtime.JSONConsumer(),

		JSONProducer: runtime.JSONProducer(),

		CreateSnapshotHandler: CreateSnapshotHandlerFunc(func(params CreateSnapshotParams) CreateSnapshotResponder {
			return CreateSnapshotNotImplemented()
		}),
		CreateSyncActionHandler: CreateSyncActionHandlerFunc(func(params CreateSyncActionParams) CreateSyncActionResponder {
			return CreateSyncActionNotImplemented()
		}),
		DescribeBalloonConfigHandler: DescribeBalloonConfigHandlerFunc(func(params DescribeBalloonConfigParams) DescribeBalloonConfigResponder {
			return DescribeBalloonConfigNotImplemented()
		}),
		DescribeBalloonStatsHandler: DescribeBalloonStatsHandlerFunc(func(params DescribeBalloonStatsParams) DescribeBalloonStatsResponder {
			return DescribeBalloonStatsNotImplemented()
		}),
		DescribeInstanceHandler: DescribeInstanceHandlerFunc(func(params DescribeInstanceParams) DescribeInstanceResponder {
			return DescribeInstanceNotImplemented()
		}),
		GetExportVMConfigHandler: GetExportVMConfigHandlerFunc(func(params GetExportVMConfigParams) GetExportVMConfigResponder {
			return GetExportVMConfigNotImplemented()
		}),
		GetFirecrackerVersionHandler: GetFirecrackerVersionHandlerFunc(func(params GetFirecrackerVersionParams) GetFirecrackerVersionResponder {
			return GetFirecrackerVersionNotImplemented()
		}),
		GetMachineConfigurationHandler: GetMachineConfigurationHandlerFunc(func(params GetMachineConfigurationParams) GetMachineConfigurationResponder {
			return GetMachineConfigurationNotImplemented()
		}),
		GetMmdsHandler: GetMmdsHandlerFunc(func(params GetMmdsParams) GetMmdsResponder {
			return GetMmdsNotImplemented()
		}),
		LoadSnapshotHandler: LoadSnapshotHandlerFunc(func(params LoadSnapshotParams) LoadSnapshotResponder {
			return LoadSnapshotNotImplemented()
		}),
		PatchBalloonHandler: PatchBalloonHandlerFunc(func(params PatchBalloonParams) PatchBalloonResponder {
			return PatchBalloonNotImplemented()
		}),
		PatchBalloonStatsIntervalHandler: PatchBalloonStatsIntervalHandlerFunc(func(params PatchBalloonStatsIntervalParams) PatchBalloonStatsIntervalResponder {
			return PatchBalloonStatsIntervalNotImplemented()
		}),
		PatchGuestDriveByIDHandler: PatchGuestDriveByIDHandlerFunc(func(params PatchGuestDriveByIDParams) PatchGuestDriveByIDResponder {
			return PatchGuestDriveByIDNotImplemented()
		}),
		PatchGuestNetworkInterfaceByIDHandler: PatchGuestNetworkInterfaceByIDHandlerFunc(func(params PatchGuestNetworkInterfaceByIDParams) PatchGuestNetworkInterfaceByIDResponder {
			return PatchGuestNetworkInterfaceByIDNotImplemented()
		}),
		PatchMachineConfigurationHandler: PatchMachineConfigurationHandlerFunc(func(params PatchMachineConfigurationParams) PatchMachineConfigurationResponder {
			return PatchMachineConfigurationNotImplemented()
		}),
		PatchMmdsHandler: PatchMmdsHandlerFunc(func(params PatchMmdsParams) PatchMmdsResponder {
			return PatchMmdsNotImplemented()
		}),
		PatchVMHandler: PatchVMHandlerFunc(func(params PatchVMParams) PatchVMResponder {
			return PatchVMNotImplemented()
		}),
		PutBalloonHandler: PutBalloonHandlerFunc(func(params PutBalloonParams) PutBalloonResponder {
			return PutBalloonNotImplemented()
		}),
		PutCPUConfigurationHandler: PutCPUConfigurationHandlerFunc(func(params PutCPUConfigurationParams) PutCPUConfigurationResponder {
			return PutCPUConfigurationNotImplemented()
		}),
		PutEntropyDeviceHandler: PutEntropyDeviceHandlerFunc(func(params PutEntropyDeviceParams) PutEntropyDeviceResponder {
			return PutEntropyDeviceNotImplemented()
		}),
		PutGuestBootSourceHandler: PutGuestBootSourceHandlerFunc(func(params PutGuestBootSourceParams) PutGuestBootSourceResponder {
			return PutGuestBootSourceNotImplemented()
		}),
		PutGuestDriveByIDHandler: PutGuestDriveByIDHandlerFunc(func(params PutGuestDriveByIDParams) PutGuestDriveByIDResponder {
			return PutGuestDriveByIDNotImplemented()
		}),
		PutGuestNetworkInterfaceByIDHandler: PutGuestNetworkInterfaceByIDHandlerFunc(func(params PutGuestNetworkInterfaceByIDParams) PutGuestNetworkInterfaceByIDResponder {
			return PutGuestNetworkInterfaceByIDNotImplemented()
		}),
		PutGuestVsockHandler: PutGuestVsockHandlerFunc(func(params PutGuestVsockParams) PutGuestVsockResponder {
			return PutGuestVsockNotImplemented()
		}),
		PutLoggerHandler: PutLoggerHandlerFunc(func(params PutLoggerParams) PutLoggerResponder {
			return PutLoggerNotImplemented()
		}),
		PutMachineConfigurationHandler: PutMachineConfigurationHandlerFunc(func(params PutMachineConfigurationParams) PutMachineConfigurationResponder {
			return PutMachineConfigurationNotImplemented()
		}),
		PutMetricsHandler: PutMetricsHandlerFunc(func(params PutMetricsParams) PutMetricsResponder {
			return PutMetricsNotImplemented()
		}),
		PutMmdsHandler: PutMmdsHandlerFunc(func(params PutMmdsParams) PutMmdsResponder {
			return PutMmdsNotImplemented()
		}),
		PutMmdsConfigHandler: PutMmdsConfigHandlerFunc(func(params PutMmdsConfigParams) PutMmdsConfigResponder {
			return PutMmdsConfigNotImplemented()
		}),
	}
}

/*FirecrackerAPIAPI RESTful public-facing API. The API is accessible through HTTP calls on specific URLs carrying JSON modeled data. The transport medium is a Unix Domain Socket. */
type FirecrackerAPIAPI struct {
	spec            *loads.Document
	context         *middleware.Context
	handlers        map[string]map[string]http.Handler
	formats         strfmt.Registry
	customConsumers map[string]runtime.Consumer
	customProducers map[string]runtime.Producer
	defaultConsumes string
	defaultProduces string
	Middleware      func(middleware.Builder) http.Handler
	useSwaggerUI    bool

	// BasicAuthenticator generates a runtime.Authenticator from the supplied basic auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	BasicAuthenticator func(security.UserPassAuthentication) runtime.Authenticator

	// APIKeyAuthenticator generates a runtime.Authenticator from the supplied token auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	APIKeyAuthenticator func(string, string, security.TokenAuthentication) runtime.Authenticator

	// BearerAuthenticator generates a runtime.Authenticator from the supplied bearer token auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	BearerAuthenticator func(string, security.ScopedTokenAuthentication) runtime.Authenticator

	// JSONConsumer registers a consumer for the following mime types:
	//   - application/json
	JSONConsumer runtime.Consumer

	// JSONProducer registers a producer for the following mime types:
	//   - application/json
	JSONProducer runtime.Producer

	// CreateSnapshotHandler sets the operation handler for the create snapshot operation
	CreateSnapshotHandler CreateSnapshotHandler
	// CreateSyncActionHandler sets the operation handler for the create sync action operation
	CreateSyncActionHandler CreateSyncActionHandler
	// DescribeBalloonConfigHandler sets the operation handler for the describe balloon config operation
	DescribeBalloonConfigHandler DescribeBalloonConfigHandler
	// DescribeBalloonStatsHandler sets the operation handler for the describe balloon stats operation
	DescribeBalloonStatsHandler DescribeBalloonStatsHandler
	// DescribeInstanceHandler sets the operation handler for the describe instance operation
	DescribeInstanceHandler DescribeInstanceHandler
	// GetExportVMConfigHandler sets the operation handler for the get export Vm config operation
	GetExportVMConfigHandler GetExportVMConfigHandler
	// GetFirecrackerVersionHandler sets the operation handler for the get firecracker version operation
	GetFirecrackerVersionHandler GetFirecrackerVersionHandler
	// GetMachineConfigurationHandler sets the operation handler for the get machine configuration operation
	GetMachineConfigurationHandler GetMachineConfigurationHandler
	// GetMmdsHandler sets the operation handler for the get mmds operation
	GetMmdsHandler GetMmdsHandler
	// LoadSnapshotHandler sets the operation handler for the load snapshot operation
	LoadSnapshotHandler LoadSnapshotHandler
	// PatchBalloonHandler sets the operation handler for the patch balloon operation
	PatchBalloonHandler PatchBalloonHandler
	// PatchBalloonStatsIntervalHandler sets the operation handler for the patch balloon stats interval operation
	PatchBalloonStatsIntervalHandler PatchBalloonStatsIntervalHandler
	// PatchGuestDriveByIDHandler sets the operation handler for the patch guest drive by ID operation
	PatchGuestDriveByIDHandler PatchGuestDriveByIDHandler
	// PatchGuestNetworkInterfaceByIDHandler sets the operation handler for the patch guest network interface by ID operation
	PatchGuestNetworkInterfaceByIDHandler PatchGuestNetworkInterfaceByIDHandler
	// PatchMachineConfigurationHandler sets the operation handler for the patch machine configuration operation
	PatchMachineConfigurationHandler PatchMachineConfigurationHandler
	// PatchMmdsHandler sets the operation handler for the patch mmds operation
	PatchMmdsHandler PatchMmdsHandler
	// PatchVMHandler sets the operation handler for the patch Vm operation
	PatchVMHandler PatchVMHandler
	// PutBalloonHandler sets the operation handler for the put balloon operation
	PutBalloonHandler PutBalloonHandler
	// PutCPUConfigurationHandler sets the operation handler for the put Cpu configuration operation
	PutCPUConfigurationHandler PutCPUConfigurationHandler
	// PutEntropyDeviceHandler sets the operation handler for the put entropy device operation
	PutEntropyDeviceHandler PutEntropyDeviceHandler
	// PutGuestBootSourceHandler sets the operation handler for the put guest boot source operation
	PutGuestBootSourceHandler PutGuestBootSourceHandler
	// PutGuestDriveByIDHandler sets the operation handler for the put guest drive by ID operation
	PutGuestDriveByIDHandler PutGuestDriveByIDHandler
	// PutGuestNetworkInterfaceByIDHandler sets the operation handler for the put guest network interface by ID operation
	PutGuestNetworkInterfaceByIDHandler PutGuestNetworkInterfaceByIDHandler
	// PutGuestVsockHandler sets the operation handler for the put guest vsock operation
	PutGuestVsockHandler PutGuestVsockHandler
	// PutLoggerHandler sets the operation handler for the put logger operation
	PutLoggerHandler PutLoggerHandler
	// PutMachineConfigurationHandler sets the operation handler for the put machine configuration operation
	PutMachineConfigurationHandler PutMachineConfigurationHandler
	// PutMetricsHandler sets the operation handler for the put metrics operation
	PutMetricsHandler PutMetricsHandler
	// PutMmdsHandler sets the operation handler for the put mmds operation
	PutMmdsHandler PutMmdsHandler
	// PutMmdsConfigHandler sets the operation handler for the put mmds config operation
	PutMmdsConfigHandler PutMmdsConfigHandler

	// ServeError is called when an error is received, there is a default handler
	// but you can set your own with this
	ServeError func(http.ResponseWriter, *http.Request, error)

	// PreServerShutdown is called before the HTTP(S) server is shutdown
	// This allows for custom functions to get executed before the HTTP(S) server stops accepting traffic
	PreServerShutdown func()

	// ServerShutdown is called when the HTTP(S) server is shut down and done
	// handling all active connections and does not accept connections any more
	ServerShutdown func()

	// Custom command line argument groups with their descriptions
	CommandLineOptionsGroups []swag.CommandLineOptionsGroup

	// User defined logger function.
	Logger func(string, ...interface{})
}

// UseRedoc for documentation at /docs
func (o *FirecrackerAPIAPI) UseRedoc() {
	o.useSwaggerUI = false
}

// UseSwaggerUI for documentation at /docs
func (o *FirecrackerAPIAPI) UseSwaggerUI() {
	o.useSwaggerUI = true
}

// SetDefaultProduces sets the default produces media type
func (o *FirecrackerAPIAPI) SetDefaultProduces(mediaType string) {
	o.defaultProduces = mediaType
}

// SetDefaultConsumes returns the default consumes media type
func (o *FirecrackerAPIAPI) SetDefaultConsumes(mediaType string) {
	o.defaultConsumes = mediaType
}

// SetSpec sets a spec that will be served for the clients.
func (o *FirecrackerAPIAPI) SetSpec(spec *loads.Document) {
	o.spec = spec
}

// DefaultProduces returns the default produces media type
func (o *FirecrackerAPIAPI) DefaultProduces() string {
	return o.defaultProduces
}

// DefaultConsumes returns the default consumes media type
func (o *FirecrackerAPIAPI) DefaultConsumes() string {
	return o.defaultConsumes
}

// Formats returns the registered string formats
func (o *FirecrackerAPIAPI) Formats() strfmt.Registry {
	return o.formats
}

// RegisterFormat registers a custom format validator
func (o *FirecrackerAPIAPI) RegisterFormat(name string, format strfmt.Format, validator strfmt.Validator) {
	o.formats.Add(name, format, validator)
}

// Validate validates the registrations in the FirecrackerAPIAPI
func (o *FirecrackerAPIAPI) Validate() error {
	var unregistered []string

	if o.JSONConsumer == nil {
		unregistered = append(unregistered, "JSONConsumer")
	}

	if o.JSONProducer == nil {
		unregistered = append(unregistered, "JSONProducer")
	}

	if o.CreateSnapshotHandler == nil {
		unregistered = append(unregistered, "CreateSnapshotHandler")
	}
	if o.CreateSyncActionHandler == nil {
		unregistered = append(unregistered, "CreateSyncActionHandler")
	}
	if o.DescribeBalloonConfigHandler == nil {
		unregistered = append(unregistered, "DescribeBalloonConfigHandler")
	}
	if o.DescribeBalloonStatsHandler == nil {
		unregistered = append(unregistered, "DescribeBalloonStatsHandler")
	}
	if o.DescribeInstanceHandler == nil {
		unregistered = append(unregistered, "DescribeInstanceHandler")
	}
	if o.GetExportVMConfigHandler == nil {
		unregistered = append(unregistered, "GetExportVMConfigHandler")
	}
	if o.GetFirecrackerVersionHandler == nil {
		unregistered = append(unregistered, "GetFirecrackerVersionHandler")
	}
	if o.GetMachineConfigurationHandler == nil {
		unregistered = append(unregistered, "GetMachineConfigurationHandler")
	}
	if o.GetMmdsHandler == nil {
		unregistered = append(unregistered, "GetMmdsHandler")
	}
	if o.LoadSnapshotHandler == nil {
		unregistered = append(unregistered, "LoadSnapshotHandler")
	}
	if o.PatchBalloonHandler == nil {
		unregistered = append(unregistered, "PatchBalloonHandler")
	}
	if o.PatchBalloonStatsIntervalHandler == nil {
		unregistered = append(unregistered, "PatchBalloonStatsIntervalHandler")
	}
	if o.PatchGuestDriveByIDHandler == nil {
		unregistered = append(unregistered, "PatchGuestDriveByIDHandler")
	}
	if o.PatchGuestNetworkInterfaceByIDHandler == nil {
		unregistered = append(unregistered, "PatchGuestNetworkInterfaceByIDHandler")
	}
	if o.PatchMachineConfigurationHandler == nil {
		unregistered = append(unregistered, "PatchMachineConfigurationHandler")
	}
	if o.PatchMmdsHandler == nil {
		unregistered = append(unregistered, "PatchMmdsHandler")
	}
	if o.PatchVMHandler == nil {
		unregistered = append(unregistered, "PatchVMHandler")
	}
	if o.PutBalloonHandler == nil {
		unregistered = append(unregistered, "PutBalloonHandler")
	}
	if o.PutCPUConfigurationHandler == nil {
		unregistered = append(unregistered, "PutCPUConfigurationHandler")
	}
	if o.PutEntropyDeviceHandler == nil {
		unregistered = append(unregistered, "PutEntropyDeviceHandler")
	}
	if o.PutGuestBootSourceHandler == nil {
		unregistered = append(unregistered, "PutGuestBootSourceHandler")
	}
	if o.PutGuestDriveByIDHandler == nil {
		unregistered = append(unregistered, "PutGuestDriveByIDHandler")
	}
	if o.PutGuestNetworkInterfaceByIDHandler == nil {
		unregistered = append(unregistered, "PutGuestNetworkInterfaceByIDHandler")
	}
	if o.PutGuestVsockHandler == nil {
		unregistered = append(unregistered, "PutGuestVsockHandler")
	}
	if o.PutLoggerHandler == nil {
		unregistered = append(unregistered, "PutLoggerHandler")
	}
	if o.PutMachineConfigurationHandler == nil {
		unregistered = append(unregistered, "PutMachineConfigurationHandler")
	}
	if o.PutMetricsHandler == nil {
		unregistered = append(unregistered, "PutMetricsHandler")
	}
	if o.PutMmdsHandler == nil {
		unregistered = append(unregistered, "PutMmdsHandler")
	}
	if o.PutMmdsConfigHandler == nil {
		unregistered = append(unregistered, "PutMmdsConfigHandler")
	}

	if len(unregistered) > 0 {
		return fmt.Errorf("missing registration: %s", strings.Join(unregistered, ", "))
	}

	return nil
}

// ServeErrorFor gets a error handler for a given operation id
func (o *FirecrackerAPIAPI) ServeErrorFor(operationID string) func(http.ResponseWriter, *http.Request, error) {
	return o.ServeError
}

// AuthenticatorsFor gets the authenticators for the specified security schemes
func (o *FirecrackerAPIAPI) AuthenticatorsFor(schemes map[string]spec.SecurityScheme) map[string]runtime.Authenticator {
	return nil
}

// Authorizer returns the registered authorizer
func (o *FirecrackerAPIAPI) Authorizer() runtime.Authorizer {
	return nil
}

// ConsumersFor gets the consumers for the specified media types.
// MIME type parameters are ignored here.
func (o *FirecrackerAPIAPI) ConsumersFor(mediaTypes []string) map[string]runtime.Consumer {
	result := make(map[string]runtime.Consumer, len(mediaTypes))
	for _, mt := range mediaTypes {
		switch mt {
		case "application/json":
			result["application/json"] = o.JSONConsumer
		}

		if c, ok := o.customConsumers[mt]; ok {
			result[mt] = c
		}
	}
	return result
}

// ProducersFor gets the producers for the specified media types.
// MIME type parameters are ignored here.
func (o *FirecrackerAPIAPI) ProducersFor(mediaTypes []string) map[string]runtime.Producer {
	result := make(map[string]runtime.Producer, len(mediaTypes))
	for _, mt := range mediaTypes {
		switch mt {
		case "application/json":
			result["application/json"] = o.JSONProducer
		}

		if p, ok := o.customProducers[mt]; ok {
			result[mt] = p
		}
	}
	return result
}

// HandlerFor gets a http.Handler for the provided operation method and path
func (o *FirecrackerAPIAPI) HandlerFor(method, path string) (http.Handler, bool) {
	if o.handlers == nil {
		return nil, false
	}
	um := strings.ToUpper(method)
	if _, ok := o.handlers[um]; !ok {
		return nil, false
	}
	if path == "/" {
		path = ""
	}
	h, ok := o.handlers[um][path]
	return h, ok
}

// Context returns the middleware context for the firecracker API API
func (o *FirecrackerAPIAPI) Context() *middleware.Context {
	if o.context == nil {
		o.context = middleware.NewRoutableContext(o.spec, o, nil)
	}

	return o.context
}

func (o *FirecrackerAPIAPI) initHandlerCache() {
	o.Context() // don't care about the result, just that the initialization happened
	if o.handlers == nil {
		o.handlers = make(map[string]map[string]http.Handler)
	}

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/snapshot/create"] = NewCreateSnapshot(o.context, o.CreateSnapshotHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/actions"] = NewCreateSyncAction(o.context, o.CreateSyncActionHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/balloon"] = NewDescribeBalloonConfig(o.context, o.DescribeBalloonConfigHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/balloon/statistics"] = NewDescribeBalloonStats(o.context, o.DescribeBalloonStatsHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"][""] = NewDescribeInstance(o.context, o.DescribeInstanceHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/vm/config"] = NewGetExportVMConfig(o.context, o.GetExportVMConfigHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/version"] = NewGetFirecrackerVersion(o.context, o.GetFirecrackerVersionHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/machine-config"] = NewGetMachineConfiguration(o.context, o.GetMachineConfigurationHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/mmds"] = NewGetMmds(o.context, o.GetMmdsHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/snapshot/load"] = NewLoadSnapshot(o.context, o.LoadSnapshotHandler)
	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/balloon"] = NewPatchBalloon(o.context, o.PatchBalloonHandler)
	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/balloon/statistics"] = NewPatchBalloonStatsInterval(o.context, o.PatchBalloonStatsIntervalHandler)
	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/drives/{drive_id}"] = NewPatchGuestDriveByID(o.context, o.PatchGuestDriveByIDHandler)
	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/network-interfaces/{iface_id}"] = NewPatchGuestNetworkInterfaceByID(o.context, o.PatchGuestNetworkInterfaceByIDHandler)
	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/machine-config"] = NewPatchMachineConfiguration(o.context, o.PatchMachineConfigurationHandler)
	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/mmds"] = NewPatchMmds(o.context, o.PatchMmdsHandler)
	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/vm"] = NewPatchVM(o.context, o.PatchVMHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/balloon"] = NewPutBalloon(o.context, o.PutBalloonHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/cpu-config"] = NewPutCPUConfiguration(o.context, o.PutCPUConfigurationHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/entropy"] = NewPutEntropyDevice(o.context, o.PutEntropyDeviceHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/boot-source"] = NewPutGuestBootSource(o.context, o.PutGuestBootSourceHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/drives/{drive_id}"] = NewPutGuestDriveByID(o.context, o.PutGuestDriveByIDHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/network-interfaces/{iface_id}"] = NewPutGuestNetworkInterfaceByID(o.context, o.PutGuestNetworkInterfaceByIDHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/vsock"] = NewPutGuestVsock(o.context, o.PutGuestVsockHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/logger"] = NewPutLogger(o.context, o.PutLoggerHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/machine-config"] = NewPutMachineConfiguration(o.context, o.PutMachineConfigurationHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/metrics"] = NewPutMetrics(o.context, o.PutMetricsHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/mmds"] = NewPutMmds(o.context, o.PutMmdsHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/mmds/config"] = NewPutMmdsConfig(o.context, o.PutMmdsConfigHandler)
}

// Serve creates a http handler to serve the API over HTTP
// can be used directly in http.ListenAndServe(":8000", api.Serve(nil))
func (o *FirecrackerAPIAPI) Serve(builder middleware.Builder) http.Handler {
	o.Init()

	if o.Middleware != nil {
		return o.Middleware(builder)
	}
	if o.useSwaggerUI {
		return o.context.APIHandlerSwaggerUI(builder)
	}
	return o.context.APIHandler(builder)
}

// Init allows you to just initialize the handler cache, you can then recompose the middleware as you see fit
func (o *FirecrackerAPIAPI) Init() {
	if len(o.handlers) == 0 {
		o.initHandlerCache()
	}
}

// RegisterConsumer allows you to add (or override) a consumer for a media type.
func (o *FirecrackerAPIAPI) RegisterConsumer(mediaType string, consumer runtime.Consumer) {
	o.customConsumers[mediaType] = consumer
}

// RegisterProducer allows you to add (or override) a producer for a media type.
func (o *FirecrackerAPIAPI) RegisterProducer(mediaType string, producer runtime.Producer) {
	o.customProducers[mediaType] = producer
}

// AddMiddlewareFor adds a http middleware to existing handler
func (o *FirecrackerAPIAPI) AddMiddlewareFor(method, path string, builder middleware.Builder) {
	um := strings.ToUpper(method)
	if path == "/" {
		path = ""
	}
	o.Init()
	if h, ok := o.handlers[um][path]; ok {
		o.handlers[um][path] = builder(h)
	}
}

// NewSwaggerAPI builds the API server wiring all operations to your implementation.
func NewSwaggerAPI(spec *loads.Document, impl FirecrackerAPI) *FirecrackerAPIAPI {
	api := NewFirecrackerAPIAPI(spec)

	// Wire each operation handler to the corresponding method on impl

	api.CreateSnapshotHandler = CreateSnapshotHandlerFunc(impl.CreateSnapshot)
	api.CreateSyncActionHandler = CreateSyncActionHandlerFunc(impl.CreateSyncAction)
	api.DescribeBalloonConfigHandler = DescribeBalloonConfigHandlerFunc(impl.DescribeBalloonConfig)
	api.DescribeBalloonStatsHandler = DescribeBalloonStatsHandlerFunc(impl.DescribeBalloonStats)
	api.DescribeInstanceHandler = DescribeInstanceHandlerFunc(impl.DescribeInstance)
	api.GetExportVMConfigHandler = GetExportVMConfigHandlerFunc(impl.GetExportVMConfig)
	api.GetFirecrackerVersionHandler = GetFirecrackerVersionHandlerFunc(impl.GetFirecrackerVersion)
	api.GetMachineConfigurationHandler = GetMachineConfigurationHandlerFunc(impl.GetMachineConfiguration)
	api.GetMmdsHandler = GetMmdsHandlerFunc(impl.GetMmds)
	api.LoadSnapshotHandler = LoadSnapshotHandlerFunc(impl.LoadSnapshot)
	api.PatchBalloonHandler = PatchBalloonHandlerFunc(impl.PatchBalloon)
	api.PatchBalloonStatsIntervalHandler = PatchBalloonStatsIntervalHandlerFunc(impl.PatchBalloonStatsInterval)
	api.PatchGuestDriveByIDHandler = PatchGuestDriveByIDHandlerFunc(impl.PatchGuestDriveByID)
	api.PatchGuestNetworkInterfaceByIDHandler = PatchGuestNetworkInterfaceByIDHandlerFunc(impl.PatchGuestNetworkInterfaceByID)
	api.PatchMachineConfigurationHandler = PatchMachineConfigurationHandlerFunc(impl.PatchMachineConfiguration)
	api.PatchMmdsHandler = PatchMmdsHandlerFunc(impl.PatchMmds)
	api.PatchVMHandler = PatchVMHandlerFunc(impl.PatchVM)
	api.PutBalloonHandler = PutBalloonHandlerFunc(impl.PutBalloon)
	api.PutCPUConfigurationHandler = PutCPUConfigurationHandlerFunc(impl.PutCPUConfiguration)
	api.PutEntropyDeviceHandler = PutEntropyDeviceHandlerFunc(impl.PutEntropyDevice)
	api.PutGuestBootSourceHandler = PutGuestBootSourceHandlerFunc(impl.PutGuestBootSource)
	api.PutGuestDriveByIDHandler = PutGuestDriveByIDHandlerFunc(impl.PutGuestDriveByID)
	api.PutGuestNetworkInterfaceByIDHandler = PutGuestNetworkInterfaceByIDHandlerFunc(impl.PutGuestNetworkInterfaceByID)
	api.PutGuestVsockHandler = PutGuestVsockHandlerFunc(impl.PutGuestVsock)
	api.PutLoggerHandler = PutLoggerHandlerFunc(impl.PutLogger)
	api.PutMachineConfigurationHandler = PutMachineConfigurationHandlerFunc(impl.PutMachineConfiguration)
	api.PutMetricsHandler = PutMetricsHandlerFunc(impl.PutMetrics)
	api.PutMmdsHandler = PutMmdsHandlerFunc(impl.PutMmds)
	api.PutMmdsConfigHandler = PutMmdsConfigHandlerFunc(impl.PutMmdsConfig)

	return api
}

// FirecrackerAPI defines your service interface for all
type FirecrackerAPI interface {

	// CreateSnapshot handles the CreateSnapshot operation.
	CreateSnapshot(params CreateSnapshotParams) CreateSnapshotResponder
	// CreateSyncAction handles the CreateSyncAction operation.
	CreateSyncAction(params CreateSyncActionParams) CreateSyncActionResponder
	// DescribeBalloonConfig handles the DescribeBalloonConfig operation.
	DescribeBalloonConfig(params DescribeBalloonConfigParams) DescribeBalloonConfigResponder
	// DescribeBalloonStats handles the DescribeBalloonStats operation.
	DescribeBalloonStats(params DescribeBalloonStatsParams) DescribeBalloonStatsResponder
	// DescribeInstance handles the DescribeInstance operation.
	DescribeInstance(params DescribeInstanceParams) DescribeInstanceResponder
	// GetExportVMConfig handles the GetExportVMConfig operation.
	GetExportVMConfig(params GetExportVMConfigParams) GetExportVMConfigResponder
	// GetFirecrackerVersion handles the GetFirecrackerVersion operation.
	GetFirecrackerVersion(params GetFirecrackerVersionParams) GetFirecrackerVersionResponder
	// GetMachineConfiguration handles the GetMachineConfiguration operation.
	GetMachineConfiguration(params GetMachineConfigurationParams) GetMachineConfigurationResponder
	// GetMmds handles the GetMmds operation.
	GetMmds(params GetMmdsParams) GetMmdsResponder
	// LoadSnapshot handles the LoadSnapshot operation.
	LoadSnapshot(params LoadSnapshotParams) LoadSnapshotResponder
	// PatchBalloon handles the PatchBalloon operation.
	PatchBalloon(params PatchBalloonParams) PatchBalloonResponder
	// PatchBalloonStatsInterval handles the PatchBalloonStatsInterval operation.
	PatchBalloonStatsInterval(params PatchBalloonStatsIntervalParams) PatchBalloonStatsIntervalResponder
	// PatchGuestDriveByID handles the PatchGuestDriveByID operation.
	PatchGuestDriveByID(params PatchGuestDriveByIDParams) PatchGuestDriveByIDResponder
	// PatchGuestNetworkInterfaceByID handles the PatchGuestNetworkInterfaceByID operation.
	PatchGuestNetworkInterfaceByID(params PatchGuestNetworkInterfaceByIDParams) PatchGuestNetworkInterfaceByIDResponder
	// PatchMachineConfiguration handles the PatchMachineConfiguration operation.
	PatchMachineConfiguration(params PatchMachineConfigurationParams) PatchMachineConfigurationResponder
	// PatchMmds handles the PatchMmds operation.
	PatchMmds(params PatchMmdsParams) PatchMmdsResponder
	// PatchVM handles the PatchVM operation.
	PatchVM(params PatchVMParams) PatchVMResponder
	// PutBalloon handles the PutBalloon operation.
	PutBalloon(params PutBalloonParams) PutBalloonResponder
	// PutCPUConfiguration handles the PutCPUConfiguration operation.
	PutCPUConfiguration(params PutCPUConfigurationParams) PutCPUConfigurationResponder
	// PutEntropyDevice handles the PutEntropyDevice operation.
	PutEntropyDevice(params PutEntropyDeviceParams) PutEntropyDeviceResponder
	// PutGuestBootSource handles the PutGuestBootSource operation.
	PutGuestBootSource(params PutGuestBootSourceParams) PutGuestBootSourceResponder
	// PutGuestDriveByID handles the PutGuestDriveByID operation.
	PutGuestDriveByID(params PutGuestDriveByIDParams) PutGuestDriveByIDResponder
	// PutGuestNetworkInterfaceByID handles the PutGuestNetworkInterfaceByID operation.
	PutGuestNetworkInterfaceByID(params PutGuestNetworkInterfaceByIDParams) PutGuestNetworkInterfaceByIDResponder
	// PutGuestVsock handles the PutGuestVsock operation.
	PutGuestVsock(params PutGuestVsockParams) PutGuestVsockResponder
	// PutLogger handles the PutLogger operation.
	PutLogger(params PutLoggerParams) PutLoggerResponder
	// PutMachineConfiguration handles the PutMachineConfiguration operation.
	PutMachineConfiguration(params PutMachineConfigurationParams) PutMachineConfigurationResponder
	// PutMetrics handles the PutMetrics operation.
	PutMetrics(params PutMetricsParams) PutMetricsResponder
	// PutMmds handles the PutMmds operation.
	PutMmds(params PutMmdsParams) PutMmdsResponder
	// PutMmdsConfig handles the PutMmdsConfig operation.
	PutMmdsConfig(params PutMmdsConfigParams) PutMmdsConfigResponder
}

// UnimplementedFirecrackerAPI provides default stub implementations.
type UnimplementedFirecrackerAPI struct{}

// CreateSnapshot returns a NotImplemented response.
func (u *UnimplementedFirecrackerAPI) CreateSnapshot(params CreateSnapshotParams) CreateSnapshotResponder {
	return CreateSnapshotNotImplemented()
}

// CreateSyncAction returns a NotImplemented response.
func (u *UnimplementedFirecrackerAPI) CreateSyncAction(params CreateSyncActionParams) CreateSyncActionResponder {
	return CreateSyncActionNotImplemented()
}

// DescribeBalloonConfig returns a NotImplemented response.
func (u *UnimplementedFirecrackerAPI) DescribeBalloonConfig(params DescribeBalloonConfigParams) DescribeBalloonConfigResponder {
	return DescribeBalloonConfigNotImplemented()
}

// DescribeBalloonStats returns a NotImplemented response.
func (u *UnimplementedFirecrackerAPI) DescribeBalloonStats(params DescribeBalloonStatsParams) DescribeBalloonStatsResponder {
	return DescribeBalloonStatsNotImplemented()
}

// DescribeInstance returns a NotImplemented response.
func (u *UnimplementedFirecrackerAPI) DescribeInstance(params DescribeInstanceParams) DescribeInstanceResponder {
	return DescribeInstanceNotImplemented()
}

// GetExportVMConfig returns a NotImplemented response.
func (u *UnimplementedFirecrackerAPI) GetExportVMConfig(params GetExportVMConfigParams) GetExportVMConfigResponder {
	return GetExportVMConfigNotImplemented()
}

// GetFirecrackerVersion returns a NotImplemented response.
func (u *UnimplementedFirecrackerAPI) GetFirecrackerVersion(params GetFirecrackerVersionParams) GetFirecrackerVersionResponder {
	return GetFirecrackerVersionNotImplemented()
}

// GetMachineConfiguration returns a NotImplemented response.
func (u *UnimplementedFirecrackerAPI) GetMachineConfiguration(params GetMachineConfigurationParams) GetMachineConfigurationResponder {
	return GetMachineConfigurationNotImplemented()
}

// GetMmds returns a NotImplemented response.
func (u *UnimplementedFirecrackerAPI) GetMmds(params GetMmdsParams) GetMmdsResponder {
	return GetMmdsNotImplemented()
}

// LoadSnapshot returns a NotImplemented response.
func (u *UnimplementedFirecrackerAPI) LoadSnapshot(params LoadSnapshotParams) LoadSnapshotResponder {
	return LoadSnapshotNotImplemented()
}

// PatchBalloon returns a NotImplemented response.
func (u *UnimplementedFirecrackerAPI) PatchBalloon(params PatchBalloonParams) PatchBalloonResponder {
	return PatchBalloonNotImplemented()
}

// PatchBalloonStatsInterval returns a NotImplemented response.
func (u *UnimplementedFirecrackerAPI) PatchBalloonStatsInterval(params PatchBalloonStatsIntervalParams) PatchBalloonStatsIntervalResponder {
	return PatchBalloonStatsIntervalNotImplemented()
}

// PatchGuestDriveByID returns a NotImplemented response.
func (u *UnimplementedFirecrackerAPI) PatchGuestDriveByID(params PatchGuestDriveByIDParams) PatchGuestDriveByIDResponder {
	return PatchGuestDriveByIDNotImplemented()
}

// PatchGuestNetworkInterfaceByID returns a NotImplemented response.
func (u *UnimplementedFirecrackerAPI) PatchGuestNetworkInterfaceByID(params PatchGuestNetworkInterfaceByIDParams) PatchGuestNetworkInterfaceByIDResponder {
	return PatchGuestNetworkInterfaceByIDNotImplemented()
}

// PatchMachineConfiguration returns a NotImplemented response.
func (u *UnimplementedFirecrackerAPI) PatchMachineConfiguration(params PatchMachineConfigurationParams) PatchMachineConfigurationResponder {
	return PatchMachineConfigurationNotImplemented()
}

// PatchMmds returns a NotImplemented response.
func (u *UnimplementedFirecrackerAPI) PatchMmds(params PatchMmdsParams) PatchMmdsResponder {
	return PatchMmdsNotImplemented()
}

// PatchVM returns a NotImplemented response.
func (u *UnimplementedFirecrackerAPI) PatchVM(params PatchVMParams) PatchVMResponder {
	return PatchVMNotImplemented()
}

// PutBalloon returns a NotImplemented response.
func (u *UnimplementedFirecrackerAPI) PutBalloon(params PutBalloonParams) PutBalloonResponder {
	return PutBalloonNotImplemented()
}

// PutCPUConfiguration returns a NotImplemented response.
func (u *UnimplementedFirecrackerAPI) PutCPUConfiguration(params PutCPUConfigurationParams) PutCPUConfigurationResponder {
	return PutCPUConfigurationNotImplemented()
}

// PutEntropyDevice returns a NotImplemented response.
func (u *UnimplementedFirecrackerAPI) PutEntropyDevice(params PutEntropyDeviceParams) PutEntropyDeviceResponder {
	return PutEntropyDeviceNotImplemented()
}

// PutGuestBootSource returns a NotImplemented response.
func (u *UnimplementedFirecrackerAPI) PutGuestBootSource(params PutGuestBootSourceParams) PutGuestBootSourceResponder {
	return PutGuestBootSourceNotImplemented()
}

// PutGuestDriveByID returns a NotImplemented response.
func (u *UnimplementedFirecrackerAPI) PutGuestDriveByID(params PutGuestDriveByIDParams) PutGuestDriveByIDResponder {
	return PutGuestDriveByIDNotImplemented()
}

// PutGuestNetworkInterfaceByID returns a NotImplemented response.
func (u *UnimplementedFirecrackerAPI) PutGuestNetworkInterfaceByID(params PutGuestNetworkInterfaceByIDParams) PutGuestNetworkInterfaceByIDResponder {
	return PutGuestNetworkInterfaceByIDNotImplemented()
}

// PutGuestVsock returns a NotImplemented response.
func (u *UnimplementedFirecrackerAPI) PutGuestVsock(params PutGuestVsockParams) PutGuestVsockResponder {
	return PutGuestVsockNotImplemented()
}

// PutLogger returns a NotImplemented response.
func (u *UnimplementedFirecrackerAPI) PutLogger(params PutLoggerParams) PutLoggerResponder {
	return PutLoggerNotImplemented()
}

// PutMachineConfiguration returns a NotImplemented response.
func (u *UnimplementedFirecrackerAPI) PutMachineConfiguration(params PutMachineConfigurationParams) PutMachineConfigurationResponder {
	return PutMachineConfigurationNotImplemented()
}

// PutMetrics returns a NotImplemented response.
func (u *UnimplementedFirecrackerAPI) PutMetrics(params PutMetricsParams) PutMetricsResponder {
	return PutMetricsNotImplemented()
}

// PutMmds returns a NotImplemented response.
func (u *UnimplementedFirecrackerAPI) PutMmds(params PutMmdsParams) PutMmdsResponder {
	return PutMmdsNotImplemented()
}

// PutMmdsConfig returns a NotImplemented response.
func (u *UnimplementedFirecrackerAPI) PutMmdsConfig(params PutMmdsConfigParams) PutMmdsConfigResponder {
	return PutMmdsConfigNotImplemented()
}
