// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"

	"github.com/walteh/ec1/gen/firecracker-swagger-go/models"
)

// PutLoggerNoContentCode is the HTTP code returned for type PutLoggerNoContent
const PutLoggerNoContentCode int = 204

/*
PutLoggerNoContent Logger created.

swagger:response putLoggerNoContent
*/
type PutLoggerNoContent struct {
}

// NewPutLoggerNoContent creates PutLoggerNoContent with default headers values
func NewPutLoggerNoContent() *PutLoggerNoContent {

	return &PutLoggerNoContent{}
}

// WriteResponse to the client
func (o *PutLoggerNoContent) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(204)
}

func (o *PutLoggerNoContent) PutLoggerResponder() {}

// PutLoggerBadRequestCode is the HTTP code returned for type PutLoggerBadRequest
const PutLoggerBadRequestCode int = 400

/*
PutLoggerBadRequest Logger cannot be initialized due to bad input.

swagger:response putLoggerBadRequest
*/
type PutLoggerBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewPutLoggerBadRequest creates PutLoggerBadRequest with default headers values
func NewPutLoggerBadRequest() *PutLoggerBadRequest {

	return &PutLoggerBadRequest{}
}

// WithPayload adds the payload to the put logger bad request response
func (o *PutLoggerBadRequest) WithPayload(payload *models.Error) *PutLoggerBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the put logger bad request response
func (o *PutLoggerBadRequest) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PutLoggerBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

func (o *PutLoggerBadRequest) PutLoggerResponder() {}

/*
PutLoggerDefault Internal server error.

swagger:response putLoggerDefault
*/
type PutLoggerDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewPutLoggerDefault creates PutLoggerDefault with default headers values
func NewPutLoggerDefault(code int) *PutLoggerDefault {
	if code <= 0 {
		code = 500
	}

	return &PutLoggerDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the put logger default response
func (o *PutLoggerDefault) WithStatusCode(code int) *PutLoggerDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the put logger default response
func (o *PutLoggerDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the put logger default response
func (o *PutLoggerDefault) WithPayload(payload *models.Error) *PutLoggerDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the put logger default response
func (o *PutLoggerDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PutLoggerDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

func (o *PutLoggerDefault) PutLoggerResponder() {}

type PutLoggerNotImplementedResponder struct {
	middleware.Responder
}

func (*PutLoggerNotImplementedResponder) PutLoggerResponder() {}

func PutLoggerNotImplemented() PutLoggerResponder {
	return &PutLoggerNotImplementedResponder{
		middleware.NotImplemented(
			"operation authentication.PutLogger has not yet been implemented",
		),
	}
}

type PutLoggerResponder interface {
	middleware.Responder
	PutLoggerResponder()
}
