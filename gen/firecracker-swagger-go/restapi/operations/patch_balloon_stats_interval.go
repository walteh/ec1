// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// PatchBalloonStatsIntervalHandlerFunc turns a function with the right signature into a patch balloon stats interval handler
type PatchBalloonStatsIntervalHandlerFunc func(PatchBalloonStatsIntervalParams) PatchBalloonStatsIntervalResponder

// Handle executing the request and returning a response
func (fn PatchBalloonStatsIntervalHandlerFunc) Handle(params PatchBalloonStatsIntervalParams) PatchBalloonStatsIntervalResponder {
	return fn(params)
}

// PatchBalloonStatsIntervalHandler interface for that can handle valid patch balloon stats interval params
type PatchBalloonStatsIntervalHandler interface {
	Handle(PatchBalloonStatsIntervalParams) PatchBalloonStatsIntervalResponder
}

// NewPatchBalloonStatsInterval creates a new http.Handler for the patch balloon stats interval operation
func NewPatchBalloonStatsInterval(ctx *middleware.Context, handler PatchBalloonStatsIntervalHandler) *PatchBalloonStatsInterval {
	return &PatchBalloonStatsInterval{Context: ctx, Handler: handler}
}

/*
	PatchBalloonStatsInterval swagger:route PATCH /balloon/statistics patchBalloonStatsInterval

Updates a balloon device statistics polling interval.

Updates an existing balloon device statistics interval, before or after machine startup. Will fail if update is not possible.
*/
type PatchBalloonStatsInterval struct {
	Context *middleware.Context
	Handler PatchBalloonStatsIntervalHandler
}

func (o *PatchBalloonStatsInterval) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewPatchBalloonStatsIntervalParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
