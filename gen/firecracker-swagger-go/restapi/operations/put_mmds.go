// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// PutMmdsHandlerFunc turns a function with the right signature into a put mmds handler
type PutMmdsHandlerFunc func(PutMmdsParams) PutMmdsResponder

// Handle executing the request and returning a response
func (fn PutMmdsHandlerFunc) Handle(params PutMmdsParams) PutMmdsResponder {
	return fn(params)
}

// PutMmdsHandler interface for that can handle valid put mmds params
type PutMmdsHandler interface {
	Handle(PutMmdsParams) PutMmdsResponder
}

// NewPutMmds creates a new http.Handler for the put mmds operation
func NewPutMmds(ctx *middleware.Context, handler PutMmdsHandler) *PutMmds {
	return &PutMmds{Context: ctx, Handler: handler}
}

/*
	PutMmds swagger:route PUT /mmds putMmds

Creates a MMDS (Microvm Metadata Service) data store.
*/
type PutMmds struct {
	Context *middleware.Context
	Handler PutMmdsHandler
}

func (o *PutMmds) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewPutMmdsParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
