// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"

	"github.com/walteh/ec1/gen/firecracker-swagger-go/models"
)

// PutMetricsNoContentCode is the HTTP code returned for type PutMetricsNoContent
const PutMetricsNoContentCode int = 204

/*
PutMetricsNoContent Metrics system created.

swagger:response putMetricsNoContent
*/
type PutMetricsNoContent struct {
}

// NewPutMetricsNoContent creates PutMetricsNoContent with default headers values
func NewPutMetricsNoContent() *PutMetricsNoContent {

	return &PutMetricsNoContent{}
}

// WriteResponse to the client
func (o *PutMetricsNoContent) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(204)
}

func (o *PutMetricsNoContent) PutMetricsResponder() {}

// PutMetricsBadRequestCode is the HTTP code returned for type PutMetricsBadRequest
const PutMetricsBadRequestCode int = 400

/*
PutMetricsBadRequest Metrics system cannot be initialized due to bad input request or metrics system already initialized.

swagger:response putMetricsBadRequest
*/
type PutMetricsBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewPutMetricsBadRequest creates PutMetricsBadRequest with default headers values
func NewPutMetricsBadRequest() *PutMetricsBadRequest {

	return &PutMetricsBadRequest{}
}

// WithPayload adds the payload to the put metrics bad request response
func (o *PutMetricsBadRequest) WithPayload(payload *models.Error) *PutMetricsBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the put metrics bad request response
func (o *PutMetricsBadRequest) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PutMetricsBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

func (o *PutMetricsBadRequest) PutMetricsResponder() {}

/*
PutMetricsDefault Internal server error.

swagger:response putMetricsDefault
*/
type PutMetricsDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewPutMetricsDefault creates PutMetricsDefault with default headers values
func NewPutMetricsDefault(code int) *PutMetricsDefault {
	if code <= 0 {
		code = 500
	}

	return &PutMetricsDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the put metrics default response
func (o *PutMetricsDefault) WithStatusCode(code int) *PutMetricsDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the put metrics default response
func (o *PutMetricsDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the put metrics default response
func (o *PutMetricsDefault) WithPayload(payload *models.Error) *PutMetricsDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the put metrics default response
func (o *PutMetricsDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PutMetricsDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

func (o *PutMetricsDefault) PutMetricsResponder() {}

type PutMetricsNotImplementedResponder struct {
	middleware.Responder
}

func (*PutMetricsNotImplementedResponder) PutMetricsResponder() {}

func PutMetricsNotImplemented() PutMetricsResponder {
	return &PutMetricsNotImplementedResponder{
		middleware.NotImplemented(
			"operation authentication.PutMetrics has not yet been implemented",
		),
	}
}

type PutMetricsResponder interface {
	middleware.Responder
	PutMetricsResponder()
}
