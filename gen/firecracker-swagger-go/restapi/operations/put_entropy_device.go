// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// PutEntropyDeviceHandlerFunc turns a function with the right signature into a put entropy device handler
type PutEntropyDeviceHandlerFunc func(PutEntropyDeviceParams) PutEntropyDeviceResponder

// Handle executing the request and returning a response
func (fn PutEntropyDeviceHandlerFunc) Handle(params PutEntropyDeviceParams) PutEntropyDeviceResponder {
	return fn(params)
}

// PutEntropyDeviceHandler interface for that can handle valid put entropy device params
type PutEntropyDeviceHandler interface {
	Handle(PutEntropyDeviceParams) PutEntropyDeviceResponder
}

// NewPutEntropyDevice creates a new http.Handler for the put entropy device operation
func NewPutEntropyDevice(ctx *middleware.Context, handler PutEntropyDeviceHandler) *PutEntropyDevice {
	return &PutEntropyDevice{Context: ctx, Handler: handler}
}

/*
	PutEntropyDevice swagger:route PUT /entropy putEntropyDevice

Creates an entropy device. Pre-boot only.

Enables an entropy device that provides high-quality random data to the guest.
*/
type PutEntropyDevice struct {
	Context *middleware.Context
	Handler PutEntropyDeviceHandler
}

func (o *PutEntropyDevice) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewPutEntropyDeviceParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
