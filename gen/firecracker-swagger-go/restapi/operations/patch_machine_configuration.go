// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// PatchMachineConfigurationHandlerFunc turns a function with the right signature into a patch machine configuration handler
type PatchMachineConfigurationHandlerFunc func(PatchMachineConfigurationParams) PatchMachineConfigurationResponder

// Handle executing the request and returning a response
func (fn PatchMachineConfigurationHandlerFunc) Handle(params PatchMachineConfigurationParams) PatchMachineConfigurationResponder {
	return fn(params)
}

// PatchMachineConfigurationHandler interface for that can handle valid patch machine configuration params
type PatchMachineConfigurationHandler interface {
	Handle(PatchMachineConfigurationParams) PatchMachineConfigurationResponder
}

// NewPatchMachineConfiguration creates a new http.Handler for the patch machine configuration operation
func NewPatchMachineConfiguration(ctx *middleware.Context, handler PatchMachineConfigurationHandler) *PatchMachineConfiguration {
	return &PatchMachineConfiguration{Context: ctx, Handler: handler}
}

/*
	PatchMachineConfiguration swagger:route PATCH /machine-config patchMachineConfiguration

Partially updates the Machine Configuration of the VM. Pre-boot only.

Partially updates the Virtual Machine Configuration with the specified input. If any of the parameters has an incorrect value, the whole update fails.
*/
type PatchMachineConfiguration struct {
	Context *middleware.Context
	Handler PatchMachineConfigurationHandler
}

func (o *PatchMachineConfiguration) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewPatchMachineConfigurationParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
