// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"

	"github.com/walteh/ec1/gen/firecracker-swagger-go/models"
)

// PutBalloonNoContentCode is the HTTP code returned for type PutBalloonNoContent
const PutBalloonNoContentCode int = 204

/*
PutBalloonNoContent Balloon device created/updated

swagger:response putBalloonNoContent
*/
type PutBalloonNoContent struct {
}

// NewPutBalloonNoContent creates PutBalloonNoContent with default headers values
func NewPutBalloonNoContent() *PutBalloonNoContent {

	return &PutBalloonNoContent{}
}

// WriteResponse to the client
func (o *PutBalloonNoContent) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(204)
}

func (o *PutBalloonNoContent) PutBalloonResponder() {}

// PutBalloonBadRequestCode is the HTTP code returned for type PutBalloonBadRequest
const PutBalloonBadRequestCode int = 400

/*
PutBalloonBadRequest Balloon device cannot be created/updated due to bad input

swagger:response putBalloonBadRequest
*/
type PutBalloonBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewPutBalloonBadRequest creates PutBalloonBadRequest with default headers values
func NewPutBalloonBadRequest() *PutBalloonBadRequest {

	return &PutBalloonBadRequest{}
}

// WithPayload adds the payload to the put balloon bad request response
func (o *PutBalloonBadRequest) WithPayload(payload *models.Error) *PutBalloonBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the put balloon bad request response
func (o *PutBalloonBadRequest) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PutBalloonBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

func (o *PutBalloonBadRequest) PutBalloonResponder() {}

/*
PutBalloonDefault Internal server error

swagger:response putBalloonDefault
*/
type PutBalloonDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewPutBalloonDefault creates PutBalloonDefault with default headers values
func NewPutBalloonDefault(code int) *PutBalloonDefault {
	if code <= 0 {
		code = 500
	}

	return &PutBalloonDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the put balloon default response
func (o *PutBalloonDefault) WithStatusCode(code int) *PutBalloonDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the put balloon default response
func (o *PutBalloonDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the put balloon default response
func (o *PutBalloonDefault) WithPayload(payload *models.Error) *PutBalloonDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the put balloon default response
func (o *PutBalloonDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PutBalloonDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

func (o *PutBalloonDefault) PutBalloonResponder() {}

type PutBalloonNotImplementedResponder struct {
	middleware.Responder
}

func (*PutBalloonNotImplementedResponder) PutBalloonResponder() {}

func PutBalloonNotImplemented() PutBalloonResponder {
	return &PutBalloonNotImplementedResponder{
		middleware.NotImplemented(
			"operation authentication.PutBalloon has not yet been implemented",
		),
	}
}

type PutBalloonResponder interface {
	middleware.Responder
	PutBalloonResponder()
}
