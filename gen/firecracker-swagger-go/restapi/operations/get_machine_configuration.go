// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GetMachineConfigurationHandlerFunc turns a function with the right signature into a get machine configuration handler
type GetMachineConfigurationHandlerFunc func(GetMachineConfigurationParams) GetMachineConfigurationResponder

// Handle executing the request and returning a response
func (fn GetMachineConfigurationHandlerFunc) Handle(params GetMachineConfigurationParams) GetMachineConfigurationResponder {
	return fn(params)
}

// GetMachineConfigurationHandler interface for that can handle valid get machine configuration params
type GetMachineConfigurationHandler interface {
	Handle(GetMachineConfigurationParams) GetMachineConfigurationResponder
}

// NewGetMachineConfiguration creates a new http.Handler for the get machine configuration operation
func NewGetMachineConfiguration(ctx *middleware.Context, handler GetMachineConfigurationHandler) *GetMachineConfiguration {
	return &GetMachineConfiguration{Context: ctx, Handler: handler}
}

/*
	GetMachineConfiguration swagger:route GET /machine-config getMachineConfiguration

Gets the machine configuration of the VM.

Gets the machine configuration of the VM. When called before the PUT operation, it will return the default values for the vCPU count (=1), memory size (=128 MiB). By default SMT is disabled and there is no CPU Template.
*/
type GetMachineConfiguration struct {
	Context *middleware.Context
	Handler GetMachineConfigurationHandler
}

func (o *GetMachineConfiguration) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetMachineConfigurationParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
