// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// PutBalloonHandlerFunc turns a function with the right signature into a put balloon handler
type PutBalloonHandlerFunc func(PutBalloonParams) PutBalloonResponder

// Handle executing the request and returning a response
func (fn PutBalloonHandlerFunc) Handle(params PutBalloonParams) PutBalloonResponder {
	return fn(params)
}

// PutBalloonHandler interface for that can handle valid put balloon params
type PutBalloonHandler interface {
	Handle(PutBalloonParams) PutBalloonResponder
}

// NewPutBalloon creates a new http.Handler for the put balloon operation
func NewPutBalloon(ctx *middleware.Context, handler PutBalloonHandler) *PutBalloon {
	return &PutBalloon{Context: ctx, Handler: handler}
}

/*
	PutBalloon swagger:route PUT /balloon putBalloon

Creates or updates a balloon device.

Creates a new balloon device if one does not already exist, otherwise updates it, before machine startup. This will fail after machine startup. Will fail if update is not possible.
*/
type PutBalloon struct {
	Context *middleware.Context
	Handler PutBalloonHandler
}

func (o *PutBalloon) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewPutBalloonParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
