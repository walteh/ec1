// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"

	"github.com/walteh/ec1/gen/firecracker-swagger-go/models"
)

// PatchMmdsNoContentCode is the HTTP code returned for type PatchMmdsNoContent
const PatchMmdsNoContentCode int = 204

/*
PatchMmdsNoContent MMDS data store updated.

swagger:response patchMmdsNoContent
*/
type PatchMmdsNoContent struct {
}

// NewPatchMmdsNoContent creates PatchMmdsNoContent with default headers values
func NewPatchMmdsNoContent() *PatchMmdsNoContent {

	return &PatchMmdsNoContent{}
}

// WriteResponse to the client
func (o *PatchMmdsNoContent) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(204)
}

func (o *PatchMmdsNoContent) PatchMmdsResponder() {}

// PatchMmdsBadRequestCode is the HTTP code returned for type PatchMmdsBadRequest
const PatchMmdsBadRequestCode int = 400

/*
PatchMmdsBadRequest MMDS data store cannot be updated due to bad input.

swagger:response patchMmdsBadRequest
*/
type PatchMmdsBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewPatchMmdsBadRequest creates PatchMmdsBadRequest with default headers values
func NewPatchMmdsBadRequest() *PatchMmdsBadRequest {

	return &PatchMmdsBadRequest{}
}

// WithPayload adds the payload to the patch mmds bad request response
func (o *PatchMmdsBadRequest) WithPayload(payload *models.Error) *PatchMmdsBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the patch mmds bad request response
func (o *PatchMmdsBadRequest) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PatchMmdsBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

func (o *PatchMmdsBadRequest) PatchMmdsResponder() {}

/*
PatchMmdsDefault Internal server error

swagger:response patchMmdsDefault
*/
type PatchMmdsDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewPatchMmdsDefault creates PatchMmdsDefault with default headers values
func NewPatchMmdsDefault(code int) *PatchMmdsDefault {
	if code <= 0 {
		code = 500
	}

	return &PatchMmdsDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the patch mmds default response
func (o *PatchMmdsDefault) WithStatusCode(code int) *PatchMmdsDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the patch mmds default response
func (o *PatchMmdsDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the patch mmds default response
func (o *PatchMmdsDefault) WithPayload(payload *models.Error) *PatchMmdsDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the patch mmds default response
func (o *PatchMmdsDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PatchMmdsDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

func (o *PatchMmdsDefault) PatchMmdsResponder() {}

type PatchMmdsNotImplementedResponder struct {
	middleware.Responder
}

func (*PatchMmdsNotImplementedResponder) PatchMmdsResponder() {}

func PatchMmdsNotImplemented() PatchMmdsResponder {
	return &PatchMmdsNotImplementedResponder{
		middleware.NotImplemented(
			"operation authentication.PatchMmds has not yet been implemented",
		),
	}
}

type PatchMmdsResponder interface {
	middleware.Responder
	PatchMmdsResponder()
}
