// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// PutGuestNetworkInterfaceByIDHandlerFunc turns a function with the right signature into a put guest network interface by ID handler
type PutGuestNetworkInterfaceByIDHandlerFunc func(PutGuestNetworkInterfaceByIDParams) PutGuestNetworkInterfaceByIDResponder

// Handle executing the request and returning a response
func (fn PutGuestNetworkInterfaceByIDHandlerFunc) Handle(params PutGuestNetworkInterfaceByIDParams) PutGuestNetworkInterfaceByIDResponder {
	return fn(params)
}

// PutGuestNetworkInterfaceByIDHandler interface for that can handle valid put guest network interface by ID params
type PutGuestNetworkInterfaceByIDHandler interface {
	Handle(PutGuestNetworkInterfaceByIDParams) PutGuestNetworkInterfaceByIDResponder
}

// NewPutGuestNetworkInterfaceByID creates a new http.Handler for the put guest network interface by ID operation
func NewPutGuestNetworkInterfaceByID(ctx *middleware.Context, handler PutGuestNetworkInterfaceByIDHandler) *PutGuestNetworkInterfaceByID {
	return &PutGuestNetworkInterfaceByID{Context: ctx, Handler: handler}
}

/*
	PutGuestNetworkInterfaceByID swagger:route PUT /network-interfaces/{iface_id} putGuestNetworkInterfaceById

Creates a network interface. Pre-boot only.

Creates new network interface with ID specified by iface_id path parameter.
*/
type PutGuestNetworkInterfaceByID struct {
	Context *middleware.Context
	Handler PutGuestNetworkInterfaceByIDHandler
}

func (o *PutGuestNetworkInterfaceByID) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewPutGuestNetworkInterfaceByIDParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
