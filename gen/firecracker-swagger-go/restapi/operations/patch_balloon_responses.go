// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"

	"github.com/walteh/ec1/gen/firecracker-swagger-go/models"
)

// PatchBalloonNoContentCode is the HTTP code returned for type PatchBalloonNoContent
const PatchBalloonNoContentCode int = 204

/*
PatchBalloonNoContent Balloon device updated

swagger:response patchBalloonNoContent
*/
type PatchBalloonNoContent struct {
}

// NewPatchBalloonNoContent creates PatchBalloonNoContent with default headers values
func NewPatchBalloonNoContent() *PatchBalloonNoContent {

	return &PatchBalloonNoContent{}
}

// WriteResponse to the client
func (o *PatchBalloonNoContent) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(204)
}

func (o *PatchBalloonNoContent) PatchBalloonResponder() {}

// PatchBalloonBadRequestCode is the HTTP code returned for type PatchBalloonBadRequest
const PatchBalloonBadRequestCode int = 400

/*
PatchBalloonBadRequest Balloon device cannot be updated due to bad input

swagger:response patchBalloonBadRequest
*/
type PatchBalloonBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewPatchBalloonBadRequest creates PatchBalloonBadRequest with default headers values
func NewPatchBalloonBadRequest() *PatchBalloonBadRequest {

	return &PatchBalloonBadRequest{}
}

// WithPayload adds the payload to the patch balloon bad request response
func (o *PatchBalloonBadRequest) WithPayload(payload *models.Error) *PatchBalloonBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the patch balloon bad request response
func (o *PatchBalloonBadRequest) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PatchBalloonBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

func (o *PatchBalloonBadRequest) PatchBalloonResponder() {}

/*
PatchBalloonDefault Internal server error

swagger:response patchBalloonDefault
*/
type PatchBalloonDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewPatchBalloonDefault creates PatchBalloonDefault with default headers values
func NewPatchBalloonDefault(code int) *PatchBalloonDefault {
	if code <= 0 {
		code = 500
	}

	return &PatchBalloonDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the patch balloon default response
func (o *PatchBalloonDefault) WithStatusCode(code int) *PatchBalloonDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the patch balloon default response
func (o *PatchBalloonDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the patch balloon default response
func (o *PatchBalloonDefault) WithPayload(payload *models.Error) *PatchBalloonDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the patch balloon default response
func (o *PatchBalloonDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PatchBalloonDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

func (o *PatchBalloonDefault) PatchBalloonResponder() {}

type PatchBalloonNotImplementedResponder struct {
	middleware.Responder
}

func (*PatchBalloonNotImplementedResponder) PatchBalloonResponder() {}

func PatchBalloonNotImplemented() PatchBalloonResponder {
	return &PatchBalloonNotImplementedResponder{
		middleware.NotImplemented(
			"operation authentication.PatchBalloon has not yet been implemented",
		),
	}
}

type PatchBalloonResponder interface {
	middleware.Responder
	PatchBalloonResponder()
}
