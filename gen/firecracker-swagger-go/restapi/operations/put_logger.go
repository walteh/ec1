// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// PutLoggerHandlerFunc turns a function with the right signature into a put logger handler
type PutLoggerHandlerFunc func(PutLoggerParams) PutLoggerResponder

// Handle executing the request and returning a response
func (fn PutLoggerHandlerFunc) Handle(params PutLoggerParams) PutLoggerResponder {
	return fn(params)
}

// PutLoggerHandler interface for that can handle valid put logger params
type PutLoggerHandler interface {
	Handle(PutLoggerParams) PutLoggerResponder
}

// NewPutLogger creates a new http.Handler for the put logger operation
func NewPutLogger(ctx *middleware.Context, handler PutLoggerHandler) *PutLogger {
	return &PutLogger{Context: ctx, Handler: handler}
}

/*
	PutLogger swagger:route PUT /logger putLogger

Initializes the logger by specifying a named pipe or a file for the logs output.
*/
type PutLogger struct {
	Context *middleware.Context
	Handler PutLoggerHandler
}

func (o *PutLogger) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewPutLoggerParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
