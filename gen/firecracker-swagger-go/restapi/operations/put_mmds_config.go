// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// PutMmdsConfigHandlerFunc turns a function with the right signature into a put mmds config handler
type PutMmdsConfigHandlerFunc func(PutMmdsConfigParams) PutMmdsConfigResponder

// Handle executing the request and returning a response
func (fn PutMmdsConfigHandlerFunc) Handle(params PutMmdsConfigParams) PutMmdsConfigResponder {
	return fn(params)
}

// PutMmdsConfigHandler interface for that can handle valid put mmds config params
type PutMmdsConfigHandler interface {
	Handle(PutMmdsConfigParams) PutMmdsConfigResponder
}

// NewPutMmdsConfig creates a new http.Handler for the put mmds config operation
func NewPutMmdsConfig(ctx *middleware.Context, handler PutMmdsConfigHandler) *PutMmdsConfig {
	return &PutMmdsConfig{Context: ctx, Handler: handler}
}

/*
	PutMmdsConfig swagger:route PUT /mmds/config putMmdsConfig

Set MMDS configuration. Pre-boot only.

Configures MMDS version, IPv4 address used by the MMDS network stack and interfaces that allow MMDS requests.
*/
type PutMmdsConfig struct {
	Context *middleware.Context
	Handler PutMmdsConfigHandler
}

func (o *PutMmdsConfig) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewPutMmdsConfigParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
