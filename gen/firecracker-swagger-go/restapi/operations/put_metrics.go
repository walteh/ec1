// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// PutMetricsHandlerFunc turns a function with the right signature into a put metrics handler
type PutMetricsHandlerFunc func(PutMetricsParams) PutMetricsResponder

// Handle executing the request and returning a response
func (fn PutMetricsHandlerFunc) Handle(params PutMetricsParams) PutMetricsResponder {
	return fn(params)
}

// PutMetricsHandler interface for that can handle valid put metrics params
type PutMetricsHandler interface {
	Handle(PutMetricsParams) PutMetricsResponder
}

// NewPutMetrics creates a new http.Handler for the put metrics operation
func NewPutMetrics(ctx *middleware.Context, handler PutMetricsHandler) *PutMetrics {
	return &PutMetrics{Context: ctx, Handler: handler}
}

/*
	PutMetrics swagger:route PUT /metrics putMetrics

Initializes the metrics system by specifying a named pipe or a file for the metrics output.
*/
type PutMetrics struct {
	Context *middleware.Context
	Handler PutMetricsHandler
}

func (o *PutMetrics) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewPutMetricsParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
