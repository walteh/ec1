// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// PutCPUConfigurationHandlerFunc turns a function with the right signature into a put Cpu configuration handler
type PutCPUConfigurationHandlerFunc func(PutCPUConfigurationParams) PutCPUConfigurationResponder

// Handle executing the request and returning a response
func (fn PutCPUConfigurationHandlerFunc) Handle(params PutCPUConfigurationParams) PutCPUConfigurationResponder {
	return fn(params)
}

// PutCPUConfigurationHandler interface for that can handle valid put Cpu configuration params
type PutCPUConfigurationHandler interface {
	Handle(PutCPUConfigurationParams) PutCPUConfigurationResponder
}

// NewPutCPUConfiguration creates a new http.Handler for the put Cpu configuration operation
func NewPutCPUConfiguration(ctx *middleware.Context, handler PutCPUConfigurationHandler) *PutCPUConfiguration {
	return &PutCPUConfiguration{Context: ctx, Handler: handler}
}

/*
	PutCPUConfiguration swagger:route PUT /cpu-config putCpuConfiguration

Configures CPU features flags for the vCPUs of the guest VM. Pre-boot only.

Provides configuration to the Firecracker process to specify vCPU resource configuration prior to launching the guest machine.
*/
type PutCPUConfiguration struct {
	Context *middleware.Context
	Handler PutCPUConfigurationHandler
}

func (o *PutCPUConfiguration) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewPutCPUConfigurationParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
