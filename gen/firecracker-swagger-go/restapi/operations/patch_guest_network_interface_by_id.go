// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// PatchGuestNetworkInterfaceByIDHandlerFunc turns a function with the right signature into a patch guest network interface by ID handler
type PatchGuestNetworkInterfaceByIDHandlerFunc func(PatchGuestNetworkInterfaceByIDParams) PatchGuestNetworkInterfaceByIDResponder

// Handle executing the request and returning a response
func (fn PatchGuestNetworkInterfaceByIDHandlerFunc) Handle(params PatchGuestNetworkInterfaceByIDParams) PatchGuestNetworkInterfaceByIDResponder {
	return fn(params)
}

// PatchGuestNetworkInterfaceByIDHandler interface for that can handle valid patch guest network interface by ID params
type PatchGuestNetworkInterfaceByIDHandler interface {
	Handle(PatchGuestNetworkInterfaceByIDParams) PatchGuestNetworkInterfaceByIDResponder
}

// NewPatchGuestNetworkInterfaceByID creates a new http.Handler for the patch guest network interface by ID operation
func NewPatchGuestNetworkInterfaceByID(ctx *middleware.Context, handler PatchGuestNetworkInterfaceByIDHandler) *PatchGuestNetworkInterfaceByID {
	return &PatchGuestNetworkInterfaceByID{Context: ctx, Handler: handler}
}

/*
	PatchGuestNetworkInterfaceByID swagger:route PATCH /network-interfaces/{iface_id} patchGuestNetworkInterfaceById

Updates the rate limiters applied to a network interface. Post-boot only.

Updates the rate limiters applied to a network interface.
*/
type PatchGuestNetworkInterfaceByID struct {
	Context *middleware.Context
	Handler PatchGuestNetworkInterfaceByIDHandler
}

func (o *PatchGuestNetworkInterfaceByID) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewPatchGuestNetworkInterfaceByIDParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
