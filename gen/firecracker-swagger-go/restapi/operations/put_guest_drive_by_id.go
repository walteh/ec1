// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// PutGuestDriveByIDHandlerFunc turns a function with the right signature into a put guest drive by ID handler
type PutGuestDriveByIDHandlerFunc func(PutGuestDriveByIDParams) PutGuestDriveByIDResponder

// Handle executing the request and returning a response
func (fn PutGuestDriveByIDHandlerFunc) Handle(params PutGuestDriveByIDParams) PutGuestDriveByIDResponder {
	return fn(params)
}

// PutGuestDriveByIDHandler interface for that can handle valid put guest drive by ID params
type PutGuestDriveByIDHandler interface {
	Handle(PutGuestDriveByIDParams) PutGuestDriveByIDResponder
}

// NewPutGuestDriveByID creates a new http.Handler for the put guest drive by ID operation
func NewPutGuestDriveByID(ctx *middleware.Context, handler PutGuestDriveByIDHandler) *PutGuestDriveByID {
	return &PutGuestDriveByID{Context: ctx, Handler: handler}
}

/*
	PutGuestDriveByID swagger:route PUT /drives/{drive_id} putGuestDriveById

Creates or updates a drive. Pre-boot only.

Creates new drive with ID specified by drive_id path parameter. If a drive with the specified ID already exists, updates its state based on new input. Will fail if update is not possible.
*/
type PutGuestDriveByID struct {
	Context *middleware.Context
	Handler PutGuestDriveByIDHandler
}

func (o *PutGuestDriveByID) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewPutGuestDriveByIDParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
