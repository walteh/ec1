// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"

	"github.com/walteh/ec1/gen/firecracker-swagger-go/models"
)

// LoadSnapshotNoContentCode is the HTTP code returned for type LoadSnapshotNoContent
const LoadSnapshotNoContentCode int = 204

/*
LoadSnapshotNoContent Snapshot loaded

swagger:response loadSnapshotNoContent
*/
type LoadSnapshotNoContent struct {
}

// NewLoadSnapshotNoContent creates LoadSnapshotNoContent with default headers values
func NewLoadSnapshotNoContent() *LoadSnapshotNoContent {

	return &LoadSnapshotNoContent{}
}

// WriteResponse to the client
func (o *LoadSnapshotNoContent) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(204)
}

func (o *LoadSnapshotNoContent) LoadSnapshotResponder() {}

// LoadSnapshotBadRequestCode is the HTTP code returned for type LoadSnapshotBadRequest
const LoadSnapshotBadRequestCode int = 400

/*
LoadSnapshotBadRequest Snapshot cannot be loaded due to bad input

swagger:response loadSnapshotBadRequest
*/
type LoadSnapshotBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewLoadSnapshotBadRequest creates LoadSnapshotBadRequest with default headers values
func NewLoadSnapshotBadRequest() *LoadSnapshotBadRequest {

	return &LoadSnapshotBadRequest{}
}

// WithPayload adds the payload to the load snapshot bad request response
func (o *LoadSnapshotBadRequest) WithPayload(payload *models.Error) *LoadSnapshotBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the load snapshot bad request response
func (o *LoadSnapshotBadRequest) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *LoadSnapshotBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

func (o *LoadSnapshotBadRequest) LoadSnapshotResponder() {}

/*
LoadSnapshotDefault Internal server error

swagger:response loadSnapshotDefault
*/
type LoadSnapshotDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewLoadSnapshotDefault creates LoadSnapshotDefault with default headers values
func NewLoadSnapshotDefault(code int) *LoadSnapshotDefault {
	if code <= 0 {
		code = 500
	}

	return &LoadSnapshotDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the load snapshot default response
func (o *LoadSnapshotDefault) WithStatusCode(code int) *LoadSnapshotDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the load snapshot default response
func (o *LoadSnapshotDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the load snapshot default response
func (o *LoadSnapshotDefault) WithPayload(payload *models.Error) *LoadSnapshotDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the load snapshot default response
func (o *LoadSnapshotDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *LoadSnapshotDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

func (o *LoadSnapshotDefault) LoadSnapshotResponder() {}

type LoadSnapshotNotImplementedResponder struct {
	middleware.Responder
}

func (*LoadSnapshotNotImplementedResponder) LoadSnapshotResponder() {}

func LoadSnapshotNotImplemented() LoadSnapshotResponder {
	return &LoadSnapshotNotImplementedResponder{
		middleware.NotImplemented(
			"operation authentication.LoadSnapshot has not yet been implemented",
		),
	}
}

type LoadSnapshotResponder interface {
	middleware.Responder
	LoadSnapshotResponder()
}
