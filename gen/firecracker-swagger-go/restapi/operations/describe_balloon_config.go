// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// DescribeBalloonConfigHandlerFunc turns a function with the right signature into a describe balloon config handler
type DescribeBalloonConfigHandlerFunc func(DescribeBalloonConfigParams) DescribeBalloonConfigResponder

// Handle executing the request and returning a response
func (fn DescribeBalloonConfigHandlerFunc) Handle(params DescribeBalloonConfigParams) DescribeBalloonConfigResponder {
	return fn(params)
}

// DescribeBalloonConfigHandler interface for that can handle valid describe balloon config params
type DescribeBalloonConfigHandler interface {
	Handle(DescribeBalloonConfigParams) DescribeBalloonConfigResponder
}

// NewDescribeBalloonConfig creates a new http.Handler for the describe balloon config operation
func NewDescribeBalloonConfig(ctx *middleware.Context, handler DescribeBalloonConfigHandler) *DescribeBalloonConfig {
	return &DescribeBalloonConfig{Context: ctx, Handler: handler}
}

/*
	DescribeBalloonConfig swagger:route GET /balloon describeBalloonConfig

Returns the current balloon device configuration.
*/
type DescribeBalloonConfig struct {
	Context *middleware.Context
	Handler DescribeBalloonConfigHandler
}

func (o *DescribeBalloonConfig) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewDescribeBalloonConfigParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
