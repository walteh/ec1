// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// PatchGuestDriveByIDHandlerFunc turns a function with the right signature into a patch guest drive by ID handler
type PatchGuestDriveByIDHandlerFunc func(PatchGuestDriveByIDParams) PatchGuestDriveByIDResponder

// Handle executing the request and returning a response
func (fn PatchGuestDriveByIDHandlerFunc) Handle(params PatchGuestDriveByIDParams) PatchGuestDriveByIDResponder {
	return fn(params)
}

// PatchGuestDriveByIDHandler interface for that can handle valid patch guest drive by ID params
type PatchGuestDriveByIDHandler interface {
	Handle(PatchGuestDriveByIDParams) PatchGuestDriveByIDResponder
}

// NewPatchGuestDriveByID creates a new http.Handler for the patch guest drive by ID operation
func NewPatchGuestDriveByID(ctx *middleware.Context, handler PatchGuestDriveByIDHandler) *PatchGuestDriveByID {
	return &PatchGuestDriveByID{Context: ctx, Handler: handler}
}

/*
	PatchGuestDriveByID swagger:route PATCH /drives/{drive_id} patchGuestDriveById

Updates the properties of a drive. Post-boot only.

Updates the properties of the drive with the ID specified by drive_id path parameter. Will fail if update is not possible.
*/
type PatchGuestDriveByID struct {
	Context *middleware.Context
	Handler PatchGuestDriveByIDHandler
}

func (o *PatchGuestDriveByID) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewPatchGuestDriveByIDParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
