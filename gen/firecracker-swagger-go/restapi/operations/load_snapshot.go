// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// LoadSnapshotHandlerFunc turns a function with the right signature into a load snapshot handler
type LoadSnapshotHandlerFunc func(LoadSnapshotParams) LoadSnapshotResponder

// Handle executing the request and returning a response
func (fn LoadSnapshotHandlerFunc) Handle(params LoadSnapshotParams) LoadSnapshotResponder {
	return fn(params)
}

// LoadSnapshotHandler interface for that can handle valid load snapshot params
type LoadSnapshotHandler interface {
	Handle(LoadSnapshotParams) LoadSnapshotResponder
}

// NewLoadSnapshot creates a new http.Handler for the load snapshot operation
func NewLoadSnapshot(ctx *middleware.Context, handler LoadSnapshotHandler) *LoadSnapshot {
	return &LoadSnapshot{Context: ctx, Handler: handler}
}

/*
	LoadSnapshot swagger:route PUT /snapshot/load loadSnapshot

Loads a snapshot. Pre-boot only.

Loads the microVM state from a snapshot. Only accepted on a fresh Firecracker process (before configuring any resource other than the Logger and Metrics).
*/
type LoadSnapshot struct {
	Context *middleware.Context
	Handler LoadSnapshotHandler
}

func (o *LoadSnapshot) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewLoadSnapshotParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
