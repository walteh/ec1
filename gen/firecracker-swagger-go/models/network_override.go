// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NetworkOverride Allows for changing the backing TAP device of a network interface during snapshot restore.
//
// swagger:model NetworkOverride
type NetworkOverride struct {

	// The new host device of the interface
	// Required: true
	HostDevName *string `json:"host_dev_name"`

	// The name of the interface to modify
	// Required: true
	IfaceID *string `json:"iface_id"`
}

// UnmarshalJSON unmarshals this object while disallowing additional properties from JSON
func (m *NetworkOverride) UnmarshalJSON(data []byte) error {
	var props struct {

		// The new host device of the interface
		// Required: true
		HostDevName *string `json:"host_dev_name"`

		// The name of the interface to modify
		// Required: true
		IfaceID *string `json:"iface_id"`
	}

	dec := json.NewDecoder(bytes.NewReader(data))
	dec.DisallowUnknownFields()
	if err := dec.Decode(&props); err != nil {
		return err
	}

	m.HostDevName = props.HostDevName
	m.IfaceID = props.IfaceID
	return nil
}

// Validate validates this network override
func (m *NetworkOverride) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateHostDevName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIfaceID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NetworkOverride) validateHostDevName(formats strfmt.Registry) error {

	if err := validate.Required("host_dev_name", "body", m.HostDevName); err != nil {
		return err
	}

	return nil
}

func (m *NetworkOverride) validateIfaceID(formats strfmt.Registry) error {

	if err := validate.Required("iface_id", "body", m.IfaceID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this network override based on context it is used
func (m *NetworkOverride) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *NetworkOverride) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NetworkOverride) UnmarshalBinary(b []byte) error {
	var res NetworkOverride
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
