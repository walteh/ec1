// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: ec1/v1poc1/agent.proto

package v1poc1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AgentService_StartVM_FullMethodName      = "/ec1.v1poc1.AgentService/StartVM"
	AgentService_StopVM_FullMethodName       = "/ec1.v1poc1.AgentService/StopVM"
	AgentService_VMStatus_FullMethodName     = "/ec1.v1poc1.AgentService/VMStatus"
	AgentService_GetVMStatus_FullMethodName  = "/ec1.v1poc1.AgentService/GetVMStatus"
	AgentService_AgentProbe_FullMethodName   = "/ec1.v1poc1.AgentService/AgentProbe"
	AgentService_FileTransfer_FullMethodName = "/ec1.v1poc1.AgentService/FileTransfer"
	AgentService_Status_FullMethodName       = "/ec1.v1poc1.AgentService/Status"
)

// AgentServiceClient is the client API for AgentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// AgentService provides VM management functionality on a host
type AgentServiceClient interface {
	// StartVM starts a new virtual machine on the agent's host
	StartVM(ctx context.Context, in *StartVMRequest, opts ...grpc.CallOption) (*StartVMResponse, error)
	// StopVM stops a running virtual machine on the agent's host
	StopVM(ctx context.Context, in *StopVMRequest, opts ...grpc.CallOption) (*StopVMResponse, error)
	// GetVMStatus gets the status of a virtual machine on the agent's host
	VMStatus(ctx context.Context, in *VMStatusRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[VMStatusResponse], error)
	// GetVMStatus gets the status of a virtual machine on the agent's host
	GetVMStatus(ctx context.Context, in *GetVMStatusRequest, opts ...grpc.CallOption) (*GetVMStatusResponse, error)
	AgentProbe(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[AgentProbeRequest, AgentProbeResponse], error)
	FileTransfer(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[FileTransferRequest, FileTransferResponse], error)
	Status(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*StatusResponse, error)
}

type agentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAgentServiceClient(cc grpc.ClientConnInterface) AgentServiceClient {
	return &agentServiceClient{cc}
}

func (c *agentServiceClient) StartVM(ctx context.Context, in *StartVMRequest, opts ...grpc.CallOption) (*StartVMResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StartVMResponse)
	err := c.cc.Invoke(ctx, AgentService_StartVM_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentServiceClient) StopVM(ctx context.Context, in *StopVMRequest, opts ...grpc.CallOption) (*StopVMResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StopVMResponse)
	err := c.cc.Invoke(ctx, AgentService_StopVM_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentServiceClient) VMStatus(ctx context.Context, in *VMStatusRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[VMStatusResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &AgentService_ServiceDesc.Streams[0], AgentService_VMStatus_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[VMStatusRequest, VMStatusResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type AgentService_VMStatusClient = grpc.ServerStreamingClient[VMStatusResponse]

func (c *agentServiceClient) GetVMStatus(ctx context.Context, in *GetVMStatusRequest, opts ...grpc.CallOption) (*GetVMStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetVMStatusResponse)
	err := c.cc.Invoke(ctx, AgentService_GetVMStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentServiceClient) AgentProbe(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[AgentProbeRequest, AgentProbeResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &AgentService_ServiceDesc.Streams[1], AgentService_AgentProbe_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[AgentProbeRequest, AgentProbeResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type AgentService_AgentProbeClient = grpc.BidiStreamingClient[AgentProbeRequest, AgentProbeResponse]

func (c *agentServiceClient) FileTransfer(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[FileTransferRequest, FileTransferResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &AgentService_ServiceDesc.Streams[2], AgentService_FileTransfer_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[FileTransferRequest, FileTransferResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type AgentService_FileTransferClient = grpc.ClientStreamingClient[FileTransferRequest, FileTransferResponse]

func (c *agentServiceClient) Status(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, AgentService_Status_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AgentServiceServer is the server API for AgentService service.
// All implementations must embed UnimplementedAgentServiceServer
// for forward compatibility.
//
// AgentService provides VM management functionality on a host
type AgentServiceServer interface {
	// StartVM starts a new virtual machine on the agent's host
	StartVM(context.Context, *StartVMRequest) (*StartVMResponse, error)
	// StopVM stops a running virtual machine on the agent's host
	StopVM(context.Context, *StopVMRequest) (*StopVMResponse, error)
	// GetVMStatus gets the status of a virtual machine on the agent's host
	VMStatus(*VMStatusRequest, grpc.ServerStreamingServer[VMStatusResponse]) error
	// GetVMStatus gets the status of a virtual machine on the agent's host
	GetVMStatus(context.Context, *GetVMStatusRequest) (*GetVMStatusResponse, error)
	AgentProbe(grpc.BidiStreamingServer[AgentProbeRequest, AgentProbeResponse]) error
	FileTransfer(grpc.ClientStreamingServer[FileTransferRequest, FileTransferResponse]) error
	Status(context.Context, *StatusRequest) (*StatusResponse, error)
	mustEmbedUnimplementedAgentServiceServer()
}

// UnimplementedAgentServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAgentServiceServer struct{}

func (UnimplementedAgentServiceServer) StartVM(context.Context, *StartVMRequest) (*StartVMResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartVM not implemented")
}
func (UnimplementedAgentServiceServer) StopVM(context.Context, *StopVMRequest) (*StopVMResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopVM not implemented")
}
func (UnimplementedAgentServiceServer) VMStatus(*VMStatusRequest, grpc.ServerStreamingServer[VMStatusResponse]) error {
	return status.Errorf(codes.Unimplemented, "method VMStatus not implemented")
}
func (UnimplementedAgentServiceServer) GetVMStatus(context.Context, *GetVMStatusRequest) (*GetVMStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVMStatus not implemented")
}
func (UnimplementedAgentServiceServer) AgentProbe(grpc.BidiStreamingServer[AgentProbeRequest, AgentProbeResponse]) error {
	return status.Errorf(codes.Unimplemented, "method AgentProbe not implemented")
}
func (UnimplementedAgentServiceServer) FileTransfer(grpc.ClientStreamingServer[FileTransferRequest, FileTransferResponse]) error {
	return status.Errorf(codes.Unimplemented, "method FileTransfer not implemented")
}
func (UnimplementedAgentServiceServer) Status(context.Context, *StatusRequest) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Status not implemented")
}
func (UnimplementedAgentServiceServer) mustEmbedUnimplementedAgentServiceServer() {}
func (UnimplementedAgentServiceServer) testEmbeddedByValue()                      {}

// UnsafeAgentServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AgentServiceServer will
// result in compilation errors.
type UnsafeAgentServiceServer interface {
	mustEmbedUnimplementedAgentServiceServer()
}

func RegisterAgentServiceServer(s grpc.ServiceRegistrar, srv AgentServiceServer) {
	// If the following call pancis, it indicates UnimplementedAgentServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AgentService_ServiceDesc, srv)
}

func _AgentService_StartVM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartVMRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServiceServer).StartVM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentService_StartVM_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServiceServer).StartVM(ctx, req.(*StartVMRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentService_StopVM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopVMRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServiceServer).StopVM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentService_StopVM_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServiceServer).StopVM(ctx, req.(*StopVMRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentService_VMStatus_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(VMStatusRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AgentServiceServer).VMStatus(m, &grpc.GenericServerStream[VMStatusRequest, VMStatusResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type AgentService_VMStatusServer = grpc.ServerStreamingServer[VMStatusResponse]

func _AgentService_GetVMStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVMStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServiceServer).GetVMStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentService_GetVMStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServiceServer).GetVMStatus(ctx, req.(*GetVMStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentService_AgentProbe_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(AgentServiceServer).AgentProbe(&grpc.GenericServerStream[AgentProbeRequest, AgentProbeResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type AgentService_AgentProbeServer = grpc.BidiStreamingServer[AgentProbeRequest, AgentProbeResponse]

func _AgentService_FileTransfer_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(AgentServiceServer).FileTransfer(&grpc.GenericServerStream[FileTransferRequest, FileTransferResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type AgentService_FileTransferServer = grpc.ClientStreamingServer[FileTransferRequest, FileTransferResponse]

func _AgentService_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServiceServer).Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentService_Status_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServiceServer).Status(ctx, req.(*StatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AgentService_ServiceDesc is the grpc.ServiceDesc for AgentService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AgentService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ec1.v1poc1.AgentService",
	HandlerType: (*AgentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartVM",
			Handler:    _AgentService_StartVM_Handler,
		},
		{
			MethodName: "StopVM",
			Handler:    _AgentService_StopVM_Handler,
		},
		{
			MethodName: "GetVMStatus",
			Handler:    _AgentService_GetVMStatus_Handler,
		},
		{
			MethodName: "Status",
			Handler:    _AgentService_Status_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "VMStatus",
			Handler:       _AgentService_VMStatus_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "AgentProbe",
			Handler:       _AgentService_AgentProbe_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "FileTransfer",
			Handler:       _AgentService_FileTransfer_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "ec1/v1poc1/agent.proto",
}
