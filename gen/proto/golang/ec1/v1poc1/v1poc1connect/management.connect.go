// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: ec1/v1poc1/management.proto

package v1poc1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1poc1 "github.com/walteh/ec1/gen/proto/golang/ec1/v1poc1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ManagementServiceName is the fully-qualified name of the ManagementService service.
	ManagementServiceName = "ec1.v1poc1.ManagementService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ManagementServiceIdentifyRemoteAgentProcedure is the fully-qualified name of the
	// ManagementService's IdentifyRemoteAgent RPC.
	ManagementServiceIdentifyRemoteAgentProcedure = "/ec1.v1poc1.ManagementService/IdentifyRemoteAgent"
	// ManagementServiceInitializeLocalAgentInsideLocalVMProcedure is the fully-qualified name of the
	// ManagementService's InitializeLocalAgentInsideLocalVM RPC.
	ManagementServiceInitializeLocalAgentInsideLocalVMProcedure = "/ec1.v1poc1.ManagementService/InitializeLocalAgentInsideLocalVM"
	// ManagementServiceInitilizeRemoteAgentProcedure is the fully-qualified name of the
	// ManagementService's InitilizeRemoteAgent RPC.
	ManagementServiceInitilizeRemoteAgentProcedure = "/ec1.v1poc1.ManagementService/InitilizeRemoteAgent"
)

// ManagementServiceClient is a client for the ec1.v1poc1.ManagementService service.
type ManagementServiceClient interface {
	IdentifyRemoteAgent(context.Context, *connect.Request[v1poc1.IdentifyRemoteAgentRequest]) (*connect.Response[v1poc1.IdentifyRemoteAgentResponse], error)
	InitializeLocalAgentInsideLocalVM(context.Context, *connect.Request[v1poc1.InitializeLocalAgentInsideLocalVMRequest]) (*connect.Response[v1poc1.InitializeLocalAgentInsideLocalVMResponse], error)
	InitilizeRemoteAgent(context.Context, *connect.Request[v1poc1.InitializeRemoteAgentRequest]) (*connect.Response[v1poc1.InitializeRemoteAgentResponse], error)
}

// NewManagementServiceClient constructs a client for the ec1.v1poc1.ManagementService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewManagementServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ManagementServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	managementServiceMethods := v1poc1.File_ec1_v1poc1_management_proto.Services().ByName("ManagementService").Methods()
	return &managementServiceClient{
		identifyRemoteAgent: connect.NewClient[v1poc1.IdentifyRemoteAgentRequest, v1poc1.IdentifyRemoteAgentResponse](
			httpClient,
			baseURL+ManagementServiceIdentifyRemoteAgentProcedure,
			connect.WithSchema(managementServiceMethods.ByName("IdentifyRemoteAgent")),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		initializeLocalAgentInsideLocalVM: connect.NewClient[v1poc1.InitializeLocalAgentInsideLocalVMRequest, v1poc1.InitializeLocalAgentInsideLocalVMResponse](
			httpClient,
			baseURL+ManagementServiceInitializeLocalAgentInsideLocalVMProcedure,
			connect.WithSchema(managementServiceMethods.ByName("InitializeLocalAgentInsideLocalVM")),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		initilizeRemoteAgent: connect.NewClient[v1poc1.InitializeRemoteAgentRequest, v1poc1.InitializeRemoteAgentResponse](
			httpClient,
			baseURL+ManagementServiceInitilizeRemoteAgentProcedure,
			connect.WithSchema(managementServiceMethods.ByName("InitilizeRemoteAgent")),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
	}
}

// managementServiceClient implements ManagementServiceClient.
type managementServiceClient struct {
	identifyRemoteAgent               *connect.Client[v1poc1.IdentifyRemoteAgentRequest, v1poc1.IdentifyRemoteAgentResponse]
	initializeLocalAgentInsideLocalVM *connect.Client[v1poc1.InitializeLocalAgentInsideLocalVMRequest, v1poc1.InitializeLocalAgentInsideLocalVMResponse]
	initilizeRemoteAgent              *connect.Client[v1poc1.InitializeRemoteAgentRequest, v1poc1.InitializeRemoteAgentResponse]
}

// IdentifyRemoteAgent calls ec1.v1poc1.ManagementService.IdentifyRemoteAgent.
func (c *managementServiceClient) IdentifyRemoteAgent(ctx context.Context, req *connect.Request[v1poc1.IdentifyRemoteAgentRequest]) (*connect.Response[v1poc1.IdentifyRemoteAgentResponse], error) {
	return c.identifyRemoteAgent.CallUnary(ctx, req)
}

// InitializeLocalAgentInsideLocalVM calls
// ec1.v1poc1.ManagementService.InitializeLocalAgentInsideLocalVM.
func (c *managementServiceClient) InitializeLocalAgentInsideLocalVM(ctx context.Context, req *connect.Request[v1poc1.InitializeLocalAgentInsideLocalVMRequest]) (*connect.Response[v1poc1.InitializeLocalAgentInsideLocalVMResponse], error) {
	return c.initializeLocalAgentInsideLocalVM.CallUnary(ctx, req)
}

// InitilizeRemoteAgent calls ec1.v1poc1.ManagementService.InitilizeRemoteAgent.
func (c *managementServiceClient) InitilizeRemoteAgent(ctx context.Context, req *connect.Request[v1poc1.InitializeRemoteAgentRequest]) (*connect.Response[v1poc1.InitializeRemoteAgentResponse], error) {
	return c.initilizeRemoteAgent.CallUnary(ctx, req)
}

// ManagementServiceHandler is an implementation of the ec1.v1poc1.ManagementService service.
type ManagementServiceHandler interface {
	IdentifyRemoteAgent(context.Context, *connect.Request[v1poc1.IdentifyRemoteAgentRequest]) (*connect.Response[v1poc1.IdentifyRemoteAgentResponse], error)
	InitializeLocalAgentInsideLocalVM(context.Context, *connect.Request[v1poc1.InitializeLocalAgentInsideLocalVMRequest]) (*connect.Response[v1poc1.InitializeLocalAgentInsideLocalVMResponse], error)
	InitilizeRemoteAgent(context.Context, *connect.Request[v1poc1.InitializeRemoteAgentRequest]) (*connect.Response[v1poc1.InitializeRemoteAgentResponse], error)
}

// NewManagementServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewManagementServiceHandler(svc ManagementServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	managementServiceMethods := v1poc1.File_ec1_v1poc1_management_proto.Services().ByName("ManagementService").Methods()
	managementServiceIdentifyRemoteAgentHandler := connect.NewUnaryHandler(
		ManagementServiceIdentifyRemoteAgentProcedure,
		svc.IdentifyRemoteAgent,
		connect.WithSchema(managementServiceMethods.ByName("IdentifyRemoteAgent")),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	managementServiceInitializeLocalAgentInsideLocalVMHandler := connect.NewUnaryHandler(
		ManagementServiceInitializeLocalAgentInsideLocalVMProcedure,
		svc.InitializeLocalAgentInsideLocalVM,
		connect.WithSchema(managementServiceMethods.ByName("InitializeLocalAgentInsideLocalVM")),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	managementServiceInitilizeRemoteAgentHandler := connect.NewUnaryHandler(
		ManagementServiceInitilizeRemoteAgentProcedure,
		svc.InitilizeRemoteAgent,
		connect.WithSchema(managementServiceMethods.ByName("InitilizeRemoteAgent")),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	return "/ec1.v1poc1.ManagementService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ManagementServiceIdentifyRemoteAgentProcedure:
			managementServiceIdentifyRemoteAgentHandler.ServeHTTP(w, r)
		case ManagementServiceInitializeLocalAgentInsideLocalVMProcedure:
			managementServiceInitializeLocalAgentInsideLocalVMHandler.ServeHTTP(w, r)
		case ManagementServiceInitilizeRemoteAgentProcedure:
			managementServiceInitilizeRemoteAgentHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedManagementServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedManagementServiceHandler struct{}

func (UnimplementedManagementServiceHandler) IdentifyRemoteAgent(context.Context, *connect.Request[v1poc1.IdentifyRemoteAgentRequest]) (*connect.Response[v1poc1.IdentifyRemoteAgentResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ec1.v1poc1.ManagementService.IdentifyRemoteAgent is not implemented"))
}

func (UnimplementedManagementServiceHandler) InitializeLocalAgentInsideLocalVM(context.Context, *connect.Request[v1poc1.InitializeLocalAgentInsideLocalVMRequest]) (*connect.Response[v1poc1.InitializeLocalAgentInsideLocalVMResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ec1.v1poc1.ManagementService.InitializeLocalAgentInsideLocalVM is not implemented"))
}

func (UnimplementedManagementServiceHandler) InitilizeRemoteAgent(context.Context, *connect.Request[v1poc1.InitializeRemoteAgentRequest]) (*connect.Response[v1poc1.InitializeRemoteAgentResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ec1.v1poc1.ManagementService.InitilizeRemoteAgent is not implemented"))
}
