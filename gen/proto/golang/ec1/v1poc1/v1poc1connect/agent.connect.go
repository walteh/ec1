// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: ec1/v1poc1/agent.proto

package v1poc1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1poc1 "github.com/walteh/ec1/gen/proto/golang/ec1/v1poc1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// AgentServiceName is the fully-qualified name of the AgentService service.
	AgentServiceName = "ec1.v1poc1.AgentService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// AgentServiceStartVMProcedure is the fully-qualified name of the AgentService's StartVM RPC.
	AgentServiceStartVMProcedure = "/ec1.v1poc1.AgentService/StartVM"
	// AgentServiceStopVMProcedure is the fully-qualified name of the AgentService's StopVM RPC.
	AgentServiceStopVMProcedure = "/ec1.v1poc1.AgentService/StopVM"
	// AgentServiceVMStatusProcedure is the fully-qualified name of the AgentService's VMStatus RPC.
	AgentServiceVMStatusProcedure = "/ec1.v1poc1.AgentService/VMStatus"
	// AgentServiceGetVMStatusProcedure is the fully-qualified name of the AgentService's GetVMStatus
	// RPC.
	AgentServiceGetVMStatusProcedure = "/ec1.v1poc1.AgentService/GetVMStatus"
)

// AgentServiceClient is a client for the ec1.v1poc1.AgentService service.
type AgentServiceClient interface {
	// StartVM starts a new virtual machine on the agent's host
	StartVM(context.Context, *connect.Request[v1poc1.StartVMRequest]) (*connect.Response[v1poc1.StartVMResponse], error)
	// StopVM stops a running virtual machine on the agent's host
	StopVM(context.Context, *connect.Request[v1poc1.StopVMRequest]) (*connect.Response[v1poc1.StopVMResponse], error)
	// GetVMStatus gets the status of a virtual machine on the agent's host
	VMStatus(context.Context, *connect.Request[v1poc1.VMStatusRequest]) (*connect.ServerStreamForClient[v1poc1.VMStatusResponse], error)
	// GetVMStatus gets the status of a virtual machine on the agent's host
	GetVMStatus(context.Context, *connect.Request[v1poc1.GetVMStatusRequest]) (*connect.Response[v1poc1.GetVMStatusResponse], error)
}

// NewAgentServiceClient constructs a client for the ec1.v1poc1.AgentService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAgentServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) AgentServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	agentServiceMethods := v1poc1.File_ec1_v1poc1_agent_proto.Services().ByName("AgentService").Methods()
	return &agentServiceClient{
		startVM: connect.NewClient[v1poc1.StartVMRequest, v1poc1.StartVMResponse](
			httpClient,
			baseURL+AgentServiceStartVMProcedure,
			connect.WithSchema(agentServiceMethods.ByName("StartVM")),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		stopVM: connect.NewClient[v1poc1.StopVMRequest, v1poc1.StopVMResponse](
			httpClient,
			baseURL+AgentServiceStopVMProcedure,
			connect.WithSchema(agentServiceMethods.ByName("StopVM")),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		vMStatus: connect.NewClient[v1poc1.VMStatusRequest, v1poc1.VMStatusResponse](
			httpClient,
			baseURL+AgentServiceVMStatusProcedure,
			connect.WithSchema(agentServiceMethods.ByName("VMStatus")),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		getVMStatus: connect.NewClient[v1poc1.GetVMStatusRequest, v1poc1.GetVMStatusResponse](
			httpClient,
			baseURL+AgentServiceGetVMStatusProcedure,
			connect.WithSchema(agentServiceMethods.ByName("GetVMStatus")),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
	}
}

// agentServiceClient implements AgentServiceClient.
type agentServiceClient struct {
	startVM     *connect.Client[v1poc1.StartVMRequest, v1poc1.StartVMResponse]
	stopVM      *connect.Client[v1poc1.StopVMRequest, v1poc1.StopVMResponse]
	vMStatus    *connect.Client[v1poc1.VMStatusRequest, v1poc1.VMStatusResponse]
	getVMStatus *connect.Client[v1poc1.GetVMStatusRequest, v1poc1.GetVMStatusResponse]
}

// StartVM calls ec1.v1poc1.AgentService.StartVM.
func (c *agentServiceClient) StartVM(ctx context.Context, req *connect.Request[v1poc1.StartVMRequest]) (*connect.Response[v1poc1.StartVMResponse], error) {
	return c.startVM.CallUnary(ctx, req)
}

// StopVM calls ec1.v1poc1.AgentService.StopVM.
func (c *agentServiceClient) StopVM(ctx context.Context, req *connect.Request[v1poc1.StopVMRequest]) (*connect.Response[v1poc1.StopVMResponse], error) {
	return c.stopVM.CallUnary(ctx, req)
}

// VMStatus calls ec1.v1poc1.AgentService.VMStatus.
func (c *agentServiceClient) VMStatus(ctx context.Context, req *connect.Request[v1poc1.VMStatusRequest]) (*connect.ServerStreamForClient[v1poc1.VMStatusResponse], error) {
	return c.vMStatus.CallServerStream(ctx, req)
}

// GetVMStatus calls ec1.v1poc1.AgentService.GetVMStatus.
func (c *agentServiceClient) GetVMStatus(ctx context.Context, req *connect.Request[v1poc1.GetVMStatusRequest]) (*connect.Response[v1poc1.GetVMStatusResponse], error) {
	return c.getVMStatus.CallUnary(ctx, req)
}

// AgentServiceHandler is an implementation of the ec1.v1poc1.AgentService service.
type AgentServiceHandler interface {
	// StartVM starts a new virtual machine on the agent's host
	StartVM(context.Context, *connect.Request[v1poc1.StartVMRequest]) (*connect.Response[v1poc1.StartVMResponse], error)
	// StopVM stops a running virtual machine on the agent's host
	StopVM(context.Context, *connect.Request[v1poc1.StopVMRequest]) (*connect.Response[v1poc1.StopVMResponse], error)
	// GetVMStatus gets the status of a virtual machine on the agent's host
	VMStatus(context.Context, *connect.Request[v1poc1.VMStatusRequest], *connect.ServerStream[v1poc1.VMStatusResponse]) error
	// GetVMStatus gets the status of a virtual machine on the agent's host
	GetVMStatus(context.Context, *connect.Request[v1poc1.GetVMStatusRequest]) (*connect.Response[v1poc1.GetVMStatusResponse], error)
}

// NewAgentServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAgentServiceHandler(svc AgentServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	agentServiceMethods := v1poc1.File_ec1_v1poc1_agent_proto.Services().ByName("AgentService").Methods()
	agentServiceStartVMHandler := connect.NewUnaryHandler(
		AgentServiceStartVMProcedure,
		svc.StartVM,
		connect.WithSchema(agentServiceMethods.ByName("StartVM")),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	agentServiceStopVMHandler := connect.NewUnaryHandler(
		AgentServiceStopVMProcedure,
		svc.StopVM,
		connect.WithSchema(agentServiceMethods.ByName("StopVM")),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	agentServiceVMStatusHandler := connect.NewServerStreamHandler(
		AgentServiceVMStatusProcedure,
		svc.VMStatus,
		connect.WithSchema(agentServiceMethods.ByName("VMStatus")),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	agentServiceGetVMStatusHandler := connect.NewUnaryHandler(
		AgentServiceGetVMStatusProcedure,
		svc.GetVMStatus,
		connect.WithSchema(agentServiceMethods.ByName("GetVMStatus")),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	return "/ec1.v1poc1.AgentService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case AgentServiceStartVMProcedure:
			agentServiceStartVMHandler.ServeHTTP(w, r)
		case AgentServiceStopVMProcedure:
			agentServiceStopVMHandler.ServeHTTP(w, r)
		case AgentServiceVMStatusProcedure:
			agentServiceVMStatusHandler.ServeHTTP(w, r)
		case AgentServiceGetVMStatusProcedure:
			agentServiceGetVMStatusHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedAgentServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedAgentServiceHandler struct{}

func (UnimplementedAgentServiceHandler) StartVM(context.Context, *connect.Request[v1poc1.StartVMRequest]) (*connect.Response[v1poc1.StartVMResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ec1.v1poc1.AgentService.StartVM is not implemented"))
}

func (UnimplementedAgentServiceHandler) StopVM(context.Context, *connect.Request[v1poc1.StopVMRequest]) (*connect.Response[v1poc1.StopVMResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ec1.v1poc1.AgentService.StopVM is not implemented"))
}

func (UnimplementedAgentServiceHandler) VMStatus(context.Context, *connect.Request[v1poc1.VMStatusRequest], *connect.ServerStream[v1poc1.VMStatusResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("ec1.v1poc1.AgentService.VMStatus is not implemented"))
}

func (UnimplementedAgentServiceHandler) GetVMStatus(context.Context, *connect.Request[v1poc1.GetVMStatusRequest]) (*connect.Response[v1poc1.GetVMStatusResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ec1.v1poc1.AgentService.GetVMStatus is not implemented"))
}
