// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: ec1/v1poc1/agent.proto

package v1poc1

import (
	_ "github.com/walteh/ec1/gen/proto/golang/ec1/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// DiskImageType defines the type of disk image
type DiskImageType int32

const (
	DiskImageType_DISK_IMAGE_TYPE_UNSPECIFIED DiskImageType = 0
	DiskImageType_DISK_IMAGE_TYPE_RAW         DiskImageType = 1
	DiskImageType_DISK_IMAGE_TYPE_QCOW2       DiskImageType = 2
	DiskImageType_DISK_IMAGE_TYPE_VHD         DiskImageType = 3
)

// Enum value maps for DiskImageType.
var (
	DiskImageType_name = map[int32]string{
		0: "DISK_IMAGE_TYPE_UNSPECIFIED",
		1: "DISK_IMAGE_TYPE_RAW",
		2: "DISK_IMAGE_TYPE_QCOW2",
		3: "DISK_IMAGE_TYPE_VHD",
	}
	DiskImageType_value = map[string]int32{
		"DISK_IMAGE_TYPE_UNSPECIFIED": 0,
		"DISK_IMAGE_TYPE_RAW":         1,
		"DISK_IMAGE_TYPE_QCOW2":       2,
		"DISK_IMAGE_TYPE_VHD":         3,
	}
)

func (x DiskImageType) Enum() *DiskImageType {
	p := new(DiskImageType)
	*p = x
	return p
}

func (x DiskImageType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DiskImageType) Descriptor() protoreflect.EnumDescriptor {
	return file_ec1_v1poc1_agent_proto_enumTypes[0].Descriptor()
}

func (DiskImageType) Type() protoreflect.EnumType {
	return &file_ec1_v1poc1_agent_proto_enumTypes[0]
}

func (x DiskImageType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DiskImageType.Descriptor instead.
func (DiskImageType) EnumDescriptor() ([]byte, []int) {
	return file_ec1_v1poc1_agent_proto_rawDescGZIP(), []int{0}
}

type StatusRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StatusRequest) Reset() {
	*x = StatusRequest{}
	mi := &file_ec1_v1poc1_agent_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatusRequest) ProtoMessage() {}

func (x *StatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ec1_v1poc1_agent_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatusRequest.ProtoReflect.Descriptor instead.
func (*StatusRequest) Descriptor() ([]byte, []int) {
	return file_ec1_v1poc1_agent_proto_rawDescGZIP(), []int{0}
}

type StatusResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AgentId       *string                `protobuf:"bytes,1,opt,name=agent_id,json=agentId" json:"agent_id,omitempty"`
	HostAddress   *string                `protobuf:"bytes,2,opt,name=host_address,json=hostAddress" json:"host_address,omitempty"`
	UptimeMs      *uint64                `protobuf:"varint,3,opt,name=uptime_ms,json=uptimeMs" json:"uptime_ms,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StatusResponse) Reset() {
	*x = StatusResponse{}
	mi := &file_ec1_v1poc1_agent_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatusResponse) ProtoMessage() {}

func (x *StatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ec1_v1poc1_agent_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatusResponse.ProtoReflect.Descriptor instead.
func (*StatusResponse) Descriptor() ([]byte, []int) {
	return file_ec1_v1poc1_agent_proto_rawDescGZIP(), []int{1}
}

func (x *StatusResponse) GetAgentId() string {
	if x != nil && x.AgentId != nil {
		return *x.AgentId
	}
	return ""
}

func (x *StatusResponse) GetHostAddress() string {
	if x != nil && x.HostAddress != nil {
		return *x.HostAddress
	}
	return ""
}

func (x *StatusResponse) GetUptimeMs() uint64 {
	if x != nil && x.UptimeMs != nil {
		return *x.UptimeMs
	}
	return 0
}

type FileTransferRequest struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Name            *string                `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	FileByteSize    *uint32                `protobuf:"varint,2,opt,name=file_byte_size,json=fileByteSize" json:"file_byte_size,omitempty"`
	ChunkTotalCount *uint32                `protobuf:"varint,3,opt,name=chunk_total_count,json=chunkTotalCount" json:"chunk_total_count,omitempty"`
	ChunkBytes      []byte                 `protobuf:"bytes,4,opt,name=chunk_bytes,json=chunkBytes" json:"chunk_bytes,omitempty"`
	ChunkByteSize   *uint32                `protobuf:"varint,5,opt,name=chunk_byte_size,json=chunkByteSize" json:"chunk_byte_size,omitempty"`
	ChunkOfTotal    *uint32                `protobuf:"varint,6,opt,name=chunk_of_total,json=chunkOfTotal" json:"chunk_of_total,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *FileTransferRequest) Reset() {
	*x = FileTransferRequest{}
	mi := &file_ec1_v1poc1_agent_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FileTransferRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileTransferRequest) ProtoMessage() {}

func (x *FileTransferRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ec1_v1poc1_agent_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileTransferRequest.ProtoReflect.Descriptor instead.
func (*FileTransferRequest) Descriptor() ([]byte, []int) {
	return file_ec1_v1poc1_agent_proto_rawDescGZIP(), []int{2}
}

func (x *FileTransferRequest) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *FileTransferRequest) GetFileByteSize() uint32 {
	if x != nil && x.FileByteSize != nil {
		return *x.FileByteSize
	}
	return 0
}

func (x *FileTransferRequest) GetChunkTotalCount() uint32 {
	if x != nil && x.ChunkTotalCount != nil {
		return *x.ChunkTotalCount
	}
	return 0
}

func (x *FileTransferRequest) GetChunkBytes() []byte {
	if x != nil {
		return x.ChunkBytes
	}
	return nil
}

func (x *FileTransferRequest) GetChunkByteSize() uint32 {
	if x != nil && x.ChunkByteSize != nil {
		return *x.ChunkByteSize
	}
	return 0
}

func (x *FileTransferRequest) GetChunkOfTotal() uint32 {
	if x != nil && x.ChunkOfTotal != nil {
		return *x.ChunkOfTotal
	}
	return 0
}

type FileTransferResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Exists        *bool                  `protobuf:"varint,1,opt,name=exists" json:"exists,omitempty"`
	Size          *uint32                `protobuf:"varint,2,opt,name=size" json:"size,omitempty"`
	Hash          *string                `protobuf:"bytes,3,opt,name=hash" json:"hash,omitempty"`
	Error         *string                `protobuf:"bytes,4,opt,name=error" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FileTransferResponse) Reset() {
	*x = FileTransferResponse{}
	mi := &file_ec1_v1poc1_agent_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FileTransferResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileTransferResponse) ProtoMessage() {}

func (x *FileTransferResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ec1_v1poc1_agent_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileTransferResponse.ProtoReflect.Descriptor instead.
func (*FileTransferResponse) Descriptor() ([]byte, []int) {
	return file_ec1_v1poc1_agent_proto_rawDescGZIP(), []int{3}
}

func (x *FileTransferResponse) GetExists() bool {
	if x != nil && x.Exists != nil {
		return *x.Exists
	}
	return false
}

func (x *FileTransferResponse) GetSize() uint32 {
	if x != nil && x.Size != nil {
		return *x.Size
	}
	return 0
}

func (x *FileTransferResponse) GetHash() string {
	if x != nil && x.Hash != nil {
		return *x.Hash
	}
	return ""
}

func (x *FileTransferResponse) GetError() string {
	if x != nil && x.Error != nil {
		return *x.Error
	}
	return ""
}

// StartVMRequest is the request message for starting a VM
type StartVMRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the VM (optional, will be generated if not provided)
	VmId *string `protobuf:"bytes,1,opt,name=vm_id,json=vmId" json:"vm_id,omitempty"`
	// Name of the VM
	Name *string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	// Resource allocation
	ResourcesMax  *Resources `protobuf:"bytes,3,opt,name=resources_max,json=resourcesMax" json:"resources_max,omitempty"`
	ResourcesBoot *Resources `protobuf:"bytes,4,opt,name=resources_boot,json=resourcesBoot" json:"resources_boot,omitempty"`
	// Disk image information
	DiskImage *DiskImage `protobuf:"bytes,5,opt,name=disk_image,json=diskImage" json:"disk_image,omitempty"`
	// Cloud-init configuration
	CloudInit *CloudInitConfig `protobuf:"bytes,6,opt,name=cloud_init,json=cloudInit" json:"cloud_init,omitempty"`
	// Network configuration
	NetworkConfig *VMNetworkConfig `protobuf:"bytes,7,opt,name=network_config,json=networkConfig" json:"network_config,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StartVMRequest) Reset() {
	*x = StartVMRequest{}
	mi := &file_ec1_v1poc1_agent_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StartVMRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartVMRequest) ProtoMessage() {}

func (x *StartVMRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ec1_v1poc1_agent_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartVMRequest.ProtoReflect.Descriptor instead.
func (*StartVMRequest) Descriptor() ([]byte, []int) {
	return file_ec1_v1poc1_agent_proto_rawDescGZIP(), []int{4}
}

func (x *StartVMRequest) GetVmId() string {
	if x != nil && x.VmId != nil {
		return *x.VmId
	}
	return ""
}

func (x *StartVMRequest) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *StartVMRequest) GetResourcesMax() *Resources {
	if x != nil {
		return x.ResourcesMax
	}
	return nil
}

func (x *StartVMRequest) GetResourcesBoot() *Resources {
	if x != nil {
		return x.ResourcesBoot
	}
	return nil
}

func (x *StartVMRequest) GetDiskImage() *DiskImage {
	if x != nil {
		return x.DiskImage
	}
	return nil
}

func (x *StartVMRequest) GetCloudInit() *CloudInitConfig {
	if x != nil {
		return x.CloudInit
	}
	return nil
}

func (x *StartVMRequest) GetNetworkConfig() *VMNetworkConfig {
	if x != nil {
		return x.NetworkConfig
	}
	return nil
}

// StartVMResponse is the response message after starting a VM
type StartVMResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the started VM
	VmId *string `protobuf:"bytes,1,opt,name=vm_id,json=vmId" json:"vm_id,omitempty"`
	// IP address of the VM (if available)
	IpAddress *string `protobuf:"bytes,2,opt,name=ip_address,json=ipAddress" json:"ip_address,omitempty"`
	// Status of the VM
	Status *VMStatus `protobuf:"varint,3,opt,name=status,enum=ec1.v1poc1.VMStatus" json:"status,omitempty"`
	// Error message, if any
	Error         *string `protobuf:"bytes,4,opt,name=error" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StartVMResponse) Reset() {
	*x = StartVMResponse{}
	mi := &file_ec1_v1poc1_agent_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StartVMResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartVMResponse) ProtoMessage() {}

func (x *StartVMResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ec1_v1poc1_agent_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartVMResponse.ProtoReflect.Descriptor instead.
func (*StartVMResponse) Descriptor() ([]byte, []int) {
	return file_ec1_v1poc1_agent_proto_rawDescGZIP(), []int{5}
}

func (x *StartVMResponse) GetVmId() string {
	if x != nil && x.VmId != nil {
		return *x.VmId
	}
	return ""
}

func (x *StartVMResponse) GetIpAddress() string {
	if x != nil && x.IpAddress != nil {
		return *x.IpAddress
	}
	return ""
}

func (x *StartVMResponse) GetStatus() VMStatus {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return VMStatus_VM_STATUS_UNSPECIFIED
}

func (x *StartVMResponse) GetError() string {
	if x != nil && x.Error != nil {
		return *x.Error
	}
	return ""
}

// StopVMRequest is the request message for stopping a VM
type StopVMRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the VM to stop
	VmId *string `protobuf:"bytes,1,opt,name=vm_id,json=vmId" json:"vm_id,omitempty"`
	// Force stop the VM without graceful shutdown
	Force         *bool `protobuf:"varint,2,opt,name=force" json:"force,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StopVMRequest) Reset() {
	*x = StopVMRequest{}
	mi := &file_ec1_v1poc1_agent_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StopVMRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopVMRequest) ProtoMessage() {}

func (x *StopVMRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ec1_v1poc1_agent_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopVMRequest.ProtoReflect.Descriptor instead.
func (*StopVMRequest) Descriptor() ([]byte, []int) {
	return file_ec1_v1poc1_agent_proto_rawDescGZIP(), []int{6}
}

func (x *StopVMRequest) GetVmId() string {
	if x != nil && x.VmId != nil {
		return *x.VmId
	}
	return ""
}

func (x *StopVMRequest) GetForce() bool {
	if x != nil && x.Force != nil {
		return *x.Force
	}
	return false
}

// StopVMResponse is the response message after stopping a VM
type StopVMResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Success status
	Success *bool `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
	// Error message, if any
	Error         *string `protobuf:"bytes,2,opt,name=error" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StopVMResponse) Reset() {
	*x = StopVMResponse{}
	mi := &file_ec1_v1poc1_agent_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StopVMResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopVMResponse) ProtoMessage() {}

func (x *StopVMResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ec1_v1poc1_agent_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopVMResponse.ProtoReflect.Descriptor instead.
func (*StopVMResponse) Descriptor() ([]byte, []int) {
	return file_ec1_v1poc1_agent_proto_rawDescGZIP(), []int{7}
}

func (x *StopVMResponse) GetSuccess() bool {
	if x != nil && x.Success != nil {
		return *x.Success
	}
	return false
}

func (x *StopVMResponse) GetError() string {
	if x != nil && x.Error != nil {
		return *x.Error
	}
	return ""
}

// VMStatusRequest is the request message for getting VM status
type VMStatusRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the VM to get status for
	VmId          *string `protobuf:"bytes,1,opt,name=vm_id,json=vmId" json:"vm_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VMStatusRequest) Reset() {
	*x = VMStatusRequest{}
	mi := &file_ec1_v1poc1_agent_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VMStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VMStatusRequest) ProtoMessage() {}

func (x *VMStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ec1_v1poc1_agent_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VMStatusRequest.ProtoReflect.Descriptor instead.
func (*VMStatusRequest) Descriptor() ([]byte, []int) {
	return file_ec1_v1poc1_agent_proto_rawDescGZIP(), []int{8}
}

func (x *VMStatusRequest) GetVmId() string {
	if x != nil && x.VmId != nil {
		return *x.VmId
	}
	return ""
}

// GetVMStatusResponse is the response message with VM status
type VMStatusResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Status of the VM
	Status *VMStatus `protobuf:"varint,1,opt,name=status,enum=ec1.v1poc1.VMStatus" json:"status,omitempty"`
	// IP address of the VM (if available)
	IpAddress *string `protobuf:"bytes,2,opt,name=ip_address,json=ipAddress" json:"ip_address,omitempty"`
	// Error message, if any
	Error         *string `protobuf:"bytes,3,opt,name=error" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VMStatusResponse) Reset() {
	*x = VMStatusResponse{}
	mi := &file_ec1_v1poc1_agent_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VMStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VMStatusResponse) ProtoMessage() {}

func (x *VMStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ec1_v1poc1_agent_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VMStatusResponse.ProtoReflect.Descriptor instead.
func (*VMStatusResponse) Descriptor() ([]byte, []int) {
	return file_ec1_v1poc1_agent_proto_rawDescGZIP(), []int{9}
}

func (x *VMStatusResponse) GetStatus() VMStatus {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return VMStatus_VM_STATUS_UNSPECIFIED
}

func (x *VMStatusResponse) GetIpAddress() string {
	if x != nil && x.IpAddress != nil {
		return *x.IpAddress
	}
	return ""
}

func (x *VMStatusResponse) GetError() string {
	if x != nil && x.Error != nil {
		return *x.Error
	}
	return ""
}

// VMNetworkConfig defines networking options for a VM
type VMNetworkConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Network type
	NetworkType *NetworkType `protobuf:"varint,1,opt,name=network_type,json=networkType,enum=ec1.v1poc1.NetworkType" json:"network_type,omitempty"`
	// Port forwarding rules
	PortForwards  []*PortForward `protobuf:"bytes,2,rep,name=port_forwards,json=portForwards" json:"port_forwards,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VMNetworkConfig) Reset() {
	*x = VMNetworkConfig{}
	mi := &file_ec1_v1poc1_agent_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VMNetworkConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VMNetworkConfig) ProtoMessage() {}

func (x *VMNetworkConfig) ProtoReflect() protoreflect.Message {
	mi := &file_ec1_v1poc1_agent_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VMNetworkConfig.ProtoReflect.Descriptor instead.
func (*VMNetworkConfig) Descriptor() ([]byte, []int) {
	return file_ec1_v1poc1_agent_proto_rawDescGZIP(), []int{10}
}

func (x *VMNetworkConfig) GetNetworkType() NetworkType {
	if x != nil && x.NetworkType != nil {
		return *x.NetworkType
	}
	return NetworkType_NETWORK_TYPE_UNSPECIFIED
}

func (x *VMNetworkConfig) GetPortForwards() []*PortForward {
	if x != nil {
		return x.PortForwards
	}
	return nil
}

// GetVMStatusRequest is the request message for getting VM status
type GetVMStatusRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the VM to get status for
	VmId          *string `protobuf:"bytes,1,opt,name=vm_id,json=vmId" json:"vm_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetVMStatusRequest) Reset() {
	*x = GetVMStatusRequest{}
	mi := &file_ec1_v1poc1_agent_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetVMStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVMStatusRequest) ProtoMessage() {}

func (x *GetVMStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ec1_v1poc1_agent_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVMStatusRequest.ProtoReflect.Descriptor instead.
func (*GetVMStatusRequest) Descriptor() ([]byte, []int) {
	return file_ec1_v1poc1_agent_proto_rawDescGZIP(), []int{11}
}

func (x *GetVMStatusRequest) GetVmId() string {
	if x != nil && x.VmId != nil {
		return *x.VmId
	}
	return ""
}

// GetVMStatusResponse is the response message with VM status
type GetVMStatusResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Response      *VMStatusResponse      `protobuf:"bytes,1,opt,name=response" json:"response,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetVMStatusResponse) Reset() {
	*x = GetVMStatusResponse{}
	mi := &file_ec1_v1poc1_agent_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetVMStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVMStatusResponse) ProtoMessage() {}

func (x *GetVMStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ec1_v1poc1_agent_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVMStatusResponse.ProtoReflect.Descriptor instead.
func (*GetVMStatusResponse) Descriptor() ([]byte, []int) {
	return file_ec1_v1poc1_agent_proto_rawDescGZIP(), []int{12}
}

func (x *GetVMStatusResponse) GetResponse() *VMStatusResponse {
	if x != nil {
		return x.Response
	}
	return nil
}

type AgentProbeRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AgentProbeRequest) Reset() {
	*x = AgentProbeRequest{}
	mi := &file_ec1_v1poc1_agent_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AgentProbeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgentProbeRequest) ProtoMessage() {}

func (x *AgentProbeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ec1_v1poc1_agent_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgentProbeRequest.ProtoReflect.Descriptor instead.
func (*AgentProbeRequest) Descriptor() ([]byte, []int) {
	return file_ec1_v1poc1_agent_proto_rawDescGZIP(), []int{13}
}

type AgentProbeResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// live
	Live *bool `protobuf:"varint,1,opt,name=live" json:"live,omitempty"`
	// ready
	Ready         *bool `protobuf:"varint,2,opt,name=ready" json:"ready,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AgentProbeResponse) Reset() {
	*x = AgentProbeResponse{}
	mi := &file_ec1_v1poc1_agent_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AgentProbeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgentProbeResponse) ProtoMessage() {}

func (x *AgentProbeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ec1_v1poc1_agent_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgentProbeResponse.ProtoReflect.Descriptor instead.
func (*AgentProbeResponse) Descriptor() ([]byte, []int) {
	return file_ec1_v1poc1_agent_proto_rawDescGZIP(), []int{14}
}

func (x *AgentProbeResponse) GetLive() bool {
	if x != nil && x.Live != nil {
		return *x.Live
	}
	return false
}

func (x *AgentProbeResponse) GetReady() bool {
	if x != nil && x.Ready != nil {
		return *x.Ready
	}
	return false
}

// DiskImage defines a disk image to use for a VM
type DiskImage struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Path to the disk image
	Path *string `protobuf:"bytes,1,opt,name=path" json:"path,omitempty"`
	// Type of disk image
	Type          *DiskImageType `protobuf:"varint,2,opt,name=type,enum=ec1.v1poc1.DiskImageType" json:"type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DiskImage) Reset() {
	*x = DiskImage{}
	mi := &file_ec1_v1poc1_agent_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DiskImage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiskImage) ProtoMessage() {}

func (x *DiskImage) ProtoReflect() protoreflect.Message {
	mi := &file_ec1_v1poc1_agent_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiskImage.ProtoReflect.Descriptor instead.
func (*DiskImage) Descriptor() ([]byte, []int) {
	return file_ec1_v1poc1_agent_proto_rawDescGZIP(), []int{15}
}

func (x *DiskImage) GetPath() string {
	if x != nil && x.Path != nil {
		return *x.Path
	}
	return ""
}

func (x *DiskImage) GetType() DiskImageType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return DiskImageType_DISK_IMAGE_TYPE_UNSPECIFIED
}

// CloudInitConfig defines cloud-init configuration for a VM
type CloudInitConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Path to cloud-init ISO
	IsoPath       *string `protobuf:"bytes,1,opt,name=iso_path,json=isoPath" json:"iso_path,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CloudInitConfig) Reset() {
	*x = CloudInitConfig{}
	mi := &file_ec1_v1poc1_agent_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CloudInitConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloudInitConfig) ProtoMessage() {}

func (x *CloudInitConfig) ProtoReflect() protoreflect.Message {
	mi := &file_ec1_v1poc1_agent_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloudInitConfig.ProtoReflect.Descriptor instead.
func (*CloudInitConfig) Descriptor() ([]byte, []int) {
	return file_ec1_v1poc1_agent_proto_rawDescGZIP(), []int{16}
}

func (x *CloudInitConfig) GetIsoPath() string {
	if x != nil && x.IsoPath != nil {
		return *x.IsoPath
	}
	return ""
}

var File_ec1_v1poc1_agent_proto protoreflect.FileDescriptor

const file_ec1_v1poc1_agent_proto_rawDesc = "" +
	"\n" +
	"\x16ec1/v1poc1/agent.proto\x12\n" +
	"ec1.v1poc1\x1a\x17ec1/v1poc1/common.proto\x1a\x1cec1/v1poc1/constraints.proto\x1a\x1bec1/validate/validate.proto\"\x0f\n" +
	"\rStatusRequest\"\x88\x01\n" +
	"\x0eStatusResponse\x12,\n" +
	"\bagent_id\x18\x01 \x01(\tB\x11\xbaH\x0er\f\U000b3bb1\x02\x06೮\xb1\x02\x01R\aagentId\x12+\n" +
	"\fhost_address\x18\x02 \x01(\tB\b\xbaH\x05r\x03\x88\x01\x01R\vhostAddress\x12\x1b\n" +
	"\tuptime_ms\x18\x03 \x01(\x04R\buptimeMs\"\xea\x01\n" +
	"\x13FileTransferRequest\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12$\n" +
	"\x0efile_byte_size\x18\x02 \x01(\rR\ffileByteSize\x12*\n" +
	"\x11chunk_total_count\x18\x03 \x01(\rR\x0fchunkTotalCount\x12\x1f\n" +
	"\vchunk_bytes\x18\x04 \x01(\fR\n" +
	"chunkBytes\x12&\n" +
	"\x0fchunk_byte_size\x18\x05 \x01(\rR\rchunkByteSize\x12$\n" +
	"\x0echunk_of_total\x18\x06 \x01(\rR\fchunkOfTotal\"l\n" +
	"\x14FileTransferResponse\x12\x16\n" +
	"\x06exists\x18\x01 \x01(\bR\x06exists\x12\x12\n" +
	"\x04size\x18\x02 \x01(\rR\x04size\x12\x12\n" +
	"\x04hash\x18\x03 \x01(\tR\x04hash\x12\x14\n" +
	"\x05error\x18\x04 \x01(\tR\x05error\"\xfc\x02\n" +
	"\x0eStartVMRequest\x12&\n" +
	"\x05vm_id\x18\x01 \x01(\tB\x11\xbaH\x0er\f\U000b3bb1\x02\x06賮\xb1\x02\x01R\x04vmId\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12:\n" +
	"\rresources_max\x18\x03 \x01(\v2\x15.ec1.v1poc1.ResourcesR\fresourcesMax\x12<\n" +
	"\x0eresources_boot\x18\x04 \x01(\v2\x15.ec1.v1poc1.ResourcesR\rresourcesBoot\x124\n" +
	"\n" +
	"disk_image\x18\x05 \x01(\v2\x15.ec1.v1poc1.DiskImageR\tdiskImage\x12:\n" +
	"\n" +
	"cloud_init\x18\x06 \x01(\v2\x1b.ec1.v1poc1.CloudInitConfigR\tcloudInit\x12B\n" +
	"\x0enetwork_config\x18\a \x01(\v2\x1b.ec1.v1poc1.VMNetworkConfigR\rnetworkConfig\"\xa5\x01\n" +
	"\x0fStartVMResponse\x12&\n" +
	"\x05vm_id\x18\x01 \x01(\tB\x11\xbaH\x0er\f\U000b3bb1\x02\x06賮\xb1\x02\x01R\x04vmId\x12&\n" +
	"\n" +
	"ip_address\x18\x02 \x01(\tB\a\xbaH\x04r\x02x\x01R\tipAddress\x12,\n" +
	"\x06status\x18\x03 \x01(\x0e2\x14.ec1.v1poc1.VMStatusR\x06status\x12\x14\n" +
	"\x05error\x18\x04 \x01(\tR\x05error\":\n" +
	"\rStopVMRequest\x12\x13\n" +
	"\x05vm_id\x18\x01 \x01(\tR\x04vmId\x12\x14\n" +
	"\x05force\x18\x02 \x01(\bR\x05force\"@\n" +
	"\x0eStopVMResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12\x14\n" +
	"\x05error\x18\x02 \x01(\tR\x05error\"&\n" +
	"\x0fVMStatusRequest\x12\x13\n" +
	"\x05vm_id\x18\x01 \x01(\tR\x04vmId\"u\n" +
	"\x10VMStatusResponse\x12,\n" +
	"\x06status\x18\x01 \x01(\x0e2\x14.ec1.v1poc1.VMStatusR\x06status\x12\x1d\n" +
	"\n" +
	"ip_address\x18\x02 \x01(\tR\tipAddress\x12\x14\n" +
	"\x05error\x18\x03 \x01(\tR\x05error\"\x8b\x01\n" +
	"\x0fVMNetworkConfig\x12:\n" +
	"\fnetwork_type\x18\x01 \x01(\x0e2\x17.ec1.v1poc1.NetworkTypeR\vnetworkType\x12<\n" +
	"\rport_forwards\x18\x02 \x03(\v2\x17.ec1.v1poc1.PortForwardR\fportForwards\")\n" +
	"\x12GetVMStatusRequest\x12\x13\n" +
	"\x05vm_id\x18\x01 \x01(\tR\x04vmId\"O\n" +
	"\x13GetVMStatusResponse\x128\n" +
	"\bresponse\x18\x01 \x01(\v2\x1c.ec1.v1poc1.VMStatusResponseR\bresponse\"\x13\n" +
	"\x11AgentProbeRequest\">\n" +
	"\x12AgentProbeResponse\x12\x12\n" +
	"\x04live\x18\x01 \x01(\bR\x04live\x12\x14\n" +
	"\x05ready\x18\x02 \x01(\bR\x05ready\"X\n" +
	"\tDiskImage\x12\x1c\n" +
	"\x04path\x18\x01 \x01(\tB\b\xbaH\x05r\x03\x88\x01\x01R\x04path\x12-\n" +
	"\x04type\x18\x02 \x01(\x0e2\x19.ec1.v1poc1.DiskImageTypeR\x04type\"6\n" +
	"\x0fCloudInitConfig\x12#\n" +
	"\biso_path\x18\x01 \x01(\tB\b\xbaH\x05r\x03\x88\x01\x01R\aisoPath*}\n" +
	"\rDiskImageType\x12\x1f\n" +
	"\x1bDISK_IMAGE_TYPE_UNSPECIFIED\x10\x00\x12\x17\n" +
	"\x13DISK_IMAGE_TYPE_RAW\x10\x01\x12\x19\n" +
	"\x15DISK_IMAGE_TYPE_QCOW2\x10\x02\x12\x17\n" +
	"\x13DISK_IMAGE_TYPE_VHD\x10\x032\xb6\x04\n" +
	"\fAgentService\x12G\n" +
	"\aStartVM\x12\x1a.ec1.v1poc1.StartVMRequest\x1a\x1b.ec1.v1poc1.StartVMResponse\"\x03\x90\x02\x01\x12D\n" +
	"\x06StopVM\x12\x19.ec1.v1poc1.StopVMRequest\x1a\x1a.ec1.v1poc1.StopVMResponse\"\x03\x90\x02\x01\x12L\n" +
	"\bVMStatus\x12\x1b.ec1.v1poc1.VMStatusRequest\x1a\x1c.ec1.v1poc1.VMStatusResponse\"\x03\x90\x02\x010\x01\x12S\n" +
	"\vGetVMStatus\x12\x1e.ec1.v1poc1.GetVMStatusRequest\x1a\x1f.ec1.v1poc1.GetVMStatusResponse\"\x03\x90\x02\x01\x12T\n" +
	"\n" +
	"AgentProbe\x12\x1d.ec1.v1poc1.AgentProbeRequest\x1a\x1e.ec1.v1poc1.AgentProbeResponse\"\x03\x90\x02\x01(\x010\x01\x12X\n" +
	"\fFileTransfer\x12\x1f.ec1.v1poc1.FileTransferRequest\x1a .ec1.v1poc1.FileTransferResponse\"\x03\x90\x02\x01(\x01\x12D\n" +
	"\x06Status\x12\x19.ec1.v1poc1.StatusRequest\x1a\x1a.ec1.v1poc1.StatusResponse\"\x03\x90\x02\x01B\x98\x01\n" +
	"\x0ecom.ec1.v1poc1B\n" +
	"AgentProtoP\x01Z1github.com/walteh/ec1/gen/proto/golang/ec1/v1poc1\xa2\x02\x03EVX\xaa\x02\n" +
	"Ec1.V1poc1\xca\x02\n" +
	"Ec1\\V1poc1\xe2\x02\x16Ec1\\V1poc1\\GPBMetadata\xea\x02\vEc1::V1poc1b\beditionsp\xe8\a"

var (
	file_ec1_v1poc1_agent_proto_rawDescOnce sync.Once
	file_ec1_v1poc1_agent_proto_rawDescData []byte
)

func file_ec1_v1poc1_agent_proto_rawDescGZIP() []byte {
	file_ec1_v1poc1_agent_proto_rawDescOnce.Do(func() {
		file_ec1_v1poc1_agent_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_ec1_v1poc1_agent_proto_rawDesc), len(file_ec1_v1poc1_agent_proto_rawDesc)))
	})
	return file_ec1_v1poc1_agent_proto_rawDescData
}

var file_ec1_v1poc1_agent_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_ec1_v1poc1_agent_proto_msgTypes = make([]protoimpl.MessageInfo, 17)
var file_ec1_v1poc1_agent_proto_goTypes = []any{
	(DiskImageType)(0),           // 0: ec1.v1poc1.DiskImageType
	(*StatusRequest)(nil),        // 1: ec1.v1poc1.StatusRequest
	(*StatusResponse)(nil),       // 2: ec1.v1poc1.StatusResponse
	(*FileTransferRequest)(nil),  // 3: ec1.v1poc1.FileTransferRequest
	(*FileTransferResponse)(nil), // 4: ec1.v1poc1.FileTransferResponse
	(*StartVMRequest)(nil),       // 5: ec1.v1poc1.StartVMRequest
	(*StartVMResponse)(nil),      // 6: ec1.v1poc1.StartVMResponse
	(*StopVMRequest)(nil),        // 7: ec1.v1poc1.StopVMRequest
	(*StopVMResponse)(nil),       // 8: ec1.v1poc1.StopVMResponse
	(*VMStatusRequest)(nil),      // 9: ec1.v1poc1.VMStatusRequest
	(*VMStatusResponse)(nil),     // 10: ec1.v1poc1.VMStatusResponse
	(*VMNetworkConfig)(nil),      // 11: ec1.v1poc1.VMNetworkConfig
	(*GetVMStatusRequest)(nil),   // 12: ec1.v1poc1.GetVMStatusRequest
	(*GetVMStatusResponse)(nil),  // 13: ec1.v1poc1.GetVMStatusResponse
	(*AgentProbeRequest)(nil),    // 14: ec1.v1poc1.AgentProbeRequest
	(*AgentProbeResponse)(nil),   // 15: ec1.v1poc1.AgentProbeResponse
	(*DiskImage)(nil),            // 16: ec1.v1poc1.DiskImage
	(*CloudInitConfig)(nil),      // 17: ec1.v1poc1.CloudInitConfig
	(*Resources)(nil),            // 18: ec1.v1poc1.Resources
	(VMStatus)(0),                // 19: ec1.v1poc1.VMStatus
	(NetworkType)(0),             // 20: ec1.v1poc1.NetworkType
	(*PortForward)(nil),          // 21: ec1.v1poc1.PortForward
}
var file_ec1_v1poc1_agent_proto_depIdxs = []int32{
	18, // 0: ec1.v1poc1.StartVMRequest.resources_max:type_name -> ec1.v1poc1.Resources
	18, // 1: ec1.v1poc1.StartVMRequest.resources_boot:type_name -> ec1.v1poc1.Resources
	16, // 2: ec1.v1poc1.StartVMRequest.disk_image:type_name -> ec1.v1poc1.DiskImage
	17, // 3: ec1.v1poc1.StartVMRequest.cloud_init:type_name -> ec1.v1poc1.CloudInitConfig
	11, // 4: ec1.v1poc1.StartVMRequest.network_config:type_name -> ec1.v1poc1.VMNetworkConfig
	19, // 5: ec1.v1poc1.StartVMResponse.status:type_name -> ec1.v1poc1.VMStatus
	19, // 6: ec1.v1poc1.VMStatusResponse.status:type_name -> ec1.v1poc1.VMStatus
	20, // 7: ec1.v1poc1.VMNetworkConfig.network_type:type_name -> ec1.v1poc1.NetworkType
	21, // 8: ec1.v1poc1.VMNetworkConfig.port_forwards:type_name -> ec1.v1poc1.PortForward
	10, // 9: ec1.v1poc1.GetVMStatusResponse.response:type_name -> ec1.v1poc1.VMStatusResponse
	0,  // 10: ec1.v1poc1.DiskImage.type:type_name -> ec1.v1poc1.DiskImageType
	5,  // 11: ec1.v1poc1.AgentService.StartVM:input_type -> ec1.v1poc1.StartVMRequest
	7,  // 12: ec1.v1poc1.AgentService.StopVM:input_type -> ec1.v1poc1.StopVMRequest
	9,  // 13: ec1.v1poc1.AgentService.VMStatus:input_type -> ec1.v1poc1.VMStatusRequest
	12, // 14: ec1.v1poc1.AgentService.GetVMStatus:input_type -> ec1.v1poc1.GetVMStatusRequest
	14, // 15: ec1.v1poc1.AgentService.AgentProbe:input_type -> ec1.v1poc1.AgentProbeRequest
	3,  // 16: ec1.v1poc1.AgentService.FileTransfer:input_type -> ec1.v1poc1.FileTransferRequest
	1,  // 17: ec1.v1poc1.AgentService.Status:input_type -> ec1.v1poc1.StatusRequest
	6,  // 18: ec1.v1poc1.AgentService.StartVM:output_type -> ec1.v1poc1.StartVMResponse
	8,  // 19: ec1.v1poc1.AgentService.StopVM:output_type -> ec1.v1poc1.StopVMResponse
	10, // 20: ec1.v1poc1.AgentService.VMStatus:output_type -> ec1.v1poc1.VMStatusResponse
	13, // 21: ec1.v1poc1.AgentService.GetVMStatus:output_type -> ec1.v1poc1.GetVMStatusResponse
	15, // 22: ec1.v1poc1.AgentService.AgentProbe:output_type -> ec1.v1poc1.AgentProbeResponse
	4,  // 23: ec1.v1poc1.AgentService.FileTransfer:output_type -> ec1.v1poc1.FileTransferResponse
	2,  // 24: ec1.v1poc1.AgentService.Status:output_type -> ec1.v1poc1.StatusResponse
	18, // [18:25] is the sub-list for method output_type
	11, // [11:18] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_ec1_v1poc1_agent_proto_init() }
func file_ec1_v1poc1_agent_proto_init() {
	if File_ec1_v1poc1_agent_proto != nil {
		return
	}
	file_ec1_v1poc1_common_proto_init()
	file_ec1_v1poc1_constraints_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_ec1_v1poc1_agent_proto_rawDesc), len(file_ec1_v1poc1_agent_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   17,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_ec1_v1poc1_agent_proto_goTypes,
		DependencyIndexes: file_ec1_v1poc1_agent_proto_depIdxs,
		EnumInfos:         file_ec1_v1poc1_agent_proto_enumTypes,
		MessageInfos:      file_ec1_v1poc1_agent_proto_msgTypes,
	}.Build()
	File_ec1_v1poc1_agent_proto = out.File
	file_ec1_v1poc1_agent_proto_goTypes = nil
	file_ec1_v1poc1_agent_proto_depIdxs = nil
}
