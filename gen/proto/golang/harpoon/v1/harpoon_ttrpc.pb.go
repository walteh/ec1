// Code generated by protoc-gen-go-ttrpc. DO NOT EDIT.
// source: harpoon/v1/harpoon.proto
package harpoonv1

import (
	context "context"
	ttrpc "github.com/containerd/ttrpc"
)

type TTRPCGuestServiceService interface {
	TimeSync(context.Context, *TimeSyncRequest) (*TimeSyncResponse, error)
	Readiness(context.Context, *ReadinessRequest) (*ReadinessResponse, error)
	RunSpec(context.Context, *RunSpecRequest) (*RunSpecResponse, error)
	RunSpecSignal(context.Context, TTRPCGuestService_RunSpecSignalServer) error
	RunCommand(context.Context, *RunCommandRequest) (*RunCommandResponse, error)
}

type TTRPCGuestService_RunSpecSignalServer interface {
	Send(*RunSpecSignalResponse) error
	Recv() (*RunSpecSignalRequest, error)
	ttrpc.StreamServer
}

type ttrpcguestserviceRunSpecSignalServer struct {
	ttrpc.StreamServer
}

func (x *ttrpcguestserviceRunSpecSignalServer) Send(m *RunSpecSignalResponse) error {
	return x.StreamServer.SendMsg(m)
}

func (x *ttrpcguestserviceRunSpecSignalServer) Recv() (*RunSpecSignalRequest, error) {
	m := new(RunSpecSignalRequest)
	if err := x.StreamServer.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func RegisterTTRPCGuestServiceService(srv *ttrpc.Server, svc TTRPCGuestServiceService) {
	srv.RegisterService("harpoon.v1.GuestService", &ttrpc.ServiceDesc{
		Methods: map[string]ttrpc.Method{
			"TimeSync": func(ctx context.Context, unmarshal func(interface{}) error) (interface{}, error) {
				var req TimeSyncRequest
				if err := unmarshal(&req); err != nil {
					return nil, err
				}
				return svc.TimeSync(ctx, &req)
			},
			"Readiness": func(ctx context.Context, unmarshal func(interface{}) error) (interface{}, error) {
				var req ReadinessRequest
				if err := unmarshal(&req); err != nil {
					return nil, err
				}
				return svc.Readiness(ctx, &req)
			},
			"RunSpec": func(ctx context.Context, unmarshal func(interface{}) error) (interface{}, error) {
				var req RunSpecRequest
				if err := unmarshal(&req); err != nil {
					return nil, err
				}
				return svc.RunSpec(ctx, &req)
			},
			"RunCommand": func(ctx context.Context, unmarshal func(interface{}) error) (interface{}, error) {
				var req RunCommandRequest
				if err := unmarshal(&req); err != nil {
					return nil, err
				}
				return svc.RunCommand(ctx, &req)
			},
		},
		Streams: map[string]ttrpc.Stream{
			"RunSpecSignal": {
				Handler: func(ctx context.Context, stream ttrpc.StreamServer) (interface{}, error) {
					return nil, svc.RunSpecSignal(ctx, &ttrpcguestserviceRunSpecSignalServer{stream})
				},
				StreamingClient: true,
				StreamingServer: true,
			},
		},
	})
}

type TTRPCGuestServiceClient interface {
	TimeSync(context.Context, *TimeSyncRequest) (*TimeSyncResponse, error)
	Readiness(context.Context, *ReadinessRequest) (*ReadinessResponse, error)
	RunSpec(context.Context, *RunSpecRequest) (*RunSpecResponse, error)
	RunSpecSignal(context.Context) (TTRPCGuestService_RunSpecSignalClient, error)
	RunCommand(context.Context, *RunCommandRequest) (*RunCommandResponse, error)
}

type ttrpcguestserviceClient struct {
	client *ttrpc.Client
}

func NewTTRPCGuestServiceClient(client *ttrpc.Client) TTRPCGuestServiceClient {
	return &ttrpcguestserviceClient{
		client: client,
	}
}

func (c *ttrpcguestserviceClient) TimeSync(ctx context.Context, req *TimeSyncRequest) (*TimeSyncResponse, error) {
	var resp TimeSyncResponse
	if err := c.client.Call(ctx, "harpoon.v1.GuestService", "TimeSync", req, &resp); err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *ttrpcguestserviceClient) Readiness(ctx context.Context, req *ReadinessRequest) (*ReadinessResponse, error) {
	var resp ReadinessResponse
	if err := c.client.Call(ctx, "harpoon.v1.GuestService", "Readiness", req, &resp); err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *ttrpcguestserviceClient) RunSpec(ctx context.Context, req *RunSpecRequest) (*RunSpecResponse, error) {
	var resp RunSpecResponse
	if err := c.client.Call(ctx, "harpoon.v1.GuestService", "RunSpec", req, &resp); err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *ttrpcguestserviceClient) RunSpecSignal(ctx context.Context) (TTRPCGuestService_RunSpecSignalClient, error) {
	stream, err := c.client.NewStream(ctx, &ttrpc.StreamDesc{
		StreamingClient: true,
		StreamingServer: true,
	}, "harpoon.v1.GuestService", "RunSpecSignal", nil)
	if err != nil {
		return nil, err
	}
	x := &ttrpcguestserviceRunSpecSignalClient{stream}
	return x, nil
}

type TTRPCGuestService_RunSpecSignalClient interface {
	Send(*RunSpecSignalRequest) error
	Recv() (*RunSpecSignalResponse, error)
	ttrpc.ClientStream
}

type ttrpcguestserviceRunSpecSignalClient struct {
	ttrpc.ClientStream
}

func (x *ttrpcguestserviceRunSpecSignalClient) Send(m *RunSpecSignalRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *ttrpcguestserviceRunSpecSignalClient) Recv() (*RunSpecSignalResponse, error) {
	m := new(RunSpecSignalResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *ttrpcguestserviceClient) RunCommand(ctx context.Context, req *RunCommandRequest) (*RunCommandResponse, error) {
	var resp RunCommandResponse
	if err := c.client.Call(ctx, "harpoon.v1.GuestService", "RunCommand", req, &resp); err != nil {
		return nil, err
	}
	return &resp, nil
}
