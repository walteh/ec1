// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: harpoon/v1/harpoon.proto

package harpoonv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/walteh/ec1/gen/proto/golang/harpoon/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// GuestServiceName is the fully-qualified name of the GuestService service.
	GuestServiceName = "harpoon.v1.GuestService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// GuestServiceTimeSyncProcedure is the fully-qualified name of the GuestService's TimeSync RPC.
	GuestServiceTimeSyncProcedure = "/harpoon.v1.GuestService/TimeSync"
	// GuestServiceReadinessProcedure is the fully-qualified name of the GuestService's Readiness RPC.
	GuestServiceReadinessProcedure = "/harpoon.v1.GuestService/Readiness"
	// GuestServiceRunSpecProcedure is the fully-qualified name of the GuestService's RunSpec RPC.
	GuestServiceRunSpecProcedure = "/harpoon.v1.GuestService/RunSpec"
	// GuestServiceRunSpecSignalProcedure is the fully-qualified name of the GuestService's
	// RunSpecSignal RPC.
	GuestServiceRunSpecSignalProcedure = "/harpoon.v1.GuestService/RunSpecSignal"
	// GuestServiceRunCommandProcedure is the fully-qualified name of the GuestService's RunCommand RPC.
	GuestServiceRunCommandProcedure = "/harpoon.v1.GuestService/RunCommand"
)

// GuestServiceClient is a client for the harpoon.v1.GuestService service.
type GuestServiceClient interface {
	TimeSync(context.Context, *connect.Request[v1.TimeSyncRequest]) (*connect.Response[v1.TimeSyncResponse], error)
	Readiness(context.Context, *connect.Request[v1.ReadinessRequest]) (*connect.Response[v1.ReadinessResponse], error)
	RunSpec(context.Context, *connect.Request[v1.RunSpecRequest]) (*connect.Response[v1.RunSpecResponse], error)
	RunSpecSignal(context.Context) *connect.BidiStreamForClient[v1.RunSpecSignalRequest, v1.RunSpecSignalResponse]
	RunCommand(context.Context, *connect.Request[v1.RunCommandRequest]) (*connect.Response[v1.RunCommandResponse], error)
}

// NewGuestServiceClient constructs a client for the harpoon.v1.GuestService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewGuestServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) GuestServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	guestServiceMethods := v1.File_harpoon_v1_harpoon_proto.Services().ByName("GuestService").Methods()
	return &guestServiceClient{
		timeSync: connect.NewClient[v1.TimeSyncRequest, v1.TimeSyncResponse](
			httpClient,
			baseURL+GuestServiceTimeSyncProcedure,
			connect.WithSchema(guestServiceMethods.ByName("TimeSync")),
			connect.WithClientOptions(opts...),
		),
		readiness: connect.NewClient[v1.ReadinessRequest, v1.ReadinessResponse](
			httpClient,
			baseURL+GuestServiceReadinessProcedure,
			connect.WithSchema(guestServiceMethods.ByName("Readiness")),
			connect.WithClientOptions(opts...),
		),
		runSpec: connect.NewClient[v1.RunSpecRequest, v1.RunSpecResponse](
			httpClient,
			baseURL+GuestServiceRunSpecProcedure,
			connect.WithSchema(guestServiceMethods.ByName("RunSpec")),
			connect.WithClientOptions(opts...),
		),
		runSpecSignal: connect.NewClient[v1.RunSpecSignalRequest, v1.RunSpecSignalResponse](
			httpClient,
			baseURL+GuestServiceRunSpecSignalProcedure,
			connect.WithSchema(guestServiceMethods.ByName("RunSpecSignal")),
			connect.WithClientOptions(opts...),
		),
		runCommand: connect.NewClient[v1.RunCommandRequest, v1.RunCommandResponse](
			httpClient,
			baseURL+GuestServiceRunCommandProcedure,
			connect.WithSchema(guestServiceMethods.ByName("RunCommand")),
			connect.WithClientOptions(opts...),
		),
	}
}

// guestServiceClient implements GuestServiceClient.
type guestServiceClient struct {
	timeSync      *connect.Client[v1.TimeSyncRequest, v1.TimeSyncResponse]
	readiness     *connect.Client[v1.ReadinessRequest, v1.ReadinessResponse]
	runSpec       *connect.Client[v1.RunSpecRequest, v1.RunSpecResponse]
	runSpecSignal *connect.Client[v1.RunSpecSignalRequest, v1.RunSpecSignalResponse]
	runCommand    *connect.Client[v1.RunCommandRequest, v1.RunCommandResponse]
}

// TimeSync calls harpoon.v1.GuestService.TimeSync.
func (c *guestServiceClient) TimeSync(ctx context.Context, req *connect.Request[v1.TimeSyncRequest]) (*connect.Response[v1.TimeSyncResponse], error) {
	return c.timeSync.CallUnary(ctx, req)
}

// Readiness calls harpoon.v1.GuestService.Readiness.
func (c *guestServiceClient) Readiness(ctx context.Context, req *connect.Request[v1.ReadinessRequest]) (*connect.Response[v1.ReadinessResponse], error) {
	return c.readiness.CallUnary(ctx, req)
}

// RunSpec calls harpoon.v1.GuestService.RunSpec.
func (c *guestServiceClient) RunSpec(ctx context.Context, req *connect.Request[v1.RunSpecRequest]) (*connect.Response[v1.RunSpecResponse], error) {
	return c.runSpec.CallUnary(ctx, req)
}

// RunSpecSignal calls harpoon.v1.GuestService.RunSpecSignal.
func (c *guestServiceClient) RunSpecSignal(ctx context.Context) *connect.BidiStreamForClient[v1.RunSpecSignalRequest, v1.RunSpecSignalResponse] {
	return c.runSpecSignal.CallBidiStream(ctx)
}

// RunCommand calls harpoon.v1.GuestService.RunCommand.
func (c *guestServiceClient) RunCommand(ctx context.Context, req *connect.Request[v1.RunCommandRequest]) (*connect.Response[v1.RunCommandResponse], error) {
	return c.runCommand.CallUnary(ctx, req)
}

// GuestServiceHandler is an implementation of the harpoon.v1.GuestService service.
type GuestServiceHandler interface {
	TimeSync(context.Context, *connect.Request[v1.TimeSyncRequest]) (*connect.Response[v1.TimeSyncResponse], error)
	Readiness(context.Context, *connect.Request[v1.ReadinessRequest]) (*connect.Response[v1.ReadinessResponse], error)
	RunSpec(context.Context, *connect.Request[v1.RunSpecRequest]) (*connect.Response[v1.RunSpecResponse], error)
	RunSpecSignal(context.Context, *connect.BidiStream[v1.RunSpecSignalRequest, v1.RunSpecSignalResponse]) error
	RunCommand(context.Context, *connect.Request[v1.RunCommandRequest]) (*connect.Response[v1.RunCommandResponse], error)
}

// NewGuestServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewGuestServiceHandler(svc GuestServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	guestServiceMethods := v1.File_harpoon_v1_harpoon_proto.Services().ByName("GuestService").Methods()
	guestServiceTimeSyncHandler := connect.NewUnaryHandler(
		GuestServiceTimeSyncProcedure,
		svc.TimeSync,
		connect.WithSchema(guestServiceMethods.ByName("TimeSync")),
		connect.WithHandlerOptions(opts...),
	)
	guestServiceReadinessHandler := connect.NewUnaryHandler(
		GuestServiceReadinessProcedure,
		svc.Readiness,
		connect.WithSchema(guestServiceMethods.ByName("Readiness")),
		connect.WithHandlerOptions(opts...),
	)
	guestServiceRunSpecHandler := connect.NewUnaryHandler(
		GuestServiceRunSpecProcedure,
		svc.RunSpec,
		connect.WithSchema(guestServiceMethods.ByName("RunSpec")),
		connect.WithHandlerOptions(opts...),
	)
	guestServiceRunSpecSignalHandler := connect.NewBidiStreamHandler(
		GuestServiceRunSpecSignalProcedure,
		svc.RunSpecSignal,
		connect.WithSchema(guestServiceMethods.ByName("RunSpecSignal")),
		connect.WithHandlerOptions(opts...),
	)
	guestServiceRunCommandHandler := connect.NewUnaryHandler(
		GuestServiceRunCommandProcedure,
		svc.RunCommand,
		connect.WithSchema(guestServiceMethods.ByName("RunCommand")),
		connect.WithHandlerOptions(opts...),
	)
	return "/harpoon.v1.GuestService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case GuestServiceTimeSyncProcedure:
			guestServiceTimeSyncHandler.ServeHTTP(w, r)
		case GuestServiceReadinessProcedure:
			guestServiceReadinessHandler.ServeHTTP(w, r)
		case GuestServiceRunSpecProcedure:
			guestServiceRunSpecHandler.ServeHTTP(w, r)
		case GuestServiceRunSpecSignalProcedure:
			guestServiceRunSpecSignalHandler.ServeHTTP(w, r)
		case GuestServiceRunCommandProcedure:
			guestServiceRunCommandHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedGuestServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedGuestServiceHandler struct{}

func (UnimplementedGuestServiceHandler) TimeSync(context.Context, *connect.Request[v1.TimeSyncRequest]) (*connect.Response[v1.TimeSyncResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("harpoon.v1.GuestService.TimeSync is not implemented"))
}

func (UnimplementedGuestServiceHandler) Readiness(context.Context, *connect.Request[v1.ReadinessRequest]) (*connect.Response[v1.ReadinessResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("harpoon.v1.GuestService.Readiness is not implemented"))
}

func (UnimplementedGuestServiceHandler) RunSpec(context.Context, *connect.Request[v1.RunSpecRequest]) (*connect.Response[v1.RunSpecResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("harpoon.v1.GuestService.RunSpec is not implemented"))
}

func (UnimplementedGuestServiceHandler) RunSpecSignal(context.Context, *connect.BidiStream[v1.RunSpecSignalRequest, v1.RunSpecSignalResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("harpoon.v1.GuestService.RunSpecSignal is not implemented"))
}

func (UnimplementedGuestServiceHandler) RunCommand(context.Context, *connect.Request[v1.RunCommandRequest]) (*connect.Response[v1.RunCommandResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("harpoon.v1.GuestService.RunCommand is not implemented"))
}
