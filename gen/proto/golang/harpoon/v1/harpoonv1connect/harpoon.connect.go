// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: harpoon/v1/harpoon.proto

package harpoonv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/walteh/ec1/gen/proto/golang/harpoon/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// GuestServiceName is the fully-qualified name of the GuestService service.
	GuestServiceName = "harpoon.v1.GuestService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// GuestServiceExecProcedure is the fully-qualified name of the GuestService's Exec RPC.
	GuestServiceExecProcedure = "/harpoon.v1.GuestService/Exec"
)

// GuestServiceClient is a client for the harpoon.v1.GuestService service.
type GuestServiceClient interface {
	Exec(context.Context) *connect.BidiStreamForClient[v1.ExecRequest, v1.ExecResponse]
}

// NewGuestServiceClient constructs a client for the harpoon.v1.GuestService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewGuestServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) GuestServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	guestServiceMethods := v1.File_harpoon_v1_harpoon_proto.Services().ByName("GuestService").Methods()
	return &guestServiceClient{
		exec: connect.NewClient[v1.ExecRequest, v1.ExecResponse](
			httpClient,
			baseURL+GuestServiceExecProcedure,
			connect.WithSchema(guestServiceMethods.ByName("Exec")),
			connect.WithClientOptions(opts...),
		),
	}
}

// guestServiceClient implements GuestServiceClient.
type guestServiceClient struct {
	exec *connect.Client[v1.ExecRequest, v1.ExecResponse]
}

// Exec calls harpoon.v1.GuestService.Exec.
func (c *guestServiceClient) Exec(ctx context.Context) *connect.BidiStreamForClient[v1.ExecRequest, v1.ExecResponse] {
	return c.exec.CallBidiStream(ctx)
}

// GuestServiceHandler is an implementation of the harpoon.v1.GuestService service.
type GuestServiceHandler interface {
	Exec(context.Context, *connect.BidiStream[v1.ExecRequest, v1.ExecResponse]) error
}

// NewGuestServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewGuestServiceHandler(svc GuestServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	guestServiceMethods := v1.File_harpoon_v1_harpoon_proto.Services().ByName("GuestService").Methods()
	guestServiceExecHandler := connect.NewBidiStreamHandler(
		GuestServiceExecProcedure,
		svc.Exec,
		connect.WithSchema(guestServiceMethods.ByName("Exec")),
		connect.WithHandlerOptions(opts...),
	)
	return "/harpoon.v1.GuestService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case GuestServiceExecProcedure:
			guestServiceExecHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedGuestServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedGuestServiceHandler struct{}

func (UnimplementedGuestServiceHandler) Exec(context.Context, *connect.BidiStream[v1.ExecRequest, v1.ExecResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("harpoon.v1.GuestService.Exec is not implemented"))
}
