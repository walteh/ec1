# c-for-go configuration for Virtualization
GENERATOR: 
  PackageName: virtualization
  PackageDescription: "Package virtualization provides Go bindings for Apple's Virtualization framework."
  PackageLicense: "// Copyright 2023 Walt Tizzano. All rights reserved."
  Includes: [Virtualization.shim.h]
  FlagGroups:
    - {name: "CFLAGS", flags: [-x, objective-c, -fno-objc-arc, -I/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/System/Library/Frameworks/Virtualization.framework/Headers]}
    - {name: "LDFLAGS", flags: [-framework, Virtualization]}

PARSER: 
  IncludePaths: 
    - sandbox/cmd/cgen/module
    - /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/System/Library/Frameworks/Virtualization.framework/Headers
    - /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include
  SourcesPaths: [sandbox/cmd/cgen/module/Virtualization.shim.h]

TRANSLATOR: 
  ConstRules: 
    defines: expand
    enum: eval
  PtrTips:
    function:
      # Handle function pointers that return objects
      - {target: _get$, tips: [0, ret]}
  Rules: 
    global: 
      - {transform: lower}
      # Accept all functions generated by cgen
      - {action: accept, from: "^c__"}
      # Proper camel case namings for method patterns
      - {action: replace, from: "_get$", to: Get}
      - {action: replace, from: "_set$", to: Set}
      - {action: replace, from: "_create$", to: Create}
      - {action: replace, from: "_init$", to: Init}
      - {action: replace, from: "_alloc$", to: Alloc}
      - {action: replace, from: "_new$", to: New}
      - {action: replace, from: "_copy$", to: Copy}
      - {action: replace, from: "_release$", to: Release}
      # Framework-specific method patterns
      - {action: replace, from: "_with", to: With}
      - {action: replace, from: "_for", to: For}
      - {action: replace, from: "_from", to: From}
      - {action: replace, from: "_to", to: To}
      - {action: replace, from: "_by", to: By}
    type: 
      # Accept all types
      - {action: accept, from: ".+"}
      # Rename type patterns
      - {action: replace, from: "_t$", to: ""}
    private:
      - {transform: unexport}
    post-global: 
      - {action: replace, from: "_$"}
      - {load: snakecase}
      - {transform: export}
  typemap:
    # Map C types to Go types
    void*: "unsafe.Pointer"
    char*: "string"
    const char*: "string"
    NSArray*: "unsafe.Pointer"
    NSString*: "string"
    int8_t: "int8"
    uint8_t: "uint8"
    int16_t: "int16"
    uint16_t: "uint16"
    int32_t: "int32"
    uint32_t: "uint32"
    int64_t: "int64"
    uint64_t: "uint64"
    bool: "bool"
    float: "float32"
    double: "float64"
