edition = "2023";

package ec1.v1poc1;

import "ec1/v1poc1/common.proto";
import "ec1/v1poc1/constraints.proto";
import "ec1/validate/validate.proto";

// AgentService provides VM management functionality on a host
service AgentService {
	// StartVM starts a new virtual machine on the agent's host
	rpc StartVM(StartVMRequest) returns (StartVMResponse) {
		option idempotency_level = NO_SIDE_EFFECTS;
	}


	// StopVM stops a running virtual machine on the agent's host
	rpc StopVM(StopVMRequest) returns (StopVMResponse) {
		option idempotency_level = NO_SIDE_EFFECTS;
	}


	// GetVMStatus gets the status of a virtual machine on the agent's host
	rpc VMStatus(VMStatusRequest) returns (stream VMStatusResponse) {
		option idempotency_level = NO_SIDE_EFFECTS;
	}


	// GetVMStatus gets the status of a virtual machine on the agent's host
	rpc GetVMStatus(GetVMStatusRequest) returns (GetVMStatusResponse) {
		option idempotency_level = NO_SIDE_EFFECTS;
	}


	rpc AgentProbe(stream AgentProbeRequest) returns (stream AgentProbeResponse) {
		option idempotency_level = NO_SIDE_EFFECTS;
	}


	rpc FileTransfer(stream FileTransferRequest) returns (FileTransferResponse) {
		option idempotency_level = NO_SIDE_EFFECTS;
	}


	rpc Status(StatusRequest) returns (StatusResponse) {
		option idempotency_level = NO_SIDE_EFFECTS;
	}
}

message StatusRequest {}

message StatusResponse {
	string agent_id = 1 [
		(validate.field).string.(id).agent = true
	];

	string host_address = 2 [
		(validate.field).string.uri = true
	];

	uint64 uptime_ms = 3;
}

message FileTransferRequest {
	string name              = 1;
	uint32 file_byte_size    = 2;
	uint32 chunk_total_count = 3;
	bytes  chunk_bytes       = 4;
	uint32 chunk_byte_size   = 5;
	uint32 chunk_of_total    = 6;
}

message FileTransferResponse {
	bool   exists = 1;
	uint32 size   = 2;
	string hash   = 3;
	string error  = 4;
}

// StartVMRequest is the request message for starting a VM
message StartVMRequest {
	// ID of the VM (optional, will be generated if not provided)
	string vm_id = 1 [
		(validate.field).string.(id).vm = true
	];

	// Name of the VM
	string name = 2;

	// Resource allocation
	Resources resources_max  = 3;
	Resources resources_boot = 4;

	// Disk image information
	DiskImage disk_image = 5;

	// Cloud-init configuration
	CloudInitConfig cloud_init = 6;

	// Network configuration
	VMNetworkConfig network_config = 7;
}

// StartVMResponse is the response message after starting a VM
message StartVMResponse {
	// ID of the started VM
	string vm_id = 1 [
		(validate.field).string.(id).vm = true
	];

	// IP address of the VM (if available)
	string ip_address = 2 [
		(validate.field).string.ipv4 = true
	];

	string ssh_username = 3;
	string ssh_password = 4;

	// Status of the VM
	VMStatus status = 5;

	// Error message, if any
	string error = 6;
}

// StopVMRequest is the request message for stopping a VM
message StopVMRequest {
	// ID of the VM to stop
	string vm_id = 1;

	// Force stop the VM without graceful shutdown
	bool force = 2;
}

// StopVMResponse is the response message after stopping a VM
message StopVMResponse {
	// Success status
	bool success = 1;

	// Error message, if any
	string error = 2;
}

// VMStatusRequest is the request message for getting VM status
message VMStatusRequest {
	// ID of the VM to get status for
	string vm_id = 1;
}

// GetVMStatusResponse is the response message with VM status
message VMStatusResponse {
	// Status of the VM
	VMStatus status = 1;

	// IP address of the VM (if available)
	string ip_address = 2;

	// Error message, if any
	string error = 3;
}

// VMNetworkConfig defines networking options for a VM
message VMNetworkConfig {
	// Network type
	NetworkType network_type = 1;

	// Port forwarding rules
	repeated PortForward port_forwards = 2;
}

// GetVMStatusRequest is the request message for getting VM status
message GetVMStatusRequest {
	// ID of the VM to get status for
	string vm_id = 1;
}

// GetVMStatusResponse is the response message with VM status
message GetVMStatusResponse {
	VMStatusResponse response = 1;
}

message AgentProbeRequest {}

message AgentProbeResponse {
	// live
	bool live = 1;

	// ready
	bool ready = 2;
}

// DiskImage defines a disk image to use for a VM
message DiskImage {
	// Path to the disk image
	string path = 1 [
		(validate.field).string.uri = true
	];

	// Type of disk image
	DiskImageType type = 2;
}

// CloudInitConfig defines cloud-init configuration for a VM
message CloudInitConfig {
	// Path to cloud-init ISO
	string iso_path = 1 [
		(validate.field).string.uri = true
	];
}

// DiskImageType defines the type of disk image
enum DiskImageType {
	DISK_IMAGE_TYPE_UNSPECIFIED = 0;
	DISK_IMAGE_TYPE_RAW         = 1;
	DISK_IMAGE_TYPE_QCOW2       = 2;
	DISK_IMAGE_TYPE_VHD         = 3;
}
